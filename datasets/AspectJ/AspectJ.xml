<?xml version="1.0" encoding="utf-8"?>
<!--
- phpMyAdmin XML Dump
- version 4.1.6
- http://www.phpmyadmin.net
-
- Host: vital.cmbotwdj6wje.us-west-2.rds.amazonaws.com
- Generation Time: Aug 30, 2014 at 04:35 AM
- Server version: 5.6.17
- PHP Version: 5.5.9
-->

<pma_xml_export version="1.0" xmlns:pma="http://www.phpmyadmin.net/some_doc_url/">
    <!--
    - Structure schemas
    -->
    <pma:structure_schemas>
        <pma:database name="aspectj" collation="latin1_swedish_ci" charset="latin1">
            <pma:table name="aspectj">
                CREATE TABLE `aspectj` (
                  `id` int(11) NOT NULL AUTO_INCREMENT,
                  `bug_id` int(11) NOT NULL,
                  `summary` tinytext CHARACTER SET utf8 NOT NULL,
                  `description` text CHARACTER SET utf8 NOT NULL,
                  `report_time` datetime NOT NULL,
                  `report_timestamp` float NOT NULL,
                  `status` varchar(50) CHARACTER SET utf8 NOT NULL,
                  `commit` varchar(50) CHARACTER SET utf8 NOT NULL,
                  `commit_timestamp` float NOT NULL,
                  `files` mediumtext CHARACTER SET utf8 NOT NULL,
                  `result` mediumtext CHARACTER SET utf8 NOT NULL,
                  PRIMARY KEY (`id`)
                ) ENGINE=MyISAM AUTO_INCREMENT=594 DEFAULT CHARSET=latin1;
            </pma:table>
        </pma:database>
    </pma:structure_schemas>

    <!--
    - Database: 'aspectj'
    -->
    <database name="aspectj">
        <!-- Table aspectj -->
        <table name="aspectj">
            <column name="id">1</column>
            <column name="bug_id">423257</column>
            <column name="summary">Bug 423257  LTW - java.lang.VerifyError: Bad return type with generics and local variables</column>
            <column name="description"></column>
            <column name="report_time">2013-12-04 19:43:22</column>
            <column name="report_timestamp">1386200000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">dd88d21</column>
            <column name="commit_timestamp">1386350000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java
tests/bugs175/pr423257/AspectX.java
tests/bugs175/pr423257/Test.java
tests/src/org/aspectj/systemtest/AllTests17.java
tests/src/org/aspectj/systemtest/ajc175/Ajc175Tests.java
tests/src/org/aspectj/systemtest/ajc175/AllTestsAspectJ175.java
tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java</column>
            <column name="result">52:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
129:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java
179:weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java
258:tests/src/org/aspectj/systemtest/AllTests17.java</column>
        </table>
        <table name="aspectj">
            <column name="id">2</column>
            <column name="bug_id">420210</column>
            <column name="summary">Bug 420210  Support additional message insert keys in declare error/warning</column>
            <column name="description">It would be good to be able to insert the enclosing class name or enclosing member for a joinpoint.</column>
            <column name="report_time">2013-10-23 16:00:16</column>
            <column name="report_timestamp">1382560000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9319e34</column>
            <column name="commit_timestamp">1382560000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/Checker.java
tests/bugs174/extra_inserts/Code.java
tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java</column>
            <column name="result">63:org.aspectj.matcher/src/org/aspectj/weaver/Checker.java
101:tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">3</column>
            <column name="bug_id">419279</column>
            <column name="summary">Bug 419279  ajc option to change -Xlint level per-message without Xlintfile</column>
            <column name="description">The -Xlintfile option is not a great fit for controlling message across multiple build projects, specifically in my case from the pluginManagement section of a maven parent pom. The problem is that you need a local file to configure the per-message output levels (ignore/warning/error) when you really want to specify it in the build script or in a shared file.

As an alternative to -Xlintfile, it would be handy to be able to change an Xlint warning level per message using command line options.

For example:

ajc -Xlint:adviceDidNotMatch=ignore

would override the XlintDefault.properties file for the adviceDidNotMatch message.

With Regards
Rob</column>
            <column name="report_time">2013-10-11 15:20:08</column>
            <column name="report_timestamp">1381520000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b2cd5fa</column>
            <column name="commit_timestamp">1382560000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.matcher/src/org/aspectj/weaver/Lint.java
testing/newsrc/org/aspectj/testing/CompileSpec.java
tests/bugs174/pr419279/Code.java
tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java</column>
            <column name="result">6:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
26:org.aspectj.matcher/src/org/aspectj/weaver/Lint.java
29:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
40:testing/newsrc/org/aspectj/testing/CompileSpec.java
44:tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">4</column>
            <column name="bug_id">415266</column>
            <column name="summary">Bug 415266  LTW not working when JMX is enabled</column>
            <column name="description">When I enable JMX remote management on a JVM along with AspectJ load-time weaving (LTW), our Aspect doesn't appear to get woven in.

This are the JVM arguments:

-Dvisualvm.display.name=JdbcTimingAspectTest -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=1024 -javaagent:/jars/aspectjweaver.jar -Dorg.aspectj.weaver.loadtime.configuration=com/trgr/cobalt/infrastructure/instrumentation/aspects/timing/jdbc/jdbcmonitor.xml

Note that if I don't enable JMX remote management (by remove the -Dcom.sun.management.jmxremote.* JVM arguments), the Aspect works fine.</column>
            <column name="report_time">2013-08-16 17:51:29</column>
            <column name="report_timestamp">1376690000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9e992d6</column>
            <column name="commit_timestamp">1380650000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/Aj.java</column>
            <column name="result">5:loadtime/src/org/aspectj/weaver/loadtime/Aj.java</column>
        </table>
        <table name="aspectj">
            <column name="id">5</column>
            <column name="bug_id">418129</column>
            <column name="summary">Bug 418129  Can't introduce annotation onto introduced method from trait-patterned aspect</column>
            <column name="description"></column>
            <column name="report_time">2013-09-26 14:31:09</column>
            <column name="report_timestamp">1380220000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2393bef</column>
            <column name="commit_timestamp">1380650000</column>
            <column name="files">tests/bugs174/pr418129/Target.java
tests/bugs174/pr418129/Target2.java
tests/bugs174/pr418129/Target3.java
tests/bugs174/pr418129/Target4.java
tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
weaver/src/org/aspectj/weaver/bcel/BcelWorld.java
weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</column>
            <column name="result">21:weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
41:weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java
75:weaver/src/org/aspectj/weaver/bcel/BcelWorld.java
384:tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">6</column>
            <column name="bug_id">368046</column>
            <column name="summary">Bug 368046  configure a set of classloader for which weavers should not be created in an LTW scenario</column>
            <column name="description">Prototyped and tested for JspClassLoaders (see the thread 'aspectj and jsp load' on the mailing list).

That was done through a system property but it would be easier via aop.xml.  However, this would be the first time we have an aop.xml setting that affects global operation of loadtime weaving.  When any classloader actually got far enough to load the aop.xmls it would discover this setting and from that point on it would be set.  In our JspClassLoader case this would mean that either some non-JspClassLoader is run early enough to discover this setting and turn it off for all JspClassLoaders or the first JspClassLoader will discover the setting and turn it off for all other JspClassLoaders.  I think we can live with that mode of operation.</column>
            <column name="report_time">2012-01-06 12:05:35</column>
            <column name="report_timestamp">1325870000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0c0adc5</column>
            <column name="commit_timestamp">1375160000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/Aj.java
loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
loadtime/src/org/aspectj/weaver/loadtime/Options.java
tests/bugs174/pr368046/Azpect.java
tests/bugs174/pr368046/Code.java
tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java</column>
            <column name="result">2:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
6:loadtime/src/org/aspectj/weaver/loadtime/Aj.java
29:loadtime/src/org/aspectj/weaver/loadtime/Options.java
36:tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">7</column>
            <column name="bug_id">413378</column>
            <column name="summary">Bug 413378  A constructor added by ITD cannot invoke the method of its super class</column>
            <column name="description">AspectJ Development Tools	2.2.0.e37x-RELEASE-20120704-0900





It seems *super.someMethod()* can not be correctly resolved in the
constructor added by ITD 

It can be compiled with no problem, but* at runtime, exception is raised.*


The class which I'll add a new constructor to:

public class Child extends Parent{

    public String mParent = &quot;John&quot;;
    
    public Child(String parent) {
        this.mParent = parent;
    }
    
    public String getParent()
    {
        return this.mParent;
    }
}

As we can see, *Child * extends *Parent*

class Parent has a method getAge()

public class Parent {
    private String mName = &quot;John&quot;;
    private int mAge = 50;
    
    public int getAge(){
        return mAge;
    }
}

If I add a new constructor for the *Child * in my aspect.

public aspect MyTest {

    public Child.new(String parent, int age) {
        this(parent);
        
        System.out.println(&quot;Get Age:&quot; + super.getAge());
        System.out.println(&quot;Child Name:&quot; + this.mParent);
    }
}

The above aspect code will trigger an exception.

Exception in thread &quot;main&quot; java.lang.NoSuchMethodError: com.test.Child.ajc$superDispatch$com_test_Child$getAge()I
	at MyTest.ajc$postInterConstructor$MyTest$com_test_Child(MyTest.aj:13)
	at com.test.Child.&lt;init&gt;(Child.java:1)
	at MainProgram.main(MainProgram.java:14)

Is this a limitation of AspectJ? Is this the only way to resolve this
issue?


I also attach the src &amp; compiled binary files</column>
            <column name="report_time">2013-07-20 02:22:28</column>
            <column name="report_timestamp">1374300000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">302c14e</column>
            <column name="commit_timestamp">1374530000</column>
            <column name="files">tests/bugs174/pr413378/Code.java
tests/src/org/aspectj/systemtest/AllTests17.java
tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java
tests/src/org/aspectj/systemtest/ajc174/AllTestsAspectJ174.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
            <column name="result">3:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java
556:tests/src/org/aspectj/systemtest/AllTests17.java</column>
        </table>
        <table name="aspectj">
            <column name="id">8</column>
            <column name="bug_id">407017</column>
            <column name="summary">Bug 407017  Stack trace being printed, but want to mute it</column>
            <column name="description">In org.aspectj.ajdt.internal.core.builder.AjState.getDelegate(ReferenceType), there is a call to printStackTrace().  On the AJDT build server, this exception is being printed and causing some noise.  Can you replace that call with a call to the IMessageHandler for the build?</column>
            <column name="report_time">2013-05-01 15:10:46</column>
            <column name="report_timestamp">1367440000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">e6cb508</column>
            <column name="commit_timestamp">1372460000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</column>
            <column name="result">3:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</column>
        </table>
        <table name="aspectj">
            <column name="id">9</column>
            <column name="bug_id">408721</column>
            <column name="summary">Bug 408721  java.util.ConcurrentModificationException when multiple threads enter the weaver</column>
            <column name="description">I am using AspectJ 1.7.1.  Occasionally I see the following exception, which I believe is related to multiple threads initializing some internal state.

java.util.ConcurrentModificationException: null
       at java.util.ArrayList$Itr.checkForComodification(Unknown Source) ~[na:1.7.0_11]
       at java.util.ArrayList$Itr.next(Unknown Source) ~[na:1.7.0_11]
       at org.aspectj.weaver.ReferenceType.findDerivativeType(ReferenceType.java:1122) ~[aspectjweaver.jar:1.7.1]
       at org.aspectj.weaver.TypeFactory.createParameterizedType(TypeFactory.java:44) ~[aspectjweaver.jar:1.7.1]
       at org.aspectj.weaver.ResolvedType.parameterize(ResolvedType.java:2479) ~[aspectjweaver.jar:1.7.1]
       at org.aspectj.weaver.ReferenceType.getDeclaredInterfaces(ReferenceType.java:673) ~[aspectjweaver.jar:1.7.1]
       at org.aspectj.weaver.ResolvedType.getDirectSupertypes(ResolvedType.java:82) ~[aspectjweaver.jar:1.7.1]
       at org.aspectj.weaver.patterns.TypePattern.matchesSubtypes(TypePattern.java:178) ~[aspectjweaver.jar:1.7.1]
       at org.aspectj.weaver.patterns.ExactTypePattern.matchesSubtypes(ExactTypePattern.java:74) ~[aspectjweaver.jar:1.7.1]
       at org.aspectj.weaver.patterns.TypePattern.matchesStatically(TypePattern.java:130) ~[aspectjweaver.jar:1.7.1]
       at org.aspectj.weaver.patterns.KindedPointcut.fastMatch(KindedPointcut.java:130) ~[aspectjweaver.jar:1.7.1]
       at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.couldMatchJoinPointsInType(PointcutExpressionImpl.java:84) ~[aspectjweaver.jar:1.7.1]
       at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:250) ~[spring-aop.jar:3.2.1.RELEASE]
       at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:208) ~[spring-aop.jar:3.2.1.RELEASE]
       at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:262) ~[spring-aop.jar:3.2.1.RELEASE]
       at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:294) ~[spring-aop.jar:3.2.1.RELEASE]
       at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:118) ~[spring-aop.jar:3.2.1.RELEASE]</column>
            <column name="report_time">2013-05-22 12:10:52</column>
            <column name="report_timestamp">1369240000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3f6e166</column>
            <column name="commit_timestamp">1372280000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</column>
            <column name="result">68:org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">10</column>
            <column name="bug_id">404600</column>
            <column name="summary">Bug 404600  Unhandled RuntimeException</column>
            <column name="description">I'm getting an unhandled RuntimeException from STS 3.2.0.RELEASE:

java.lang.RuntimeException
at org.aspectj.asm.AsmManager.sameType(AsmManager.java:897)
at org.aspectj.asm.AsmManager.removeRelationshipsTargettingThisType(AsmManager.java:711)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1033)
at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:514)
at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeavin ... ndation-domain/src\/main\/java&lt;com.scispike.foundation.domain.trait.persistence*PersistableAspect.aj%com.scispike.foundation.domain.trait.persistence)

Andy Clement, this can be reproduced in our private foundation repo's dev branch at commit d879446f2bfd83b51bf711d2931f4b28ce8c1901.

After clicking ok on the exception dialog, there is an error marker on the package statement with text:

Internal compiler error: java.lang.RuntimeException: Exception whilst walking up from target com.scispike.foundation.domain.trait.persistence kind=(package declaration) 
 hid=(=foundation-domain/src\/main\/java&lt;com.scispike.foundation.domain.trait.persistence*PersistableAspect.aj%com.scispike.foundation.domain.trait.persistence) at 
 org.aspectj.asm.AsmManager.sameType(AsmManager.java:897)

If I do a Project\Clean..., the exception is not reproduced and everything compiles ok.  Next edit repros the exception.</column>
            <column name="report_time">2013-03-29 00:48:42</column>
            <column name="report_timestamp">1364530000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ff0859d</column>
            <column name="commit_timestamp">1364930000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
            <column name="result">7:weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
        </table>
        <table name="aspectj">
            <column name="id">11</column>
            <column name="bug_id">404594</column>
            <column name="summary">Bug 404594  Assertion failed at ResolvedType.java:614</column>
            <column name="description"></column>
            <column name="report_time">2013-03-28 16:53:10</column>
            <column name="report_timestamp">1364500000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">4e34477</column>
            <column name="commit_timestamp">1364860000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</column>
            <column name="result">1:org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">12</column>
            <column name="bug_id">318878</column>
            <column name="summary">Bug 318878  Pertarget aspect instantiation is not thread-safe</column>
            <column name="description">The way in which pertarget aspects compiled with ajc check if a given target already has an aspect is not thread safe. When two different threads trigger an advice on a target object for the first time at the same time, sometimes the aspect for that target gets created twice.

The following code demonstrates the problem:

The following pertarget aspect will add itself to a (synchronized) set in another class in it's constructor.

aspect Pertarget pertarget(execution(void foo())) {
        public Pertarget() {
                Main.aspects.add(this); // Add this instance to the set in Main
        }
        before(): execution(void foo()) {} // Empty advice to trigger creation
}

This class creates 10000 target objects and has two separate threads call a method (that causes the aspect to be instantiated) on each object. The aspects add themselves to the &quot;aspects&quot; set and this set's size is printed when all threads have finished.

import java.util.Collections;
import java.util.IdentityHashMap;
import java.util.Set;

public class Main {
    public static Set aspects = Collections.synchronizedSet(
        Collections.newSetFromMap(new IdentityHashMap()));
    public static void main(String[] args) throws InterruptedException {
        for (int i = 0; i &lt; 10000; ++i) {
            final Main m = new Main(); // Create a new target for the aspect
            Runnable r = new Runnable() {
                public void run() { m.foo(); } // This will trigger the advice
            };
            Thread t1 = new Thread(r);
            Thread t2 = new Thread(r);
            t1.start();
            t2.start();
            t1.join();
            t2.join();
        }
        System.out.println(aspects.size()); // Should be 10000
    }
    private void foo() {}
}

When compiled with ajc and run, the main method prints values over 10000 (something like 10030-10060 typically), which means that some target objects get multiple aspect instances.

In my own application I sometimes also saw some threads accessing partially built aspect instances. This was quite rare however and I wasn't able to make a test case for it.

The ajc version (the current stable) used was:
AspectJ Compiler 1.6.8 (1.6.8 - Built: Friday Jan 8, 2010 at 21:53:37 GMT) - Eclipse Compiler 0.785_R33x, 3.3

The sun vm version was:
Java(TM) SE Runtime Environment (build 1.6.0_20-b02)
Java HotSpot(TM) 64-Bit Server VM (build 16.3-b01, mixed mode)

I investigated the source of this problem: the ajc compiler generates the following (decompiled) method into the aspect class:

public static void ajc$perObjectBind(Object obj)
{
    if((obj instanceof ajcMightHaveAspect) &amp;&amp; ((ajcMightHaveAspect)obj).perObjectGet() == null)
        ((ajcMightHaveAspect)obj).perObjectSet(new Pertarget());
}

, which obviously is not thread safe.</column>
            <column name="report_time">2010-07-05 07:23:40</column>
            <column name="report_timestamp">1278330000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">be5a530</column>
            <column name="commit_timestamp">1361830000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/AjcMemberMaker.java</column>
            <column name="result">95:org.aspectj.matcher/src/org/aspectj/weaver/AjcMemberMaker.java</column>
        </table>
        <table name="aspectj">
            <column name="id">13</column>
            <column name="bug_id">391384</column>
            <column name="summary">Bug 391384  WildAnnotationTypePattern.java:231</column>
            <column name="description">OK, I get that this is not supported (and what I *want* here is matching on the existence of the supplied header *among* the headers in the String[]). A feature request might be in order, but a syntax for specifying how you want to match the array would be needed....

The bug that I'm reporting is that trying to *save* this program gets an error that pops up a dialog. This should just become another error marker.

It might the compiler that has to change what it throws, but in the end it's the Eclipse IDE that ends up breaking from a user standpoint.

(RequestMapping.headers() is of type String[]).

public aspect Fail {
    pointcut testable(): execution(public * @RequestMapping(headers=&quot;x-test=test&quot;) com.example..*(..));
}

java.lang.RuntimeException
at org.aspectj.weaver.patterns.WildAnnotationTypePattern.resolveAnnotationValues(WildAnnotationTypePattern.java:231)
at org.aspectj.weaver.patterns.WildAnnotationTypePattern.resolveBindings(WildAnnotationTypePattern.java:325)
at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings(WildTypePattern.java:657)
at org.aspectj.weaver.patterns.SignaturePattern.resolveBindings(SignaturePattern.java:81)
at org.a ... n(Worker.java:53)

Compile error: RuntimeException thrown: Compiler limitation: annotation value support not implemented for type java.lang.String[]</column>
            <column name="report_time">2012-10-09 00:09:54</column>
            <column name="report_timestamp">1349760000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">edb41e3</column>
            <column name="commit_timestamp">1360090000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/WeaverMessages.java
org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java
tests/bugs172/pr391384/Code.java
tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java</column>
            <column name="result">1:org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java
11:tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java
1463:org.aspectj.matcher/src/org/aspectj/weaver/WeaverMessages.java</column>
        </table>
        <table name="aspectj">
            <column name="id">14</column>
            <column name="bug_id">394535</column>
            <column name="summary">Bug 394535  Java throws OutOfMemory in call to Class.getGenericSuperclass() on woven class</column>
            <column name="description"></column>
            <column name="report_time">2012-11-18 10:54:17</column>
            <column name="report_timestamp">1353250000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">46f9079</column>
            <column name="commit_timestamp">1360090000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java
tests/bugs172/pr394535/Bug.java
tests/bugs172/pr394535/Bug2.java
tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java</column>
            <column name="result">29:org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java
31:tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">15</column>
            <column name="bug_id">399590</column>
            <column name="summary">Bug 399590  Bad generics signature generated</column>
            <column name="description"></column>
            <column name="report_time">2013-01-31 04:17:35</column>
            <column name="report_timestamp">1359620000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">4af4b1e</column>
            <column name="commit_timestamp">1360010000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/BoundedReferenceType.java
tests/bugs172/pr399590/Cage.java
tests/bugs172/pr399590/Cage2.java
tests/bugs172/pr399590/five/Cage.java
tests/bugs172/pr399590/five/Cage2.java
tests/bugs172/pr399590/four/Cage.java
tests/bugs172/pr399590/four/Cage2.java
tests/bugs172/pr399590/three/Cage.java
tests/bugs172/pr399590/three/Cage2.java
tests/bugs172/pr399590/two/Cage.java
tests/bugs172/pr399590/two/Cage2.java
tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java</column>
            <column name="result">148:tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java
198:org.aspectj.matcher/src/org/aspectj/weaver/BoundedReferenceType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">16</column>
            <column name="bug_id">399408</column>
            <column name="summary">Bug 399408  NPE in ExactAnnotationTypePattern.matches</column>
            <column name="description">[ERROR] java.lang.NullPointerException
[ERROR] at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:137)
[ERROR] at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:96)
[ERROR] at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly(AnyWithAnnotationTypePattern.java:55)
[ERROR] at org.aspectj.weaver.patterns.TypePattern.matchesStatically(TypePattern.java:132)
[ERROR] at org.aspectj.weaver.patterns.DeclareParents.match(DeclareParents.java:63)
[ERROR] at org.aspectj.weaver.patterns.DeclareParents.findMatchingNewParents(DeclareParents.java:358)
[ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareParents(AjLookupEnvironment.java:885)
[ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:766)
[ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes(AjLookupEnvironment.java:424)
[ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes(AjLookupEnvironment.java:410)
[ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:261)</column>
            <column name="report_time">2013-01-29 12:01:47</column>
            <column name="report_timestamp">1359480000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d524403</column>
            <column name="commit_timestamp">1359480000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</column>
            <column name="result">31:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">17</column>
            <column name="bug_id">398588</column>
            <column name="summary">Bug 398588  Using aspect 'requires' clause causes all aspects with 'requires' clauses not be loaded regardless</column>
            <column name="description">The usage of the 'requires' clause causes all aspects that have have 'requires' clauses not to be loaded regardless of whether the specified required class exists or not. Here is the scenario and why it happens:

   Let's assume we have a bunch of aspects (A1, A2, A3, etc.) - all with 'requires' clauses and all referencing classes that can be satisfied. ClassLoaderWeavingAdaptor#registerAspects goes over the aspects in a Definition one by one. It reaches aspect A1 and detects that it has a 'requires' clause, and so it invokes BcelWorld#addAspectRequires. This causes the aspect A1 and its required class to be registered in an internal 'aspectRequiredTypes' map.

   Then the code calls BcelWeaver#addLibraryAspect with A1 as the argument, which in turn calls addOrReplaceAspect which invokes 'hasUnsatisfiedDependency'. The 'hasUnsatisfiedDependency' has been written to run only ONCE - i.e., it checks if it has already run, and if so then it does nothing. Otherwise, it removes from the 'aspectRequiredTypes' map all the types that can be resolved, thus leaving only those that cannot be resolved. In other words, it assumes that after having run (once !!!) any remaining type must be unsatified. Thus, when it is invoked with A1, being the 1st time, it resolves the required type by A1 and leaves the 'aspectRequiredTypes' map empty - but also marks that no further running is required.

   When the ClassLoaderWeavingAdaptor#registerAspects loop reaches A2, it call BcelWorld#addAspectRequires since A2 also declares a 'requires' clause. This causes A2 and its referenced class to be mapped in the 'aspectRequiredTypes' map. However, when BcelWeaver#addLibraryAspect is called with A2 and the code reaches 'hasUnsatisfiedDependency' - the code assumes that it has already run (which it has - with A1), so it does not check if indeed A2's referenced class can be satisfied (which we assume it can). In other words, all subsequent aspects (A2, A3, etc.) are declared as having unsatisified dependencies - which they don't.

   The (quick) bugfix seems rather simple: every time BcelWorld#addAspectRequires method is called, it should mark 'aspectRequiredTypesProcessed' as FALSE, in order to force a re-evaluation in case 'hasUnsatisfiedDependency' is called.</column>
            <column name="report_time">2013-01-20 01:42:35</column>
            <column name="report_timestamp">1358660000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">96ebaae</column>
            <column name="commit_timestamp">1358790000</column>
            <column name="files">tests/bugs172/pr398588/Anno.java
tests/bugs172/pr398588/Anno2.java
tests/bugs172/pr398588/AspectA.java
tests/bugs172/pr398588/AspectB.java
tests/bugs172/pr398588/AspectC.java
tests/bugs172/pr398588/AspectD.java
tests/bugs172/pr398588/Blah.java
tests/bugs172/pr398588/Code.java
tests/bugs172/pr398588/Code2.java
tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</column>
            <column name="result">2:weaver/src/org/aspectj/weaver/bcel/BcelWorld.java
140:tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">18</column>
            <column name="bug_id">395221</column>
            <column name="summary">Bug 395221  weird error about unbound formals when mixing generics with annotation style</column>
            <column name="description">From the mailing list:

I have following problem with following Aspect:

@Aspect
public class CounterAspect extends AbstractMoskitoAspect {

	@Around(value = &quot;execution(* *(..)) &amp;&amp; (@annotation(method))&quot;)
    public Object countMethod(ProceedingJoinPoint pjp, Count method) throws Throwable {
    	return count(pjp, method.producerId(), method.subsystem(), method.category());
    }

	@Around(value = &quot;execution(* *(..)) &amp;&amp; (@annotation(method))&quot;)
	public Object countByParameter(ProceedingJoinPoint pjp, CountByParameter method) throws Throwable {
		return countByParameter(pjp, method.producerId(), method.subsystem(), method.category());
	}

	@Around(value = &quot;execution(* *.*(..)) &amp;&amp; (@within(clazz))&quot;)
    public Object countClass(ProceedingJoinPoint pjp, Count clazz) throws Throwable {
    	return count(pjp, clazz.producerId(), clazz.subsystem(), clazz.category());
    }

	private Object countByParameter(ProceedingJoinPoint pjp, String aProducerId, String aSubsystem, String aCategory) throws Throwable {
....

It works. However, since I have two similar aspects that differ only in using some internal classes, I made my super class using generics:
public class AbstractMoskitoAspect&lt;S extends IStats&gt; {

@Aspect
public class CounterAspect extends AbstractMoskitoAspect&lt;CounterStats&gt; {

this breaks the build instantly with the very unhelpful error message:
[ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.4:compile (default) on project moskito-aop: Compiler errors:
[ERROR] error at @Around(value = &quot;execution(* *(..)) &amp;&amp; (@annotation(method))&quot;)
[ERROR] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ERROR] /Users/another/projects/moskito/moskito-aop/java/net/anotheria/moskito/aop/aspect/CounterAspect.java:24:0::0 the parameter pjp is not bound in [all branches of] pointcut
[ERROR] error at @Around(value = &quot;execution(* *(..)) &amp;&amp; (@annotation(method))&quot;)
[ERROR] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ERROR] /Users/another/projects/moskito/moskito-aop/java/net/anotheria/moskito/aop/aspect/CounterAspect.java:29:0::0 the parameter pjp is not bound in [all branches of] pointcut
[ERROR] error at @Around(value = &quot;execution(* *.*(..)) &amp;&amp; (@within(clazz))&quot;)
[ERROR] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ERROR] /Users/another/projects/moskito/moskito-aop/java/net/anotheria/moskito/aop/aspect/CounterAspect.java:34:0::0 the parameter pjp is not bound in [all branches of] pointcut

what am i doing wrong here?</column>
            <column name="report_time">2012-11-27 17:34:23</column>
            <column name="report_timestamp">1354060000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3e5af0f</column>
            <column name="commit_timestamp">1354060000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/patterns/AndPointcut.java</column>
            <column name="result">1710:org.aspectj.matcher/src/org/aspectj/weaver/patterns/AndPointcut.java</column>
        </table>
        <table name="aspectj">
            <column name="id">19</column>
            <column name="bug_id">394234</column>
            <column name="summary">Bug 394234  Invalid StackMapTable generated in Java 7</column>
            <column name="description">When compiling for Java 7, AspectJ can compute an invalid StackMapTable. The verifier will throw a ClassNotFoundException when the generated class is loaded.

Example:
class Parent&lt;T&gt; {}
class ChildA&lt;T&gt; extends Parent&lt;T&gt; {}
class ChildB&lt;T&gt; extends Parent&lt;T&gt; {}

public Object methodWithBadStackMapTable(boolean value) {
	return value ? new ChildA&lt;String&gt;() : new ChildB&lt;String&gt;();
}

javap shows the computed StackMapTable to be:
StackMapTable: number_of_entries = 2
   frame_type = 15 /* same */
   frame_type = 71 /* same_locals_1_stack_item */
  stack = [ class &quot;Parent&lt;T&gt;&quot; ]

when it should be:
StackMapTable: number_of_entries = 2
   frame_type = 15 /* same */
   frame_type = 71 /* same_locals_1_stack_item */
  stack = [ class Parent ]</column>
            <column name="report_time">2012-11-13 18:48:24</column>
            <column name="report_timestamp">1352850000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">fc55431</column>
            <column name="commit_timestamp">1352940000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java</column>
            <column name="result">91:weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java</column>
        </table>
        <table name="aspectj">
            <column name="id">20</column>
            <column name="bug_id">391123</column>
            <column name="summary">Bug 391123  Added support for more cache backing(s)</column>
            <column name="description"></column>
            <column name="report_time">2012-10-04 10:14:52</column>
            <column name="report_timestamp">1349360000</column>
            <column name="status">closed fixed</column>
            <column name="commit">df1823b</column>
            <column name="commit_timestamp">1351540000</column>
            <column name="files">build/src/org/aspectj/internal/tools/ant/taskdefs/Checklics.java
util/src/org/aspectj/util/LangUtil.java
weaver/src/org/aspectj/weaver/tools/cache/AbstractIndexedFileCacheBacking.java
weaver/src/org/aspectj/weaver/tools/cache/AsynchronousFileCacheBacking.java
weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java
weaver/src/org/aspectj/weaver/tools/cache/FlatFileCacheBacking.java
weaver/src/org/aspectj/weaver/tools/cache/ZippedFileCacheBacking.java
weaver/testsrc/org/aspectj/weaver/tools/cache/AbstractCacheBackingTestSupport.java
weaver/testsrc/org/aspectj/weaver/tools/cache/AsynchronousFileCacheBackingTestSupport.java
weaver/testsrc/org/aspectj/weaver/tools/cache/CacheTests.java
weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultCacheKeyResolverTest.java
weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultFileCacheBackingTest.java
weaver/testsrc/org/aspectj/weaver/tools/cache/FlatFileCacheBackingTest.java
weaver/testsrc/org/aspectj/weaver/tools/cache/SimpleClassCacheTest.java
weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java
weaver/testsrc/org/aspectj/weaver/tools/cache/ZippedFileCacheBackingTest.java</column>
            <column name="result">2:weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultFileCacheBackingTest.java
4:weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java
7:weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java
16:weaver/src/org/aspectj/weaver/tools/cache/AbstractIndexedFileCacheBacking.java
25:weaver/testsrc/org/aspectj/weaver/tools/cache/SimpleClassCacheTest.java
30:weaver/testsrc/org/aspectj/weaver/tools/cache/CacheTests.java
35:util/src/org/aspectj/util/LangUtil.java
126:weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultCacheKeyResolverTest.java</column>
        </table>
        <table name="aspectj">
            <column name="id">21</column>
            <column name="bug_id">389967</column>
            <column name="summary">Bug 389967  Weaved aspects mechanism does not take into account modified classes</column>
            <column name="description">The current caching mechanism assumes that if the same class is encountered then its cached weaved version can be used. However, the mechanism uses only the (fully qualified) class name to identify the class and does not take into account the fact that the class bytes may have changed (e.g., the user re-compiled and re-deployed some changes to the same class).</column>
            <column name="report_time">2012-09-20 02:38:31</column>
            <column name="report_timestamp">1348120000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9a3cc2b</column>
            <column name="commit_timestamp">1349120000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java
org.aspectj.matcher/src/org/aspectj/weaver/tools/GeneratedClassHandler.java
util/src/org/aspectj/util/LangUtil.java
weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java
weaver/src/org/aspectj/weaver/tools/cache/CacheBacking.java
weaver/src/org/aspectj/weaver/tools/cache/CacheStatistics.java
weaver/src/org/aspectj/weaver/tools/cache/CachedClassEntry.java
weaver/src/org/aspectj/weaver/tools/cache/CachedClassReference.java
weaver/src/org/aspectj/weaver/tools/cache/DefaultCacheFactory.java
weaver/src/org/aspectj/weaver/tools/cache/DefaultCacheKeyResolver.java
weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java
weaver/src/org/aspectj/weaver/tools/cache/GeneratedCachedClassHandler.java
weaver/src/org/aspectj/weaver/tools/cache/WeavedClassCache.java
weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultFileCacheBackingTest.java
weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java
3:weaver/src/org/aspectj/weaver/tools/cache/WeavedClassCache.java
6:weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java
8:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
9:weaver/src/org/aspectj/weaver/tools/cache/GeneratedCachedClassHandler.java
21:loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java
86:weaver/src/org/aspectj/weaver/tools/cache/CachedClassEntry.java
87:weaver/src/org/aspectj/weaver/tools/cache/DefaultCacheKeyResolver.java
96:weaver/src/org/aspectj/weaver/tools/cache/CacheStatistics.java
111:weaver/src/org/aspectj/weaver/tools/cache/CacheBacking.java
132:org.aspectj.matcher/src/org/aspectj/weaver/tools/GeneratedClassHandler.java
135:weaver/src/org/aspectj/weaver/tools/cache/CachedClassReference.java
140:weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultFileCacheBackingTest.java
157:weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java
255:weaver/src/org/aspectj/weaver/tools/cache/DefaultCacheFactory.java
349:util/src/org/aspectj/util/LangUtil.java</column>
        </table>
        <table name="aspectj">
            <column name="id">22</column>
            <column name="bug_id">389456</column>
            <column name="summary">Bug 389456  NPE in EclipseTypeMunger.mungeNewMethod()</column>
            <column name="description"></column>
            <column name="report_time">2012-09-12 19:05:05</column>
            <column name="report_timestamp">1347490000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b8ebdc3</column>
            <column name="commit_timestamp">1348170000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseTypeMunger.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseTypeMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">23</column>
            <column name="bug_id">389752</column>
            <column name="summary">Bug 389752  declare parents &amp; @type not matching on annotation properties of enum types</column>
            <column name="description">NOTE:  real project private git repo demonstrating bug has been shared with Andy Clement privately.  I'm reporting bug as Andy requested with as much info as I feel I can.

I have a case where 'declare parents' and 'declare @type' instructions are not being applied because their type patterns, which use annotations whose properties are of enumerated types, are not matching.

Below find the relevant artifacts and their shapes.  The lines in the aspect PersistableJpaAspect that are not matching as they should are the 'declare parents' and 'declare @type'.  If I change the annotation properties to be of type String and change the type patterns to use string literals (see &quot;matches&quot; comments in annotation:  StoreType.JPA =&gt; &quot;JPA&quot; and IdType.LONG =&gt; &quot;LONG&quot;), the matching works properly.

enums:
======

public enum StoreType {
	MONGO, JDO, JPA;
}

=====

public enum IdType {
	LONG, STRING;
}

annotation:
===========

public @interface Persistable {

	StoreType in() default StoreType.MONGO; // doesn't match
	// matches: String in() default &quot;MONGO&quot;;

	IdType id() default IdType.STRING; // doesn't match
	// matches: String id() default &quot;STRING&quot;;
}

aspect:
=======

public abstract privileged aspect PersistableAspect {

	public interface I extends ....trait.interfaces.persistence.Persistable {
		long version();
		void version(long version);
	}

	public interface L extends I {
		Long idLong();
		void idLong(Long id);
	}

	public interface S extends I {
		String idString();
		void idString(String id);
	}
	
	declare @type : I+ : @Configurable;

	// ...
}

=====

public privileged aspect PersistableJpaAspect extends PersistableAspect {

	public interface JL extends L {
	}

	public interface JS extends S {
	}

	declare parents :
        (@Persistable(id = IdType.LONG, in = StoreType.JPA) *)
        implements JL;

	declare parents :
        (@Persistable(id = IdType.STRING, in = StoreType.JPA) *)
        implements JS;

	declare @type : @Persistable(in=&quot;JPA&quot;) JL+ : @Entity;
	declare @type : @Persistable(in=&quot;JPA&quot;) JS+ : @Entity;

	// ...
}</column>
            <column name="report_time">2012-09-17 14:47:17</column>
            <column name="report_timestamp">1347910000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0d69bd3</column>
            <column name="commit_timestamp">1348100000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/EnumAnnotationValue.java
org.aspectj.matcher/src/org/aspectj/weaver/StandardAnnotation.java
org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java
tests/bugs172/pr389752/Code.java
tests/bugs172/pr389752/Code2.java
tests/bugs172/pr389752/Code3.java
tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java</column>
            <column name="result">56:tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java
183:org.aspectj.matcher/src/org/aspectj/weaver/EnumAnnotationValue.java
282:org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java
1409:org.aspectj.matcher/src/org/aspectj/weaver/StandardAnnotation.java</column>
        </table>
        <table name="aspectj">
            <column name="id">24</column>
            <column name="bug_id">389750</column>
            <column name="summary">Bug 389750  Inconsistent classfile encountered: The undefined type parameter xxx is referenced from within yyy</column>
            <column name="description">With the declare parents pattern below, I'm getting this **runtime** error (compiler completes ok):

Inconsistent classfile encountered: The undefined type parameter ID is referenced from within PersistableAspect

If I remove the generics part of the interface declaration, the error goes away.  Here's the pattern:

interface:
==========
package example.trait;

// imports...

public interface Persistable&lt;ID extends Serializable&gt; {

	Object getOid();

	ID getId();

	String getIdString();

	long getVersion();
}

annotation:
===========
package example.anno;

// imports...

@Target(TYPE)
@Retention(RUNTIME)
@Trait
public @interface Persistable {

	String in() default &quot;MONGO&quot;;

	StoreType inAsEnum() default StoreType.MONGO;

	String id() default &quot;STRING&quot;;

	IdType idAsEnum() default IdType.STRING;
}


aspect:
=======
package example.aspect;

// imports...

public privileged aspect PersistableAspect {

	public interface I&lt;ID extends Serializable&gt; extends example.trait.Persistable&lt;ID&gt; {
	}

	public interface L extends I&lt;Long&gt; {
	}

	public interface S extends I&lt;String&gt; {
	}

	declare parents :
        (@Persistable(id=&quot;LONG&quot;) *)
        implements L;

	declare parents :
        (@Persistable(id=&quot;STRING&quot;) *)
        implements S;

	// remaining code is ITDs introducing vars &amp; methods...
}</column>
            <column name="report_time">2012-09-17 14:25:23</column>
            <column name="report_timestamp">1347910000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b9c7a19</column>
            <column name="commit_timestamp">1348080000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AstUtil.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java
tests/bugs172/pr389750/Clazz.java
tests/bugs172/pr389750/Clazz2.java
tests/bugs172/pr389750/Clazz3.java
tests/bugs172/pr389750/Clazz4.java
tests/src/org/aspectj/systemtest/AllTests17.java
tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java
tests/src/org/aspectj/systemtest/ajc172/AllTestsAspectJ172.java</column>
            <column name="result">71:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java
102:tests/src/org/aspectj/systemtest/AllTests17.java
334:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AstUtil.java</column>
        </table>
        <table name="aspectj">
            <column name="id">25</column>
            <column name="bug_id">388971</column>
            <column name="summary">Bug 388971  Double Synthetic attributes on some around advice members</column>
            <column name="description">Some of the support members in aspects were getting Synthetic attributes added twice (once when compiled, once when used as an aspect library).  Some JVMs appear to flag this as a verify error.  The fix is simply to check before adding to make sure the attribute isn't added twice.</column>
            <column name="report_time">2012-09-06 12:34:52</column>
            <column name="report_timestamp">1346950000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">c2ff74f</column>
            <column name="commit_timestamp">1346950000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</column>
            <column name="result">6:weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</column>
        </table>
        <table name="aspectj">
            <column name="id">26</column>
            <column name="bug_id">384401</column>
            <column name="summary">Bug 384401  NPE when no pointcut in afterthrowing annotation style advice</column>
            <column name="description">From the mailing list:

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;

@Aspect
public class X {
//	@AfterThrowing(pointcut=&quot;execution(* *(..))&quot;,throwing = &quot;e&quot;)
	@AfterThrowing(throwing = &quot;e&quot;)
    public void bizLoggerWithException(JoinPoint thisJoinPoint,Throwable e) {
  //  .....// do some stuff
    }

}

class BizLoggable {}</column>
            <column name="report_time">2012-07-05 14:04:53</column>
            <column name="report_timestamp">1341510000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">55ebaa1</column>
            <column name="commit_timestamp">1345750000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java
tests/bugs171/pr384401/X.java
tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java</column>
            <column name="result">16:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java
159:tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">27</column>
            <column name="bug_id">387444</column>
            <column name="summary">Bug 387444  Softening exception in try-with-resources</column>
            <column name="description"></column>
            <column name="report_time">2012-08-16 20:46:55</column>
            <column name="report_timestamp">1345160000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">76d695f</column>
            <column name="commit_timestamp">1345750000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java
tests/bugs171/pr387444/Code.java
tests/bugs171/pr387444/Code2.java
tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java
tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests_need17jre.java</column>
            <column name="result">8:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java
88:tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">28</column>
            <column name="bug_id">387718</column>
            <column name="summary">Bug 387718  RuntimeException when trying to compile broken code</column>
            <column name="description">java.lang.RuntimeException
at org.aspectj.weaver.NameMangler.makeVisibilityName(NameMangler.java:297)
at org.aspectj.weaver.NameMangler.interMethod(NameMangler.java:242)
at org.aspectj.weaver.AjcMemberMaker.interMethod(AjcMemberMaker.java:538)
at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.methodMustOverride(AjProblemReporter.java:385)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(M ... dJob.java:241)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

Compile error: RuntimeException thrown: protected inter-types not allowed</column>
            <column name="report_time">2012-08-21 13:30:11</column>
            <column name="report_timestamp">1345570000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">cbb6f5a</column>
            <column name="commit_timestamp">1345670000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</column>
            <column name="result">3:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</column>
        </table>
        <table name="aspectj">
            <column name="id">29</column>
            <column name="bug_id">386049</column>
            <column name="summary">Bug 386049  Error &quot;must implement abstract inter-type declaration&quot; even though build is fine</column>
            <column name="description"></column>
            <column name="report_time">2012-07-26 10:15:19</column>
            <column name="report_timestamp">1343310000</column>
            <column name="status">verified fixed</column>
            <column name="commit">7c6e936</column>
            <column name="commit_timestamp">1345660000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java
tests/bugs171/pr386049/de/scrum_master/galileo/filter/BasicFilter.java
tests/bugs171/pr386049/de/scrum_master/galileo/filter/JsoupFilter.java
tests/bugs171/pr387568/Code.java
tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
            <column name="result">8:org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java
12:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java
102:tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">30</column>
            <column name="bug_id">384398</column>
            <column name="summary">Bug 384398  Type Mismatch error when using inner classes contained in generic types within ITDs</column>
            <column name="description">Please see attached example project. 

I get the following (strange) compiler error:

Type mismatch: cannot convert from A&lt;T&gt;.InnerA&lt;&gt; to A.InnerA	

BAspect.aj   /AspectJInnerclassInGenericTypeBug/src/de/example	line 12</column>
            <column name="report_time">2012-07-05 13:42:53</column>
            <column name="report_timestamp">1341510000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">bf949d3</column>
            <column name="commit_timestamp">1341940000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
tests/bugs171/pr384398/A.java
tests/bugs171/pr384398/B.java
tests/bugs171/pr384398_2/A.java
tests/bugs171/pr384398_2/B.java
tests/src/org/aspectj/systemtest/AllTests17.java
tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java
tests/src/org/aspectj/systemtest/ajc171/AllTestsAspectJ171.java</column>
            <column name="result">4:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
2354:tests/src/org/aspectj/systemtest/AllTests17.java</column>
        </table>
        <table name="aspectj">
            <column name="id">31</column>
            <column name="bug_id">384189</column>
            <column name="summary">Bug 384189  make ajcore file creation optional</column>
            <column name="description">Although cores are useful, there may be situations where you are working around whatever they are reporting and are perhaps unable to pick up a later version of AJ that includes the fix.  In these situations it might be helpful to make the creation of cores optional, through a sys prop.</column>
            <column name="report_time">2012-07-03 14:06:05</column>
            <column name="report_timestamp">1341340000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5d0e186</column>
            <column name="commit_timestamp">1341350000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/Dump.java</column>
            <column name="result">75:org.aspectj.matcher/src/org/aspectj/weaver/Dump.java</column>
        </table>
        <table name="aspectj">
            <column name="id">32</column>
            <column name="bug_id">382189</column>
            <column name="summary">Bug 382189  NPE in BcelTypeMunger.createBridgeMethod</column>
            <column name="description">Build Identifier: 

Since I updated to version     

AspectJ Development Tools	2.2.0.e37x-20120529-0900

I get during compile:

java.lang.NullPointerException
at org.aspectj.weaver.bcel.BcelTypeMunger.createBridgeMethod(BcelTypeMunger.java:1325)
at org.aspectj.weaver.bcel.BcelTypeMunger.createAnyBridgeMethodsForCovariance(BcelTypeMunger.java:1272)
at org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewMethod(BcelTypeMunger.java:971)
at org.aspectj.weaver.bcel.BcelTypeMunger.munge(BcelTypeMunger.java:108)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeave ... )

Before, I had     AspectJ Development Tools	2.2.0.e37x-20120507-1400 and the same project compiled without that exception.


Reproducible: Always</column>
            <column name="report_time">2012-06-10 10:48:00</column>
            <column name="report_timestamp">1339340000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a748303</column>
            <column name="commit_timestamp">1339810000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java
tests/bugs170/pr382189/covbug/A.java
tests/bugs170/pr382189/covbug/B.java
tests/bugs170/pr382189/covbug/SuperA.java
tests/bugs170/pr382189/covbug/SuperB.java
tests/bugs170/pr382189/covbug/cc/covbug/A.java
tests/bugs170/pr382189/covbug/cc/covbug/B.java
tests/bugs170/pr382189/covbug/cc/covbug/SuperA.java
tests/bugs170/pr382189/covbug/cc/covbug/SuperB.java
tests/bugs170/pr382189/covbug/pj/Foo.java
tests/bugs170/pr382189/one/A.java
tests/bugs170/pr382189/one/B.java
tests/bugs170/pr382189/one/SuperA.java
tests/bugs170/pr382189/one/SuperB.java
tests/bugs170/pr382189/three/A.java
tests/bugs170/pr382189/three/B.java
tests/bugs170/pr382189/three/SuperA.java
tests/bugs170/pr382189/three/SuperB.java
tests/bugs170/pr382189/two/A.java
tests/bugs170/pr382189/two/B.java
tests/bugs170/pr382189/two/SuperA.java
tests/bugs170/pr382189/two/SuperB.java
tests/bugs170/pr382435/one/bug/A.java
tests/bugs170/pr382435/two/bug/A.java
tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java
13:tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java
77:org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">33</column>
            <column name="bug_id">382723</column>
            <column name="summary">Bug 382723  An package-level abstract generic privileged aspect, which extends an abstract generic aspect, gives a IlligalStateException on a method call in around advice</column>
            <column name="description">Build Identifier: AJDT Version: 2.1.3.e37x-20110628-1900 / AspectJ version: 1.6.12.20110613132200 / eclipse.buildId=M20120208-0800

around advice targetting a generic constructor call in a package visability  generic privileged abstract apsect, which extends a abstract generic aspect gives a compiler error when in this around advice a method call is made to a method defined in the aspect, superaspect or abstract defined methods. This only affects around advice and only when the aspect is package-visible and privileged.

Workaround: either make the aspect public or remove privileged.

Compiler output:
Compile error: IllegalStateException thrown: Use generic type, not parameterized type
StackTrace:

java.lang.IllegalStateException: Use generic type, not parameterized type
	at org.aspectj.weaver.ResolvedTypeMunger.&lt;init&gt;(ResolvedTypeMunger.java:72)
	at org.aspectj.weaver.PrivilegedAccessMunger.&lt;init&gt;(PrivilegedAccessMunger.java:31)
	at org.aspectj.weaver.CrosscuttingMembers.addPrivilegedAccesses(CrosscuttingMembers.java:232)
	at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers(ResolvedType.java:756)
	at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:89)
	at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:69)
	at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java:512)
	at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.ensureWeaverInitialized(AjPipeliningCompilerAdapter.java:529)
	at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:509)
	at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:447)
	at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:432)
	at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:98)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:652)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:392)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1021)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:305)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:185)
	at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild(AjdeCoreBuildManager.java:127)
	at org.aspectj.ajde.core.AjCompiler.build(AjCompiler.java:91)
	at org.eclipse.ajdt.core.builder.AJBuilder.build(AJBuilder.java:257)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:199)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:239)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:292)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:295)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:351)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:374)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:143)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:241)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)
Session data:
eclipse.buildId=M20120208-0800
java.version=1.6.0_22
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=nl_NL
Command-line arguments:  -data C:\workspace\ -os win32 -ws win32 -arch x86_64


Reproducible: Always

Steps to Reproduce:
1. In a empty AspectJ project create the file Foo.java:
import java.util.LinkedList;
public class Foo {
	public LinkedList bar()
	{
		new LinkedList();
		return null;
	}
}
2. Create the file FooAspect.aj containing:
import java.util.AbstractList;
import java.util.List;
abstract aspect FooAspectParent&lt;T extends List&gt;
{
	protected int getNumber(int k)
	{
		return -1*k;
	}
}



abstract privileged aspect FooAspect&lt;T extends AbstractList&gt; extends FooAspectParent&lt;T&gt; {
    pointcut pc():  call(T.new());
	T around():pc()
	{
		//getNumber(1); //&lt;-- method call to superAspect fails   
		//method();  // &lt;-- method call to abstract local defined method fails
		//localMethod(); //&lt;-- method call to local private method fails
		Math.random(); //&lt;-- works
		hashCode(); //&lt;-- works
		return null;
	}	
	private void localMethod(){}
	
	protected abstract T method();
}
3. Uncomment one or more of the three commentted functions calls in the around advice and the compiler will reproduce the error.
(note: this example with List which is a generic object is just for illustration of hierachy, this problem occured on production code when doing the same with non-generic, but hierachal objects. This way was the easiest to issolate and reproduce the bug the fastest.)</column>
            <column name="report_time">2012-06-15 06:31:34</column>
            <column name="report_timestamp">1339760000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ba9d43c</column>
            <column name="commit_timestamp">1339780000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java
tests/bugs170/pr382723/Foo.java
tests/bugs170/pr382723/FooAspect.java
tests/bugs170/pr382723/FooAspect2.java
tests/bugs170/pr382723/FooAspect3.java
tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</column>
            <column name="result">25:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java
53:tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">34</column>
            <column name="bug_id">376990</column>
            <column name="summary">Bug 376990  iajc does not support source compliance level 1.7</column>
            <column name="description">Build Identifier: Version: 3.7.2 Build id: M20120208-0800

I am using AspectJ 1.7.0.M1. I changed the examples build.xml to use a source compliance level of 1.7 and verbose=true as follows:

&lt;iajc destdir=&quot;${classes.dir}&quot; verbose=&quot;true&quot; source=&quot;1.7&quot; argfiles=&quot;${list}&quot;

When I run this using 'ant bean' I get the following line:
[iajc] ignored: -source 1.7 at E:\aspectj1.7\doc\examples\build.xml:136:

I have tried running the compiler 'ajc' directly specifying -source 1.7 and that works.

I am trying to use this on a large development project that uses AspectJ and has been migrated over to Java 7. The project uses ant to do builds so it is critical that iajc support 1.7. The project can't be built if any Java 7 features are used in the source files which defeats the whole purpose of moving to Java 7.

Reproducible: Always

Steps to Reproduce:
1.Change the examples build.xml to use a source compliance level of 1.7 and verbose=true as follows:

&lt;iajc destdir=&quot;${classes.dir}&quot; verbose=&quot;true&quot; source=&quot;1.7&quot; argfiles=&quot;${list}&quot;


2.Run using 'ant bean' I get the following line:
[iajc] ignored: -source 1.7 at E:\aspectj1.7\doc\examples\build.xml:136:</column>
            <column name="report_time">2012-04-17 11:35:31</column>
            <column name="report_timestamp">1334680000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">89c178f</column>
            <column name="commit_timestamp">1334680000</column>
            <column name="files">taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</column>
            <column name="result">4:taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</column>
        </table>
        <table name="aspectj">
            <column name="id">35</column>
            <column name="bug_id">376351</column>
            <column name="summary">Bug 376351  attribute problems with Java 7 compilation</column>
            <column name="description">From the mailing list, this goes wrong:

***R.java***
public class R{ 
  public static void main(String[] args) {System.out.println(new R().getClass().getName());}
}

***R1.java***
public class R1 extends R {}

***RAj.aj***
public aspect RAj
{
    private ThreadLocal&lt;Object&gt; inAspect = new ThreadLocal&lt;Object&gt;();
    
    pointcut createR() : execution(R.new());
    Object around() : createR()
    {
        System.out.println(&quot;aspect:&quot; + inAspect.get() + &quot;:&quot; + this);
        if (inAspect.get() != null)
        {
            return proceed();
        }
        else
        {
            inAspect.set(this);
            return new R1();
        }
    }
}


compile command:
/cygdrive/c/Program\ Files/Java/aspectj-1.6.12/bin/ajc.bat -source 1.7 -outxml -outjar araj.jar -classpath &quot;aspectjrt.jar;.&quot; RAj.aj 

run:

/cygdrive/c/Program\ Files/Java/aspectj-1.6.12/bin/aj5.bat  -classpath &quot;.;./araj.jar&quot; R

errors:
Apr 06, 2012 1:37:40 PM org.aspectj.weaver.tools.Jdk14Trace error
SEVERE: register definition failed
java.lang.RuntimeException: Problem processing attributes in RAj
    at org.aspectj.weaver.bcel.BcelObjectType.ensureAspectJAttributesUnpacked(BcelObjectType.java:385)</column>
            <column name="report_time">2012-04-09 15:13:54</column>
            <column name="report_timestamp">1334000000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">be063b8</column>
            <column name="commit_timestamp">1334010000</column>
            <column name="files">tests/bugs170/pr376351/R.java
tests/bugs170/pr376351/R1.java
tests/bugs170/pr376351/RAj.java
tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java
weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java</column>
            <column name="result">35:tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java
910:weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java</column>
        </table>
        <table name="aspectj">
            <column name="id">36</column>
            <column name="bug_id">376139</column>
            <column name="summary">Bug 376139  AspectJ throws Nullpointer after its IDE plugin update</column>
            <column name="description">Build Identifier: Version: Indigo Service Release 2 Build id: 20120216-1857

java.lang.NullPointerException
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SwitchStatement.analyseCode(SwitchStatement.java:118)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:104)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:730)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseC ... oBuildJob.run(AutoBuildJob.java:241)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

Compile error: NullPointerException thrown: null

Reproducible: Always

Steps to Reproduce:
1. After updating the eclipse plugin</column>
            <column name="report_time">2012-04-05 00:00:07</column>
            <column name="report_timestamp">1333600000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">62fca9a</column>
            <column name="commit_timestamp">1333660000</column>
            <column name="files">tests/bugs170/pr376139/Code.java
tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</column>
            <column name="result">16:tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">37</column>
            <column name="bug_id">374964</column>
            <column name="summary">Bug 374964  Performance - improve pointcut expensiveness calculation</column>
            <column name="description">Build Identifier: 1.6.12

I'm able to reduce the AspectJ LTW startup overhead on the app I'm working on, from 95 seconds down to 47 seconds, just by switching the &quot;expensiveness&quot; of THIS_OR_TARGET and CALL in PointcutEvaluationExpenseComparator.  It seems to make sense to me that THIS_OR_TARGET is more expensive since it requires type matching (under profiler ExactTypePattern.matchesInstanceof() is what shows up as very expensive), whereas CALL can evaluate very quickly in most cases since it just fails to match on method name.  I'm not sure if this is specific to my particular usage, but cutting 50% of the LTW startup is a very nice improvement.  If you think this change doesn't make sense for everyone, I can work on a patch that makes this configurable somehow.  Thanks.

Reproducible: Always</column>
            <column name="report_time">2012-03-21 14:02:09</column>
            <column name="report_timestamp">1332350000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f85631f</column>
            <column name="commit_timestamp">1332550000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java
tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</column>
            <column name="result">10:org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java
13:tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">38</column>
            <column name="bug_id">374745</column>
            <column name="summary">Bug 374745  Performance regression in 1.6.12</column>
            <column name="description"></column>
            <column name="report_time">2012-03-20 07:19:52</column>
            <column name="report_timestamp">1332240000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">549d227</column>
            <column name="commit_timestamp">1332550000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java
org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java
org.aspectj.matcher/src/org/aspectj/weaver/TypeFactory.java
org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java
org.aspectj.matcher/src/org/aspectj/weaver/UnresolvedType.java
org.aspectj.matcher/src/org/aspectj/weaver/UnresolvedTypeVariableReferenceType.java
org.aspectj.matcher/src/org/aspectj/weaver/World.java</column>
            <column name="result">60:org.aspectj.matcher/src/org/aspectj/weaver/TypeFactory.java
63:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
69:org.aspectj.matcher/src/org/aspectj/weaver/World.java
193:org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java
384:org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">39</column>
            <column name="bug_id">373195</column>
            <column name="summary">Bug 373195  Memory leak in CompilationAndWeavingContext leading to PermGen OOME</column>
            <column name="description">Build Identifier: 1.6.11

The static contextMap in CompilationAndWeavingContext keeps strong references to Thread instances (which in turn strongly reference their contextClassLoader which prevents all kinds of stuff from unloading).

In my particular use case I am running unit tests, each in their own WeavingURLClassLoader, but these ClassLoaders are never released, and running several unit tests at once leads to PermGen OutOfMemoryError.

Using -XX:+HeapDumpOnOutOfMemory and analyzing the resulting heap dump in Eclipse Memory Analyzer points to CompilationAndWeavingContext.contextMap.

I am able to work around this issue by executing the following at the end of each unit test to clear out this contextMap:

    CompilationAndWeavingContext.setMultiThreaded(false);
    CompilationAndWeavingContext.reset();
    CompilationAndWeavingContext.setMultiThreaded(true);

I am also able to resolve this issue (more satisfactorily) by patching CompilationAndWeavingContext and changing contextMap into a ThreadLocal.

Reproducible: Always</column>
            <column name="report_time">2012-03-04 01:25:51</column>
            <column name="report_timestamp">1330840000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6defb4e</column>
            <column name="commit_timestamp">1331050000</column>
            <column name="files">bridge/src/org/aspectj/bridge/context/CompilationAndWeavingContext.java</column>
            <column name="result">1:bridge/src/org/aspectj/bridge/context/CompilationAndWeavingContext.java</column>
        </table>
        <table name="aspectj">
            <column name="id">40</column>
            <column name="bug_id">371998</column>
            <column name="summary">Bug 371998  org.aspectj.weaver.BCException compiling @DeclareParents with value using &quot;||&quot;</column>
            <column name="description">Build Identifier: 20110916-0149

Using:

import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.DeclareParents;

@Aspect
public class AspectTest {
    
    private interface X {}
    private static class XImpl {}

    @DeclareParents(value=&quot;java.lang.Runnable || java.util.concurrent.Callable&quot;,  defaultImpl=XImpl.class)
    private X xImpl;
  
}


Throws:

org.aspectj.weaver.BCException
at org.aspectj.weaver.patterns.ExactTypePattern.resolveBindings(ExactTypePattern.java:312)
at org.aspectj.weaver.patterns.OrTypePattern.resolveBindings(OrTypePattern.java:121)
at org.aspectj.weaver.bcel.AtAjAttributes.handleDeclareParentsAnnotation(AtAjAttributes.java:746)
at org.aspectj.weaver.bcel.AtAjAttributes.readAj5ClassAttributes(AtAjAttributes.java:384)
at org.aspectj.weaver.bcel.BcelObjectType.ens ... \Program Files\Java\jre6\lib\ext\sunjce_provider.jar;C:\Users\xxx\software\eclipse-j2ee\\plugins/org.eclipse.equinox.launcher_1.2.0.v20110502.jar;

Current workaround is to use multiple DeclareParents annotations on different variables.

Reproducible: Always

Steps to Reproduce:
1. Create new class given the code in the details.
2. Save and compile in Eclipse.</column>
            <column name="report_time">2012-02-19 15:42:42</column>
            <column name="report_timestamp">1329680000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f37c56e</column>
            <column name="commit_timestamp">1330710000</column>
            <column name="files">tests/bugs170/pr371998/AspectTest.java
tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java
weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</column>
            <column name="result">16:weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java
85:tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">41</column>
            <column name="bug_id">371684</column>
            <column name="summary">Bug 371684  type construction for signature makes mistakes with wildcards</column>
            <column name="description">If you have a type with multiple type params, like this:

Foo&lt;?,T&gt;

the signature is:

LFoo&lt;*TT;&gt;;

and the handling of * is not working in TypeFactory.  If that signature is passed in it will actually build:

Foo&lt;?&gt;

having lost the second type parameter, this breaks code later that has expectations on the number of params.  (e.g. ArrayIndexOutOfBoundsException when building parameterization map)</column>
            <column name="report_time">2012-02-15 17:16:16</column>
            <column name="report_timestamp">1329340000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">89756cd</column>
            <column name="commit_timestamp">1329340000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/TypeFactory.java
tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</column>
            <column name="result">43:org.aspectj.matcher/src/org/aspectj/weaver/TypeFactory.java
2076:tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">42</column>
            <column name="bug_id">362956</column>
            <column name="summary">Bug 362956  neo4j NPE</column>
            <column name="description">java.lang.NullPointerException
        at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:128)
        at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:96)
        at org.aspectj.weaver.patterns.AndAnnotationTypePattern.matches(AndAnnotationTypePattern.java:42)
        at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly(AnyWithAnnotationTypePattern.java:55)
        at org.aspectj.weaver.patterns.TypePattern.matchesStatically(TypePattern.java:132)
        at org.aspectj.weaver.patterns.TypePattern.matches(TypePattern.java:146)
        at org.aspectj.weaver.patterns.SignaturePattern.couldEverMatch(SignaturePattern.java:999)
        at org.aspectj.weaver.patterns.DeclareAnnotation.couldEverMatch(DeclareAnnotation.java:483)
        at org.aspectj.weaver.bcel.BcelClassWeaver.getMatchingSubset(BcelClassWeaver.java:1065)
        at org.aspectj.weaver.bcel.BcelClassWeaver.weaveDeclareAtField(BcelClassWeaver.java:1301)
        at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:445)
        at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:100)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1687)
        at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1631)
        at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1394)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1180)
        at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:514)
        at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:447)
        at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:432)
        at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:98)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:652)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:392)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1021)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:268)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:181)
        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)
        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)
        at org.aspectj.tools.ajc.Main.run(Main.java:371)</column>
            <column name="report_time">2011-11-04 20:33:16</column>
            <column name="report_timestamp">1320450000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">942da06</column>
            <column name="commit_timestamp">1320680000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</column>
            <column name="result">281:org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">43</column>
            <column name="bug_id">359332</column>
            <column name="summary">Bug 359332  NPE in AjBuildManager.java:528 after non-Java/AJ file was renamed</column>
            <column name="description">Build Identifier: 

Upon using Eclipse's &quot;Rename Resource&quot; dialog to rename my project's &quot;src/main/resources/META-INF/spring/email.properties&quot; file to &quot;scheduler.properties&quot; in the same directory, Eclipse displayed the &quot;AspectJ Internal Compiler Error&quot; dialog with this stack trace: 

java.io.FileNotFoundException
at java.io.FileInputStream.open(Native Method)
at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:120)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromFile(AjBuildManager.java:528)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination(AjBuildManager.java:466)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:363)
 ... e error: FileNotFoundException thrown: /Users/aswan/projects/foo/src/main/resources/META-INF/spring/email.properties (No such file or directory)

Reproducible: Couldn't Reproduce

Steps to Reproduce:
N/A</column>
            <column name="report_time">2011-09-29 00:22:08</column>
            <column name="report_timestamp">1317270000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">14a6eac</column>
            <column name="commit_timestamp">1317310000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
        </table>
        <table name="aspectj">
            <column name="id">44</column>
            <column name="bug_id">354947</column>
            <column name="summary">Bug 354947  Nullpointer-Exception while parsing definition file (aop.xml) in DocumentParser</column>
            <column name="description">Build Identifier: 20100617-1415

With an activated NullpointerException-Breakpoint i recently stumpled upon a thrown NPE in the DocumentParser.parse()-method (Line 106):

	public static Definition parse(final URL url) throws Exception {
		InputStream in = null;
		try {
			if (CACHE &amp;&amp; parsedFiles.containsKey(url.toString())) {
				return parsedFiles.get(url.toString());
			}
			Definition def=null;
			
			if(LIGHTPARSER){	
				def = SimpleAOPParser.parse(url);
			}else{
				def = saxParsing(url);
			}
		
			if (CACHE &amp;&amp; def.getAspectClassNames().size() &gt; 0) {
				parsedFiles.put(url.toString(), def);
			}

			return def;
		} finally {
			try {
				in.close();
			} catch (Throwable t) {

			}
		}
	}

... The parsing of the configuration file works fine, merely the InputStream seems not to be used anymore. 


Reproducible: Always</column>
            <column name="report_time">2011-08-17 09:28:42</column>
            <column name="report_timestamp">1313590000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">e71e287</column>
            <column name="commit_timestamp">1313600000</column>
            <column name="files">weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</column>
        </table>
        <table name="aspectj">
            <column name="id">45</column>
            <column name="bug_id">353457</column>
            <column name="summary">Bug 353457  NPE when saving an aspect - Aspectj Internal Compiler Error</column>
            <column name="description"></column>
            <column name="report_time">2011-07-30 17:23:36</column>
            <column name="report_timestamp">1312060000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0f506ab</column>
            <column name="commit_timestamp">1313440000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/ShadowMunger.java</column>
            <column name="result">122:org.aspectj.matcher/src/org/aspectj/weaver/ShadowMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">46</column>
            <column name="bug_id">354022</column>
            <column name="summary">Bug 354022  constructor inlining can fail for some groovy built code</column>
            <column name="description">The file grails.util.BuildSettings contains bytecode where the constructors are recursive.

You can't compile this in Java

A() {
  this();
}

but groovy generates some code where it switches on a value in the ctor and if it is a certain value, the recursive ctor call is made.  I imagine this 'never happens' in practice but because it is in the bytecode it trips up the AspectJ code which inlines this() calls before weaving - since it gets into an infinite loop.

For now, just keep track of ctors making the recursive call and so don't get trapped in the infinite loop.</column>
            <column name="report_time">2011-08-05 12:17:24</column>
            <column name="report_timestamp">1312560000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6ae463a</column>
            <column name="commit_timestamp">1312560000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</column>
            <column name="result">27:weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</column>
        </table>
        <table name="aspectj">
            <column name="id">47</column>
            <column name="bug_id">340806</column>
            <column name="summary">Bug 340806  Race condition in JavaLangTypeToResolvedTypeConverter (potentially exposed through Spring AOP)</column>
            <column name="description"></column>
            <column name="report_time">2011-03-23 16:35:10</column>
            <column name="report_timestamp">1300910000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">167b801</column>
            <column name="commit_timestamp">1312400000</column>
            <column name="files">weaver5/java5-src/org/aspectj/weaver/reflect/JavaLangTypeToResolvedTypeConverter.java</column>
            <column name="result">1:weaver5/java5-src/org/aspectj/weaver/reflect/JavaLangTypeToResolvedTypeConverter.java</column>
        </table>
        <table name="aspectj">
            <column name="id">48</column>
            <column name="bug_id">353349</column>
            <column name="summary">Bug 353349  NPE in deleteNewAndDup</column>
            <column name="description">java.lang.NullPointerException
        at org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup(BcelShadow.java:179)
        at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers(BcelShadow.java:303)
        at org.aspectj.weaver.Shadow.implement(Shadow.java:543)
        at org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:3147)
        at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:490)
        at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:100)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1687)
        at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1631)
        at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1394)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1180)
        at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:467)
        at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:318)
        at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:96)</column>
            <column name="report_time">2011-07-28 13:52:00</column>
            <column name="report_timestamp">1311880000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">e8ef5bf</column>
            <column name="commit_timestamp">1311890000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result">7:weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
        </table>
        <table name="aspectj">
            <column name="id">49</column>
            <column name="bug_id">353100</column>
            <column name="summary">Bug 353100  Need to demote &quot;warning ignoring duplicate definition&quot; from warning to debug</column>
            <column name="description">Build Identifier: 1.6.11

This kind of problem can occur for complex class loader hierarchies, and since it is not really a problem, we should make it debug level message so as not to write log messages un-necessarily.

Reproducible: Always

Steps to Reproduce:
1. Create an application that has some weaved class loaders hierarchy - recommend some URLClassLoader derived ones
2. Add the same(!) JAR with only an aop.xml file to more than one loader along the hierarchy
3. Make the loader the default context thread loader and start running some code.</column>
            <column name="report_time">2011-07-26 08:47:48</column>
            <column name="report_timestamp">1311680000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">c6fb752</column>
            <column name="commit_timestamp">1311700000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</column>
            <column name="result">3:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</column>
        </table>
        <table name="aspectj">
            <column name="id">50</column>
            <column name="bug_id">352389</column>
            <column name="summary">Bug 352389  overweaving can attribute duplicate attributes, one of which will not deserialize correctly</column>
            <column name="description">When overweaving it is possible that a class will get a second WeaverState attribute.  This second one will not be valid (it hasn't been correctly configured).  This isn't normally a problem because the next thing that happens is that the class is defined to the VM.  But if *another* weave step occurs, the malformed attribute will cause that weave to fail with this kind of message:

bad WeaverState.Kind: -115

The solution is to avoid adding the duplicate when overweaving.</column>
            <column name="report_time">2011-07-18 16:08:47</column>
            <column name="report_timestamp">1311020000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">8553b30</column>
            <column name="commit_timestamp">1311020000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</column>
            <column name="result">19:weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</column>
        </table>
        <table name="aspectj">
            <column name="id">51</column>
            <column name="bug_id">350855</column>
            <column name="summary">Bug 350855  overweaving misbehaving when subclassing WeavingURLClassLoader</column>
            <column name="description">Raised by the Spring Insight team, they observed that in a system where they are using a special classloader (subclassing weaving url classloader) they see it fail to weave an aspect if overweaving is on.</column>
            <column name="report_time">2011-06-30 11:32:19</column>
            <column name="report_timestamp">1309450000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2302e94</column>
            <column name="commit_timestamp">1309450000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
            <column name="result">31:weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
        </table>
        <table name="aspectj">
            <column name="id">52</column>
            <column name="bug_id">349764</column>
            <column name="summary">Bug 349764  Repeated output of ASPECTJ: aspectj.overweaving=true: overweaving switched ON</column>
            <column name="description">Build Identifier: 1.6.11

The message is repeated every time a new class loader is being use to load weaving configuration (using  -Dorg.aspectj.tracing.factory=default). Since this value is a system (!) property there is no need to display its value more than once (or even check it more than once - it could be lazily initialized and cached...)

Reproducible: Always

Steps to Reproduce:
1. use -Dorg.aspectj.tracing.factory=default -Daspectj.overweaving=true properties
2. place some JAR that contains aop.xml with some aspects and weaving options where it can be loaded/visible from several class loaders
3. runt the application and check the STDOUT output</column>
            <column name="report_time">2011-06-19 05:42:40</column>
            <column name="report_timestamp">1308480000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">bb2aea4</column>
            <column name="commit_timestamp">1308590000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/World.java</column>
            <column name="result">8:org.aspectj.matcher/src/org/aspectj/weaver/World.java</column>
        </table>
        <table name="aspectj">
            <column name="id">53</column>
            <column name="bug_id">349636</column>
            <column name="summary">Bug 349636  AspectJ reports &quot;abort trouble&quot; while instrumenting a class on startup</column>
            <column name="description">Build Identifier: 20110218-0911

java.lang.NullPointerException
	at org.aspectj.weaver.bcel.Utility.appendConversion(Utility.java:272)
	at org.aspectj.weaver.bcel.BcelVar.appendConvertableArrayLoad(BcelVar.java:81)
	at org.aspectj.weaver.bcel.BcelVar.createConvertableArrayLoad(BcelVar.java:101)
	at org.aspectj.weaver.bcel.BcelShadow.makeClosureClassAndReturnConstructor(BcelShadow.java:3066)
	at org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure(BcelShadow.java:2830)
	at org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:342)
	at org.aspectj.weaver.Shadow.implementMungers(Shadow.java:630)
	at org.aspectj.weaver.Shadow.implement(Shadow.java:544)
	at org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:3147)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:490)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:100)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1687)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1631)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1394)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1180)
	at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:467)
	at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:318)
	at org.eclipse.equinox.weaving.aspectj.loadtime.OSGiWeavingAdaptor.weaveClass(Unknown Source)
	at org.eclipse.equinox.weaving.aspectj.AspectJWeavingService.preProcess(Unknown Source)
	at org.eclipse.equinox.weaving.adaptors.WeavingAdaptor.weaveClass(Unknown Source)
	at org.eclipse.equinox.weaving.hooks.WeavingHook.processClass(Unknown Source)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass(ClasspathManager.java:575)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl(ClasspathManager.java:550)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl(ClasspathManager.java:481)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass_LockClassLoader(ClasspathManager.java:469)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass(ClasspathManager.java:449)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass(DefaultClassLoader.java:216)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:393)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:469)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:422)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:410)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	at org.eclipse.osgi.internal.loader.BundleLoader.loadClass(BundleLoader.java:338)
	at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass(BundleHost.java:232)
	at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass(AbstractBundle.java:1197)
	at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:99)
	at org.springframework.osgi.util.BundleDelegatingClassLoader.loadClass(BundleDelegatingClassLoader.java:157)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:257)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:408)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1271)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1242)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:576)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1319)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:315)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors(AbstractDelegatedExecutionApplicationContext.java:391)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors(AbstractDelegatedExecutionApplicationContext.java:364)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$3.run(AbstractDelegatedExecutionApplicationContext.java:256)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:87)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.startRefresh(AbstractDelegatedExecutionApplicationContext.java:222)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplicationContextExecutor.java:225)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicationContextExecutor.java:178)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:159)
	at org.springframework.osgi.extender.internal.activator.LifecycleManager$1.run(LifecycleManager.java:223)
	at java.lang.Thread.run(Thread.java:662)



Reproducible: Sometimes</column>
            <column name="report_time">2011-06-16 20:13:48</column>
            <column name="report_timestamp">1308270000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f7b1193</column>
            <column name="commit_timestamp">1308350000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/Utility.java</column>
            <column name="result">51:weaver/src/org/aspectj/weaver/bcel/Utility.java</column>
        </table>
        <table name="aspectj">
            <column name="id">54</column>
            <column name="bug_id">348979</column>
            <column name="summary">Bug 348979  world type map fixed/expendable problems</column>
            <column name="description">Discovered whilst working with Steve Ash on a build of a few projects that was consuming more than 2Gigs of heap.

To recover memory Steve activated type demotion.  This didn't appear to help much.  This was due to Steve's projects using aspectpath.  The aspectpath scanning to discover aspects was inadvertently making any types discovered on the aspectpath permanent types (not expendable) and they'd never be demoted/evicted.

The types were all being made permanent in case they were an aspect but never being demoted if it turns out they were not.  In a Roo petclinic I added spel as a dependency (on the aspectpath) and parsed a simple expression (just to further exaggerate the problem).  This was leaving 213 types in the fixed area of the typemap.  By correctly scanning aspectpath and demoting non-aspects this was reduced to 90.</column>
            <column name="report_time">2011-06-09 18:59:37</column>
            <column name="report_timestamp">1307660000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2edb246</column>
            <column name="commit_timestamp">1307740000</column>
            <column name="files">tests/multiIncremental/PR278496_10/base/com/Asp.java
tests/multiIncremental/PR278496_10/base/com/Foo.java
tests/multiIncremental/PR278496_11/base/com/Foo.java
tests/multiIncremental/PR278496_11_a/base/com/Asp.java
tests/multiIncremental/PR278496_11_a/base/com/Dibble.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">55</column>
            <column name="bug_id">348488</column>
            <column name="summary">Bug 348488  &quot;register definition failed&quot; with NullPointerException</column>
            <column name="description"></column>
            <column name="report_time">2011-06-06 21:12:28</column>
            <column name="report_timestamp">1307410000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">95e70d2</column>
            <column name="commit_timestamp">1307470000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</column>
            <column name="result">46:weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</column>
        </table>
        <table name="aspectj">
            <column name="id">56</column>
            <column name="bug_id">327134</column>
            <column name="summary">Bug 327134  Cant suppress raw types warning in a pointcut</column>
            <column name="description">Build Identifier: I20100608-0911

Generic type used in a pointcut and bound to target() or this() must omit actual type name and thus causes 'raw type must be parametrized' compiler warning. @SuppressAJWarning or @SuppressWarning annotations does not turn it off

Reproducible: Always

Steps to Reproduce:
Code snippets:

pointcut IVOListUpdate(IVOList list):
		&amp;&amp; target(list) &amp;&amp; call(void updateList(*));

public interface IVOList&lt;T extends IValueObject&gt; extends List&lt;T&gt;, Externalizable, Serializable {

	
	void updateList(List&lt;T&gt; newList);
	
}

public interface IValueObject extends Comparable&lt;IValueObject&gt;, Serializable {
}</column>
            <column name="report_time">2010-10-06 12:12:17</column>
            <column name="report_timestamp">1286380000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">199299c</column>
            <column name="commit_timestamp">1304000000</column>
            <column name="files">tests/bugs1612/pr327134/Code.java
tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</column>
            <column name="result">25:tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">57</column>
            <column name="bug_id">339974</column>
            <column name="summary">Bug 339974  NPE when accessing static class inside of an ITIT</column>
            <column name="description">This code:

public class City {

    private String name;

    private Country country;
}


And separate file:

public aspect TrafficCalculator {
	
	public static class City.TrafficCalculator {
		Function&lt;City, Time&gt; EXTREME = createExtremeTraffic(); 
		Function&lt;City, Time&gt; BASIC = createBasicTraffic();
	}
	
	
	private static Function&lt;City, Time&gt; createExtremeTraffic() {
		return null;
	} 
	private static Function&lt;City, Time&gt; createBasicTraffic() {
		return null;
	} 
	
	public static class Time { } 

}

Try full build and the following exception:

java.lang.NullPointerException
	at org.aspectj.ajdt.internal.compiler.ast.IntertypeMemberClassDeclaration.resolveOnType(IntertypeMemberClassDeclaration.java:238)
	at org.aspectj.ajdt.internal.compiler.ast.IntertypeMemberClassDeclaration.build(IntertypeMemberClassDeclaration.java:246)
	at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.processIntertypeMemberTypes(AspectDeclaration.java:1039)
	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.processInterTypeMemberTypes(AjLookupEnvironment.java:523)
	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:197)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:616)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:357)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:371)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1021)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:305)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:185)
	at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild(AjdeCoreBuildManager.java:127)
	at org.aspectj.ajde.core.AjCompiler.build(AjCompiler.java:91)
	at org.eclipse.ajdt.core.builder.AJBuilder.build(AJBuilder.java:257)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:629)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:172)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:203)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:255)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:258)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:311)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:343)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:144)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:242)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)</column>
            <column name="report_time">2011-03-15 00:21:25</column>
            <column name="report_timestamp">1300160000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">249f832</column>
            <column name="commit_timestamp">1303400000</column>
            <column name="files">tests/bugs1612/pr339974/City.java
tests/bugs1612/pr339974/TrafficCalculator.java
tests/bugs1612/pr342605/Code.java
tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</column>
            <column name="result">360:tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">58</column>
            <column name="bug_id">341446</column>
            <column name="summary">Bug 341446  java.lang.UnsupportedClassVersionError when running Java 1.5</column>
            <column name="description"></column>
            <column name="report_time">2011-03-31 02:20:53</column>
            <column name="report_timestamp">1301550000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">293a075</column>
            <column name="commit_timestamp">1301630000</column>
            <column name="files">org.aspectj.matcher/testdata/AnnotatedClass.java
org.aspectj.matcher/testdata/MethodLevelAnnotation.java
org.aspectj.matcher/testdata/SomeAnnotation.java
org.aspectj.matcher/testsrc/org/aspectj/matcher/tools/CommonAdvancedPointcutExpressionTests.java
org.aspectj.matcher/testsrc/testdata/AnnotatedClass.java
org.aspectj.matcher/testsrc/testdata/MethodLevelAnnotation.java
org.aspectj.matcher/testsrc/testdata/SomeAnnotation.java</column>
            <column name="result">839:org.aspectj.matcher/testsrc/org/aspectj/matcher/tools/CommonAdvancedPointcutExpressionTests.java
2330:org.aspectj.matcher/testdata/AnnotatedClass.java</column>
        </table>
        <table name="aspectj">
            <column name="id">59</column>
            <column name="bug_id">340323</column>
            <column name="summary">Bug 340323  NPE when weaving java.lang.Object at org.aspectj.weaver.bcel.BcelTypeMunger.createAnyBridgeMethodsForCovariance(BcelTypeMunger.java:1251)</column>
            <column name="description"></column>
            <column name="report_time">2011-03-17 10:34:56</column>
            <column name="report_timestamp">1300370000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a8e6797</column>
            <column name="commit_timestamp">1301340000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">60</column>
            <column name="bug_id">339300</column>
            <column name="summary">Bug 339300  problem weaving anonymous inner (member owned) classes in scala library</column>
            <column name="description">Reported by Ramnivas.

Due to the use of numerous $ chars in scala classnames, some of the AspectJ handling of inner classes breaks down.  It should be possible to correctly use the available class attributes rather than mess around with attributes.  A while back one use did contribute a change to enable scala weaving which tried to use the InnerClasses attribute before falling back on string chopping.  However we have now hit another case.

In the scenario we are dealing with the class scala.Predef$$anon$3 in the scala library (a 2.9.0-SNAPSHOT version).  What we normally do here is in that type we discover the InnerClass attribute and refer to the outerclass index it holds.  Unfortunately, due to it being an anonymous inner inside a method, the index is 0.  So we fail to process the attribute and with string chopping come up with a stupid guessed name for the outer.

The solution is to use the EnclosingMethod attribute in these situations.  The EnclosingMethod attribute is an optional attribute. A class must have an EnclosingMethod attribute if and only if it is a local class or an anonymous class. A class may have no more than one EnclosingMethod attribute.

The EnclosingMethod attribute includes a pointer to the containing outerclass (that had the method in which encloses this inner type).</column>
            <column name="report_time">2011-03-08 18:49:10</column>
            <column name="report_timestamp">1299630000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">945402f</column>
            <column name="commit_timestamp">1299630000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</column>
            <column name="result">13:weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">61</column>
            <column name="bug_id">336997</column>
            <column name="summary">Bug 336997  IllegalStateException for generic ITD usage</column>
            <column name="description">java.lang.IllegalStateException: Can't answer binding questions prior to resolving
	at org.aspectj.weaver.TypeVariable.canBeBoundTo(TypeVariable.java:175)
	at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:496)
	at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)
	at org.aspectj.weaver.ResolvedType.checkLegalOverride(ResolvedType.java:1999)
	at org.aspectj.weaver.ResolvedType.clashesWithExistingMember(ResolvedType.java:1843)
	at org.aspectj.weaver.ResolvedType.addInterTypeMunger(ResolvedType.java:1699)
	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:795)
	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:652)
	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom(AjLookupEnvironment.java:1398)
	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:599)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:276)
	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:113)
	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:49)
	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:99)
	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:971)
	at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.lookupBinding(EclipseFactory.java:749)
	at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding1(EclipseFactory.java:743)
	at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding(EclipseFactory.java:605)
	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addParent(AjLookupEnvironment.java:1314)
	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareParents(AjLookupEnvironment.java:902)
	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:730)
	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes(AjLookupEnvironment.java:418)
	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:255)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:616)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:357)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:371)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1021)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:268)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:181)
	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)
	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)
	at org.aspectj.tools.ajc.Main.run(Main.java:371)
	at org.aspectj.tools.ajc.Main.runMain(Main.java:248)
	at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute(AbstractAjcCompiler.java:360)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)</column>
            <column name="report_time">2011-02-11 14:01:27</column>
            <column name="report_timestamp">1297450000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">80785bf</column>
            <column name="commit_timestamp">1297450000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java
org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java
org.aspectj.matcher/src/org/aspectj/weaver/World.java</column>
            <column name="result">24:org.aspectj.matcher/src/org/aspectj/weaver/World.java
96:org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java
194:org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">62</column>
            <column name="bug_id">282379</column>
            <column name="summary">Bug 282379  [plan] spaces in file names causes AspectJ weaver to fail</column>
            <column name="description">The WeavingAdaptor requires the aspect path to be composed by URLs. The URL of a file is encoded, for example if it contains spaces they will be represented with %20.

It then converts these file:// urls to simple string paths, and then tries to access files pointed by those paths.

This is done inside the FileUtil.makeClasspath(URL[]) . This method uses URL.getPath() to obtain the path. But this method does not decode the string, it returns it as it is in the URL. When later this string is used to create a new File instance, that file contains an invalid path, and the weaver fails as follows :

Caused by: org.aspectj.bridge.AbortException: bad aspect library: '/home/sym/path%20with%20space/aspect-library.jar'
        at org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHolder.handleMessage(WeavingAdaptor.java:624)
        at org.aspectj.bridge.MessageUtil.error(MessageUtil.java:80)
        at org.aspectj.weaver.tools.WeavingAdaptor.error(WeavingAdaptor.java:504)
        at org.aspectj.weaver.tools.WeavingAdaptor.addAspectLibrary(WeavingAdaptor.java:472)
        at org.aspectj.weaver.tools.WeavingAdaptor.registerAspectLibraries(WeavingAdaptor.java:447)
        at org.aspectj.weaver.tools.WeavingAdaptor.init(WeavingAdaptor.java:177)
        at org.aspectj.weaver.tools.WeavingAdaptor.&lt;init&gt;(WeavingAdaptor.java:112)

This issue is quite important, because on older windows &quot;Documents and Settings&quot; is an unfortunately common path, for example Maven stores there its repository.

Multiple solutions are possible for this simple bug, in order of impact :
- Decode the string obtained by URL.getPath() using URLEncoder.decode() 
- Use Files instead of Strings and let Java handle the URL, using the File(URI) constructor
- Don't assume that aspect libraries are files, and hence that urls are file url, and use URLConnection to fetch aspect library contents.</column>
            <column name="report_time">2009-07-03 10:12:55</column>
            <column name="report_timestamp">1246630000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5648105</column>
            <column name="commit_timestamp">1296940000</column>
            <column name="files">util/src/org/aspectj/util/FileUtil.java</column>
            <column name="result">13:util/src/org/aspectj/util/FileUtil.java</column>
        </table>
        <table name="aspectj">
            <column name="id">63</column>
            <column name="bug_id">324804</column>
            <column name="summary">Bug 324804  NullPointerException at AspectJElementHierarchy.java:677</column>
            <column name="description">Build Identifier: 20100617-1415

After removing a &quot;throws&quot; clause from the constructor of a class and then saving I got the following error:

java.lang.NullPointerException
at org.aspectj.asm.internal.AspectJElementHierarchy.getCanonicalFilePath(AspectJElementHierarchy.java:677)
at org.aspectj.asm.internal.AspectJElementHierarchy.updateHandleMap(AspectJElementHierarchy.java:641)
at org.aspectj.asm.AsmManager.removeStructureModelForFiles(AsmManager.java:572)
at org.aspectj.asm.AsmManager.processDelta(AsmManager.java:604)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager ... oBuildJob.run(AutoBuildJob.java:242)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

Compile error: NullPointerException thrown: null

Reproducible: Didn't try</column>
            <column name="report_time">2010-09-08 18:30:31</column>
            <column name="report_timestamp">1283990000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6249672</column>
            <column name="commit_timestamp">1284050000</column>
            <column name="files">asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</column>
            <column name="result">1:asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</column>
        </table>
        <table name="aspectj">
            <column name="id">64</column>
            <column name="bug_id">324190</column>
            <column name="summary">Bug 324190  NullPointerException in AjBuildManager.findOutputDirsForAspects when compiling AspectJ project generated with Maven</column>
            <column name="description">Build Identifier: 20100617-1415

When I compile my AspectJ project, I get an AspectJ Internal Compiler Error. The stack trace is : 
java.lang.NullPointerException
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.findOutputDirsForAspects(AjBuildManager.java:725)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeOutxmlFile(AjBuildManager.java:652)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:367)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:181)
at org.aspectj.a ... on$1.run(GlobalBuildAction.java:179)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

I digged a bit and looked into the classes. It would seem that AjState.getAspectNamesToFileNameMap() can return null in AjBuildManager.findOutputDirsForAspects. It is taken in account when AjBuildConfig.getCompilationResultDestinationManager() returns null or a list with one element, but not when it returns a list with several elements.

Reproducible: Always

Steps to Reproduce:
Always happen in my configuration, but I didn't try to make it happen again in another workspace. Here are the steps I followed.

1. Generate a AspectJ project with Maven using the pom.xml I'll join
2. Create an aspect with a few pointcuts and a few advices
3. Compile (not with maven, the Eclipse compilation)</column>
            <column name="report_time">2010-09-01 09:15:48</column>
            <column name="report_timestamp">1283350000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">03c43f5</column>
            <column name="commit_timestamp">1283350000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
        </table>
        <table name="aspectj">
            <column name="id">65</column>
            <column name="bug_id">318899</column>
            <column name="summary">Bug 318899  NPE with @args matching Argument by Type</column>
            <column name="description"></column>
            <column name="report_time">2010-07-05 10:24:03</column>
            <column name="report_timestamp">1278340000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2a8d684</column>
            <column name="commit_timestamp">1283310000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/reflect/ShadowMatchImpl.java
org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java</column>
            <column name="result">34:org.aspectj.matcher/src/org/aspectj/weaver/reflect/ShadowMatchImpl.java
99:org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java</column>
        </table>
        <table name="aspectj">
            <column name="id">66</column>
            <column name="bug_id">324135</column>
            <column name="summary">Bug 324135  ArrayIndexOutOfBoundsException at AjState.java:1767</column>
            <column name="description">Build Identifier: 20100617-1415

Using AspectJ version: 1.6.10.20100817163700

I hit the blow exception after saving a edited java file.

java.lang.ArrayIndexOutOfBoundsException
at org.aspectj.ajdt.internal.core.builder.AjState.hasStructuralChanges(AjState.java:1767)
at org.aspectj.ajdt.internal.core.builder.AjState.recordClassFile(AjState.java:1510)
at org.aspectj.ajdt.internal.core.builder.AjState.noteResult(AjState.java:1322)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult(AjBuildManager.java:1049)
at org.aspectj.ajdt.internal.compiler.AjPipeli ... b.run(AutoBuildJob.java:242)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

Compile error: ArrayIndexOutOfBoundsException thrown: 14

Reproducible: Didn't try</column>
            <column name="report_time">2010-08-31 16:50:55</column>
            <column name="report_timestamp">1283290000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">88fab6a</column>
            <column name="commit_timestamp">1283300000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</column>
        </table>
        <table name="aspectj">
            <column name="id">67</column>
            <column name="bug_id">320468</column>
            <column name="summary">Bug 320468  ModifiersPattern.getModifierFlag() is not thread safe</column>
            <column name="description">Build Identifier: org.aspectj.weaver_1.6.0.20080423100000.jar

ModifiersPattern.getModifierFlag() is a non-synchronized static method using the static Map modifierFlags. This can lead to a ConcurrentModificationException when this code is executed in a multi-threaded environment. A stack trace showing the erroneous behavior is appended at the end of this bug report.

In our case multithreading is introduced by using Spring DM. This leads to many application contexts being initialized in parallel. Each of them can contain pointcut expression, which are processed in independent threads. Spring AOP enters the &quot;AspectJ world&quot; calling PointcutParser.parsePointcutExpression().

Since there is no guarantee that a ConcurrentModificationException is thrown it is also possible that concurrent read/write accesses to the modifierFlags map are not recognized and incorrect values are used.


org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactoryProxy': Post-processing of the FactoryBean's object failed; nested exception is java.util.ConcurrentModificationException: concurrent access to HashMap attempted by Thread[SpringOsgiExtenderThread-43,5,spring-osgi-extender[6dee6dee]-threads]
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:142)
	at java.security.AccessController.doPrivileged(AccessController.java:219)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:116)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:91)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:217)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:425)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$1600(AbstractDelegatedExecutionApplicationContext.java:69)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:355)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)
	at java.lang.Thread.run(Thread.java:811)
Caused by: java.util.ConcurrentModificationException: concurrent access to HashMap attempted by Thread[SpringOsgiExtenderThread-43,5,spring-osgi-extender[6dee6dee]-threads]
	at java.util.HashMap.onEntry(HashMap.java:214)
	at java.util.HashMap.transfer(HashMap.java:686)
	at java.util.HashMap.resize(HashMap.java:676)
	at java.util.HashMap.addEntry(HashMap.java:1049)
	at java.util.HashMap.put(HashMap.java:561)
	at org.aspectj.weaver.patterns.ModifiersPattern.getModifierFlag(ModifiersPattern.java:87)
	at org.aspectj.weaver.patterns.PatternParser.parseModifiersPattern(PatternParser.java:1169)
	at org.aspectj.weaver.patterns.PatternParser.parseMethodOrConstructorSignaturePattern(PatternParser.java:1248)
	at org.aspectj.weaver.patterns.PatternParser.parseKindedPointcut(PatternParser.java:603)
	at org.aspectj.weaver.patterns.PatternParser.parseSinglePointcut(PatternParser.java:317)
	at org.aspectj.weaver.patterns.PatternParser.parseAtomicPointcut(PatternParser.java:295)
	at org.aspectj.weaver.patterns.PatternParser.parsePointcut(PatternParser.java:256)
	at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression(PointcutParser.java:328)
	at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:309)
	at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression(AspectJExpressionPointcut.java:206)
	at org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch(AspectJExpressionPointcut.java:193)
	at org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter(AspectJExpressionPointcut.java:174)
	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:195)
	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:250)
	at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:284)
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:113)
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:85)
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:66)
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:362)
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:325)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:361)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.postProcessObjectFromFactoryBean(AbstractAutowireCapableBeanFactory.java:1429)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:139)
	... 15 more

Reproducible: Sometimes</column>
            <column name="report_time">2010-07-21 04:22:43</column>
            <column name="report_timestamp">1279700000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">e0e1330</column>
            <column name="commit_timestamp">1282840000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/patterns/ModifiersPattern.java</column>
            <column name="result">3:org.aspectj.matcher/src/org/aspectj/weaver/patterns/ModifiersPattern.java</column>
        </table>
        <table name="aspectj">
            <column name="id">68</column>
            <column name="bug_id">323634</column>
            <column name="summary">Bug 323634  NPE parameterizing perclause</column>
            <column name="description">java.lang.NullPointerException
at org.aspectj.weaver.ReferenceType.getPerClause(ReferenceType.java:823)
at org.aspectj.weaver.patterns.PerFromSuper.lookupConcretePerClause(PerFromSuper.java:82)
at org.aspectj.weaver.patterns.PerFromSuper.concretize(PerFromSuper.java:61)
at org.aspectj.weaver.CrosscuttingMembers.setPerClause(CrosscuttingMembers.java:512)
at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers(ResolvedType.java:748) ... oBuildJob.run(AutoBuildJob.java:242)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)</column>
            <column name="report_time">2010-08-25 12:40:52</column>
            <column name="report_timestamp">1282750000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ce16a06</column>
            <column name="commit_timestamp">1282750000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</column>
            <column name="result">34:org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">69</column>
            <column name="bug_id">323417</column>
            <column name="summary">Bug 323417  Sometimes StackOverflow is got while weaving</column>
            <column name="description">Build Identifier: 1.6.10

While weaving LifeRay 6.0.5 over tomcat 6.0.26 sometimes the next exceptions appear:

java.lang.StackOverflowError
        at java.lang.String.indexOf(String.java:1521)
        at org.aspectj.weaver.TypeFactory.createTypeFromSignature(TypeFactory.java:199)
        at org.aspectj.weaver.UnresolvedType.forSignature(UnresolvedType.java:375)
        at org.aspectj.weaver.UnresolvedType.getRawType(UnresolvedType.java:533)
        at org.aspectj.weaver.ResolvedType.getRawType(ResolvedType.java:2400)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:430)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:430)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:430)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:430)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:430)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:430)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:430)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:430)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)
...




Reproducible: Sometimes</column>
            <column name="report_time">2010-08-23 13:44:19</column>
            <column name="report_timestamp">1282590000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f631ad6</column>
            <column name="commit_timestamp">1282700000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/World.java</column>
            <column name="result">3:org.aspectj.matcher/src/org/aspectj/weaver/World.java</column>
        </table>
        <table name="aspectj">
            <column name="id">70</column>
            <column name="bug_id">322039</column>
            <column name="summary">Bug 322039  Fully qualified ITD has incorrect handle identifier</column>
            <column name="description">In the following aspect:

public aspect Aspect {
	public void q2.ThisClass.something2() {}
}

In aspectJ, the ITD has the following handle identifier (notice that the ITD name is not fully qualified):

=AspectJ Project/src2&lt;p*Aspect.aj'Aspect)ThisClass.something2

However, it should be (with fully qualified name):

=AspectJ Project/src2&lt;p*Aspect.aj'Aspect)q2.ThisClass.something2

This means that fully qualified ITDs cannot be navigated to or searched.  I'm a little surprised that this doesn't work because I thought I had tests for it...</column>
            <column name="report_time">2010-08-06 19:47:15</column>
            <column name="report_timestamp">1281140000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6b35ea4</column>
            <column name="commit_timestamp">1282150000</column>
            <column name="files">tests/multiIncremental/pr322039/base/src/p/Azpect.java
tests/multiIncremental/pr322039/base/src/q2/Code.java
tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
            <column name="result">4:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">71</column>
            <column name="bug_id">322832</column>
            <column name="summary">Bug 322832  early field resolution leading to problems for ITDs when declare parents in use</column>
            <column name="description">I have a type that is being used where a generic is being expected.  That generic specifies an upper bound.  The type only obeys the upper bound once a declare parents has applied to it.

I have an intertype declaration (a field).  When the ITD is applied we do some work to see if it clashes with existing fields.  This causes existing fields to be resolved.  If this resolution triggers a bounds check for the declare parents affected type before the declare parents has applied, a problem will be raised.

Basically if the target of the declare is processed before the intertype then we are ok, but that is luck based.

We should do the declare parents first (and declare annotation) and then do intertype declarations (since they may trigger this extra resolution).</column>
            <column name="report_time">2010-08-16 15:33:00</column>
            <column name="report_timestamp">1281990000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">16adee6</column>
            <column name="commit_timestamp">1281990000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</column>
            <column name="result">3:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</column>
        </table>
        <table name="aspectj">
            <column name="id">72</column>
            <column name="bug_id">321641</column>
            <column name="summary">Bug 321641  No way to exclude Proxool classes although excluded from AOP. Causing Veryfy error.</column>
            <column name="description">Build Identifier: 20100218-1602

For aspectJ 1.6.7 the setup works, however exactly the same setup but changing the aspectJ version to 1.6.8 or 1.6.9 derive to the same error: a piece of code excluded from the aop.xml is woven causing a Verify Error.

We are using Proxool, proxy setup which in fact uses CGLIB to create a EnhancerProxy class. In order to avoid VerifyError exceptions the Proxool classes are excluded from aop.xml exactly in the same way the CGLIB workarround is commented in the aspectJ FAQ:

		&lt;exclude within=&quot;*..*Proxool*&quot;/&gt;


This is the error we got when we upgrade our 1.6.7 aspejctweaver.jar to 1.6.8. The same is got when using 1.6.9:

jvm 3    | 2010/08/03 16:42:53 | java.lang.VerifyError: (class: oracle/jdbc/internal/OracleConnection$$EnhancerByProxool$$7f6320a8, method: getTdoCState signature: (Ljava/lang/String;Ljava/lang/String;)J) Inconsistent stack height 1 != 0
jvm 3    | 2010/08/03 16:42:53 | 	at java.lang.Class.getDeclaredMethods0(Native Method)
jvm 3    | 2010/08/03 16:42:53 | 	at java.lang.Class.privateGetDeclaredMethods(Class.java:2427)
jvm 3    | 2010/08/03 16:42:53 | 	at java.lang.Class.getDeclaredMethod(Class.java:1935)
jvm 3    | 2010/08/03 16:42:53 | 	at org.logicalcobwebs.cglib.proxy.Enhancer.getCallbacksSetter(Enhancer.java:627)
jvm 3    | 2010/08/03 16:42:53 | 	at org.logicalcobwebs.cglib.proxy.Enhancer.setCallbacksHelper(Enhancer.java:615)
jvm 3    | 2010/08/03 16:42:53 | 	at org.logicalcobwebs.cglib.proxy.Enhancer.setThreadCallbacks(Enhancer.java:609)
jvm 3    | 2010/08/03 16:42:53 | 	at org.logicalcobwebs.cglib.proxy.Enhancer.createUsingReflection(Enhancer.java:631)
jvm 3    | 2010/08/03 16:42:53 | 	at org.logicalcobwebs.cglib.proxy.Enhancer.firstInstance(Enhancer.java:538)
jvm 3    | 2010/08/03 16:42:53 | 	at org.logicalcobwebs.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:225)
jvm 3    | 2010/08/03 16:42:53 | 	at org.logicalcobwebs.cglib.proxy.Enhancer.createHelper(Enhancer.java:377)
jvm 3    | 2010/08/03 16:42:53 | 	at org.logicalcobwebs.cglib.proxy.Enhancer.create(Enhancer.java:285)
....

As far as the Verify Error is got while deploying one of the applications that run on the serve we are no able to use the new versions of aspectJ because the application is not properly started up.

Thank you very much in advance,

Best regards.

Reproducible: Always

Steps to Reproduce:
1.Exclude Proxool classes from aop.xml using aspectj 1.6.7. It works
2.Upgrade to 1.6.8: it does not work.
3.Upgrade to 1.6.9: it does not work.</column>
            <column name="report_time">2010-08-03 14:05:08</column>
            <column name="report_timestamp">1280860000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">85fd25d</column>
            <column name="commit_timestamp">1281450000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
loadtime/testsrc/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptorTest.java
loadtime/testsrc/testdata/MessageService$$EnhancerByCGLIB$$6dd4e683.java</column>
            <column name="result">2:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
33:loadtime/testsrc/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptorTest.java</column>
        </table>
        <table name="aspectj">
            <column name="id">73</column>
            <column name="bug_id">318397</column>
            <column name="summary">Bug 318397  Caching in EclipseSourceType is too aggressive</column>
            <column name="description">In fixing a recent Roo related issue (where annotations are resolved too early, before declare parents are done) a cache was introduced into EclipseSourceType (see ensureAnnotationTypesResolved()).  The cache needs to be cleared if the set of annotation declarations changes - this can occur even after parsing because declare annotation can change them.</column>
            <column name="report_time">2010-06-29 20:15:57</column>
            <column name="report_timestamp">1277860000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">fe049ea</column>
            <column name="commit_timestamp">1277860000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">74</column>
            <column name="bug_id">317743</column>
            <column name="summary">Bug 317743  import handling and type lookup issues</column>
            <column name="description">Raised by Peter Melnikov on the mailing list.

Two problems: 
1) the binding scope being used for annotation style aspects accumulates lots of duplicate import prefixes in the SimpleScope object.
2) SimpleScope.lookupType tries the prefixes even if the type is already fully qualified. 

The combination of these issues causes a terrible mess.  Lots of class lookup failures.  Since the type cannot be 'partially qualified' it is silly to use the prefixes if the type is fully qualified.</column>
            <column name="report_time">2010-06-23 15:28:27</column>
            <column name="report_timestamp">1277320000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">767bb85</column>
            <column name="commit_timestamp">1277770000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/BindingScope.java
org.aspectj.matcher/src/org/aspectj/weaver/patterns/IScope.java
org.aspectj.matcher/src/org/aspectj/weaver/patterns/SimpleScope.java
org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildTypePattern.java
org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/PatternsTests.java
org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/SimpleScopeTests.java
org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/TypePatternTestCase.java</column>
            <column name="result">2:org.aspectj.matcher/src/org/aspectj/weaver/patterns/SimpleScope.java
16:org.aspectj.matcher/src/org/aspectj/weaver/patterns/IScope.java
19:org.aspectj.matcher/src/org/aspectj/weaver/BindingScope.java
47:org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildTypePattern.java
224:org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/TypePatternTestCase.java
1202:org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/PatternsTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">75</column>
            <column name="bug_id">317139</column>
            <column name="summary">Bug 317139  NullPointerException during weaving</column>
            <column name="description"></column>
            <column name="report_time">2010-06-17 01:50:24</column>
            <column name="report_timestamp">1276750000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">92a52a2</column>
            <column name="commit_timestamp">1277770000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</column>
            <column name="result">40:weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">76</column>
            <column name="bug_id">314766</column>
            <column name="summary">Bug 314766  NPE when using aop.xml for compile time config</column>
            <column name="description">Reported on the list:

java.lang.NullPointerException
at org.aspectj.weaver.bcel.BcelWorld.isAspectIncluded(BcelWorld.java:942)
at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:80)
at org.aspectj.weaver.Advice.match(Advice.java:106)
at org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:149)
at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:3108)
at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2562)</column>
            <column name="report_time">2010-05-27 15:47:56</column>
            <column name="report_timestamp">1274990000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0e5ecd3</column>
            <column name="commit_timestamp">1274990000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/Advice.java</column>
            <column name="result">234:org.aspectj.matcher/src/org/aspectj/weaver/Advice.java</column>
        </table>
        <table name="aspectj">
            <column name="id">77</column>
            <column name="bug_id">314130</column>
            <column name="summary">Bug 314130  [plan] [ltw] [hcr] LTW, Reweaving and Hot Code Replace changes reflected every two saves of files</column>
            <column name="description"></column>
            <column name="report_time">2010-05-24 11:53:33</column>
            <column name="report_timestamp">1274720000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">cf0ee0c</column>
            <column name="commit_timestamp">1274910000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java
weaver/src/org/aspectj/weaver/bcel/BcelWorld.java
weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</column>
            <column name="result">17:weaver/src/org/aspectj/weaver/bcel/BcelWorld.java
39:weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java
63:weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</column>
        </table>
        <table name="aspectj">
            <column name="id">78</column>
            <column name="bug_id">314365</column>
            <column name="summary">Bug 314365  pointcut rewriter can have issues for large hashcode values</column>
            <column name="description">AJDT uses a pointcut like this:

(persingleton(org.eclipse.ajdt.internal.ui.ras.UIFFDC) &amp;&amp; ((handler(java.lang.Throwable+) &amp;&amp; args(arg1)) &amp;&amp; ((within(org.eclipse.ajdt..*) &amp;&amp; (!within(org.eclipse.ajdt.internal.ui.lazystart..*) &amp;&amp; (!within(org.eclipse.ajdt.internal.ui.dialogs.OpenTypeSelectionDialog2) &amp;&amp; !(within(org.eclipse.ajdt.internal.ui.editor.AspectJBreakpointRulerAction) &amp;&amp; handler(org.eclipse.jface.text.BadLocationException))))) &amp;&amp; (!(within(org.eclipse.ajdt.core.ras.FFDC+) || handler(org.eclipse.core.runtime.OperationCanceledException)) &amp;&amp; !this(java.lang.Object)))))

After the pointcut rewriter has chewed on it, it is reduced to a normal form.  This is meant to be a stable form such that further rewrites of it would not change it.  This turned out not to be the case.  The hashcodes for some of the components were quite large and manifested as negative integers.  The arithmetic in the comparator for the elements would have a problem and give unhelpful responses.  For example, if the elements were C,B,A it might rewrite them to A,B,C but on a subsequent rewrite it would realise that C was less than A, giving B,C,A.  Whether it went wrong was dependent on the order in which the elements were collected by the rewriter.

This is now fixed.  It impacts incremental compilation sometimes as two pointcuts that should be identical look different because one has been through the rewritter more times than the other...</column>
            <column name="report_time">2010-05-25 17:32:47</column>
            <column name="report_timestamp">1274820000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">1e28b92</column>
            <column name="commit_timestamp">1274830000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java
org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/PointcutRewriterTest.java</column>
            <column name="result">63:org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/PointcutRewriterTest.java
311:org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java</column>
        </table>
        <table name="aspectj">
            <column name="id">79</column>
            <column name="bug_id">311910</column>
            <column name="summary">Bug 311910  AspectJ internal Compiler Error</column>
            <column name="description">Stack Trace:
java.lang.NullPointerException
at org.aspectj.weaver.model.AsmRelationshipProvider.createSourceLocation(AsmRelationshipProvider.java:303)
at org.aspectj.weaver.model.AsmRelationshipProvider.addPointcuts(AsmRelationshipProvider.java:580)
at org.aspectj.weaver.model.AsmRelationshipProvider.createHierarchyForBinaryAspect(AsmRelationshipProvider.java:562)
at org.aspectj.weaver.model.AsmRelationshipProvider.addAdvisedRelationship(AsmRelations ...       ARETURN
  end public Object run(Object[])
end public class com.cerner.isis.biz.services.asclepius.patient.PatientManagerImplTest$AjcClosure3


Happening when weaving a jar with a aspect jar.</column>
            <column name="report_time">2010-05-06 11:22:11</column>
            <column name="report_timestamp">1273160000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3be69a2</column>
            <column name="commit_timestamp">1273160000</column>
            <column name="files">weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java</column>
        </table>
        <table name="aspectj">
            <column name="id">80</column>
            <column name="bug_id">310144</column>
            <column name="summary">Bug 310144  java.lang.RuntimeException at AsmManager.java:1143</column>
            <column name="description">Build Identifier: Eclipse AspectJ Development Tools  Version: 2.0.3.e35x-20100419-1200 AspectJ version: 1.6.9.20100416110000

java.lang.RuntimeException
at org.aspectj.asm.AsmManager.removeSingleNode(AsmManager.java:1143)
at org.aspectj.asm.AsmManager.removeRelationshipsTargettingThisType(AsmManager.java:798)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1173)
at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:455)
at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter. ...  for handle =xstm/stm&lt;com.argilsoft.xstm.core{TKeyed.java[TKeyed[Visitor?field-set(java.util.ArrayList com.argilsoft.xstm.core.Visitor._continueStack)

Reproducible: Sometimes

Steps to Reproduce:
Random exception popup in Eclipse</column>
            <column name="report_time">2010-04-22 12:18:39</column>
            <column name="report_timestamp">1271950000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">728ecb8</column>
            <column name="commit_timestamp">1272570000</column>
            <column name="files">asm/src/org/aspectj/asm/AsmManager.java</column>
            <column name="result">1:asm/src/org/aspectj/asm/AsmManager.java</column>
        </table>
        <table name="aspectj">
            <column name="id">81</column>
            <column name="bug_id">310704</column>
            <column name="summary">Bug 310704  Bug in ProgramElement.getCorrespondingType()</column>
            <column name="description">Here is the code for the method:

	public String getCorrespondingType(boolean getFullyQualifiedType) {
		String returnType = (String) kvpairs.get(&quot;returnType&quot;);
		if (returnType == null)
			returnType = &quot;&quot;;
		if (getFullyQualifiedType) {
			return returnType;
		}
		int index = returnType.lastIndexOf(&quot;.&quot;);
		if (index != -1) {
			return returnType.substring(index);
		}
		return returnType;
	}

the line:
return returnType.substring(index);
should be using 'index+1'</column>
            <column name="report_time">2010-04-27 15:59:36</column>
            <column name="report_timestamp">1272400000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a502da8</column>
            <column name="commit_timestamp">1272420000</column>
            <column name="files">asm/src/org/aspectj/asm/internal/ProgramElement.java</column>
            <column name="result">1:asm/src/org/aspectj/asm/internal/ProgramElement.java</column>
        </table>
        <table name="aspectj">
            <column name="id">82</column>
            <column name="bug_id">309402</column>
            <column name="summary">Bug 309402  Changes to Main.java</column>
            <column name="description">In order to get the AJDT ant integration working, we need a small change to Main.java.

We need to be able to pass in a custom org.aspectj.bridge.ICommand object.  Currently, the ICommand object is created via reflection.

Here is my suggestion:

1. augment the ICommand local variable to being a field
2. add a setter for this field
3. change this:
ICommand command = ReflectionFactory.makeCommand(commandName, holder);
to this:
if (command != null)
  command = ReflectionFactory.makeCommand(commandName, holder);</column>
            <column name="report_time">2010-04-15 19:09:23</column>
            <column name="report_timestamp">1271370000</column>
            <column name="status">verified fixed</column>
            <column name="commit">b21eb05</column>
            <column name="commit_timestamp">1271430000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java</column>
            <column name="result">3:org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java</column>
        </table>
        <table name="aspectj">
            <column name="id">83</column>
            <column name="bug_id">308386</column>
            <column name="summary">Bug 308386  NPE when hasfield evaluating with annotations and there is an unresolved import</column>
            <column name="description">hasfield/hasmethod can cause early matching - before the weaving process kicks in properly.  For a 'normal' compile error, like an unresolvable import, the error is put out before the weaving process kicks off.  However hasfield/hasmethod happening early causes an NPE to occur before the error is put out.

A guard for the NPE (which occurs in EclipseResolvedMember.getAnnotationTypes()) addresses this problem and allows the real error to come out.</column>
            <column name="report_time">2010-04-07 15:15:51</column>
            <column name="report_timestamp">1270670000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">94d0a4e</column>
            <column name="commit_timestamp">1270670000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseResolvedMember.java</column>
            <column name="result">2:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseResolvedMember.java</column>
        </table>
        <table name="aspectj">
            <column name="id">84</column>
            <column name="bug_id">291206</column>
            <column name="summary">Bug 291206  Allow declare error &amp; declare warning to support type expressions</column>
            <column name="description"></column>
            <column name="report_time">2009-10-02 11:01:11</column>
            <column name="report_timestamp">1254500000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9241e2e</column>
            <column name="commit_timestamp">1270510000</column>
            <column name="files">tests/bugs169/pr291206/One.java
tests/bugs169/pr291206/Three.java
tests/bugs169/pr291206/Two.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">85</column>
            <column name="bug_id">308093</column>
            <column name="summary">Bug 308093  incremental build problem when mixing up ITDs and declare parents</column>
            <column name="description">reported by Rod Johnson.  He had a sophisticated aspect doing a mix of ITDs and declare parents.  On doing an incremental build he was receiving errors that looked like the declare parents hadn't applied on the secondary build.

What was actually happening is that when a class file was brought in as a BinaryTypeBinding, the existing World representation wasn't being cleaned up properly.  Without the cleanup the declare parents thought it was still in effect, but it was not.  With proper cleanup the declare parents applies on the secondary build and all is well. Change is in AjLookupEnviroment.weaveInterTypeDeclarations where the onType.clearInterTypeMungers() must be paired with an onType.ensureConsistent() call.</column>
            <column name="report_time">2010-04-05 14:16:02</column>
            <column name="report_timestamp">1270490000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">4b43dc6</column>
            <column name="commit_timestamp">1270490000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</column>
            <column name="result">2:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</column>
        </table>
        <table name="aspectj">
            <column name="id">86</column>
            <column name="bug_id">305788</column>
            <column name="summary">Bug 305788  Exception was thrown when I saved a file in Eclipse</column>
            <column name="description">Build Identifier: SpringSource STS 2.3.1

java.util.ConcurrentModificationException
at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
at java.util.HashMap$KeyIterator.next(HashMap.java:828)
at org.aspectj.asm.internal.AspectJElementHierarchy.updateHandleMap(AspectJElementHierarchy.java:594)
at org.aspectj.asm.AsmManager.removeStructureModelForFiles(AsmManager.java:564)
at org.aspectj.asm.AsmManager.processDelta(AsmManager.java:639)
at org.aspectj.ajdt.internal.core ... un(AutoBuildJob.java:238)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

Compile error: ConcurrentModificationException thrown: null

Reproducible: Always

Steps to Reproduce:
1.Generate an abstract class using Spring roo
2. Edit that file within Eclipse/STS to add JPA annotations
3.Click on the save icon to save the file - Exceptions box pops up</column>
            <column name="report_time">2010-03-13 20:52:59</column>
            <column name="report_timestamp">1268530000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">749078d</column>
            <column name="commit_timestamp">1269350000</column>
            <column name="files">asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</column>
            <column name="result">1:asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</column>
        </table>
        <table name="aspectj">
            <column name="id">87</column>
            <column name="bug_id">298786</column>
            <column name="summary">Bug 298786  suspected problem with handling of multiple aop.xml files</column>
            <column name="description"></column>
            <column name="report_time">2010-01-04 13:27:42</column>
            <column name="report_timestamp">1262630000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a968890</column>
            <column name="commit_timestamp">1262650000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</column>
            <column name="result">2:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</column>
        </table>
        <table name="aspectj">
            <column name="id">88</column>
            <column name="bug_id">297013</column>
            <column name="summary">Bug 297013  Unclosed stream in AjAttribute</column>
            <column name="description"></column>
            <column name="report_time">2009-12-06 04:06:10</column>
            <column name="report_timestamp">1260090000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">28fb861</column>
            <column name="commit_timestamp">1260990000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/AjAttribute.java</column>
            <column name="result">1:org.aspectj.matcher/src/org/aspectj/weaver/AjAttribute.java</column>
        </table>
        <table name="aspectj">
            <column name="id">89</column>
            <column name="bug_id">120375</column>
            <column name="summary">Bug 120375  Support Load-Time Weaving and HotSwap</column>
            <column name="description"></column>
            <column name="report_time">2005-12-12 10:43:11</column>
            <column name="report_timestamp">1134400000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">19355dd</column>
            <column name="commit_timestamp">1258660000</column>
            <column name="files">loadtime5/java5-src/org/aspectj/weaver/loadtime/ClassPreProcessorAgentAdapter.java</column>
            <column name="result">1:loadtime5/java5-src/org/aspectj/weaver/loadtime/ClassPreProcessorAgentAdapter.java</column>
        </table>
        <table name="aspectj">
            <column name="id">90</column>
            <column name="bug_id">293457</column>
            <column name="summary">Bug 293457  NPE on multiple declare @methods</column>
            <column name="description"></column>
            <column name="report_time">2009-10-27 11:24:31</column>
            <column name="report_timestamp">1256660000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">dc53b77</column>
            <column name="commit_timestamp">1258650000</column>
            <column name="files">tests/bugs167/pr293457/org/springmodules/cache/annotations/Cacheable.java
tests/src/org/aspectj/systemtest/ajc167/Ajc167Tests.java
tests/src/org/aspectj/systemtest/ajc167/IntertypeTests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">91</column>
            <column name="bug_id">293351</column>
            <column name="summary">Bug 293351  RuntimeException weaving roo app with advice based on execution pointcut</column>
            <column name="description">java.lang.RuntimeException
at org.aspectj.weaver.ResolvedType.getAnnotations(ResolvedType.java:718)
at org.aspectj.weaver.AbstractAnnotationAJ.retrieveAnnotationOnAnnotation(AbstractAnnotationAJ.java:123)
at org.aspectj.weaver.AbstractAnnotationAJ.ensureAtTargetInitialized(AbstractAnnotationAJ.java:85)
at org.aspectj.weaver.AbstractAnnotationAJ.specifiesTarget(AbstractAnnotationAJ.java:115)
at org.aspectj.weaver.bcel.BcelWeaver.verifyTa ... .eclipse.core.internal.jobs.Worker.run(Worker.java:55)

Compile error: RuntimeException thrown: ResolvedType.getAnnotations() should never be called</column>
            <column name="report_time">2009-10-26 14:19:20</column>
            <column name="report_timestamp">1256580000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a23c7e4</column>
            <column name="commit_timestamp">1256650000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java</column>
            <column name="result">351:org.aspectj.matcher/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java</column>
        </table>
        <table name="aspectj">
            <column name="id">92</column>
            <column name="bug_id">279298</column>
            <column name="summary">Bug 279298  AspectJ LTW with Cobertura</column>
            <column name="description"></column>
            <column name="report_time">2009-06-05 14:02:54</column>
            <column name="report_timestamp">1244230000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">35a9649</column>
            <column name="commit_timestamp">1256250000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</column>
            <column name="result">40:weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</column>
        </table>
        <table name="aspectj">
            <column name="id">93</column>
            <column name="bug_id">289818</column>
            <column name="summary">Bug 289818  Unclosed stream in org.aspectj.weaver.bcel.ExtensibleURLClassLoader</column>
            <column name="description"></column>
            <column name="report_time">2009-09-18 04:31:21</column>
            <column name="report_timestamp">1253260000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">4d200d1</column>
            <column name="commit_timestamp">1253320000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/ExtensibleURLClassLoader.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/bcel/ExtensibleURLClassLoader.java</column>
        </table>
        <table name="aspectj">
            <column name="id">94</column>
            <column name="bug_id">289816</column>
            <column name="summary">Bug 289816  Potentially unclosed stream in org.aspectj.weaver.bcel.BcelWorld</column>
            <column name="description"></column>
            <column name="report_time">2009-09-18 04:23:05</column>
            <column name="report_timestamp">1253260000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">67ffda8</column>
            <column name="commit_timestamp">1253320000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</column>
        </table>
        <table name="aspectj">
            <column name="id">95</column>
            <column name="bug_id">288198</column>
            <column name="summary">Bug 288198  LangUtils JVM version detection cannot handle Java 7</column>
            <column name="description">User-Agent:       Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-GB; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2
Build Identifier: 1.6.4

The JVM detection in LangUtils is currently unable to handle Java7, whilst this is naturally an unreleased version of the JVM, the fix is trivial.

Reproducible: Always

Steps to Reproduce:
Attempt to use the LangUtils java version support on java7</column>
            <column name="report_time">2009-08-31 21:09:33</column>
            <column name="report_timestamp">1251770000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b29f839</column>
            <column name="commit_timestamp">1252080000</column>
            <column name="files">util/src/org/aspectj/util/LangUtil.java</column>
            <column name="result">4:util/src/org/aspectj/util/LangUtil.java</column>
        </table>
        <table name="aspectj">
            <column name="id">96</column>
            <column name="bug_id">288505</column>
            <column name="summary">Bug 288505  failure to close inputstream</column>
            <column name="description"></column>
            <column name="report_time">2009-09-03 12:17:03</column>
            <column name="report_timestamp">1251990000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3d3d03b</column>
            <column name="commit_timestamp">1251990000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/Lint.java</column>
            <column name="result">10:org.aspectj.matcher/src/org/aspectj/weaver/Lint.java</column>
        </table>
        <table name="aspectj">
            <column name="id">97</column>
            <column name="bug_id">287315</column>
            <column name="summary">Bug 287315  NPE using declare @type</column>
            <column name="description">reported by Ramnivas:

java.lang.NullPointerException
        at 
org.aspectj.weaver.bcel.BcelObjectType.hasAnnotation(BcelObjectType.java:558)
        at 
org.aspectj.weaver.ReferenceType.hasAnnotation(ReferenceType.java:161)
        at 
org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:101)
        at 
org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:94)
        at 
org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly(TypePattern.java:513)
        at 
org.aspectj.weaver.patterns.TypePattern.matchesStatically(TypePattern.java:129)
        at 
org.aspectj.weaver.patterns.DeclareAnnotation.matches(DeclareAnnotation.java:269)
        at 
org.aspectj.weaver.bcel.BcelWeaver.applyDeclareAtType(BcelWeaver.java:1590)</column>
            <column name="report_time">2009-08-21 11:30:34</column>
            <column name="report_timestamp">1250870000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b664969</column>
            <column name="commit_timestamp">1251140000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</column>
            <column name="result">5:weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">98</column>
            <column name="bug_id">285172</column>
            <column name="summary">Bug 285172  Sometimes when load-time weaving there will be two ReferenceType objects for the same type</column>
            <column name="description">Seen by Ramnivas.

A pointcut uses an exact type name for an annotation

execution(* (@Controller *..*).*(..))

Resolving this pointcut causes us to construct a ReferenceType for 'Controller'.  Then we attempt to populate it by loading the class implementation.  This recurses back into the weaver as Controller is loaded and an attempt is made to weave it.  This takes a second route through the weaver to build a referencetype again and this second referencetype is cached in the world.  When we unwind, we continue building the original referencetype and are left with one in the cache and the one resolved for the pointcut.  Due to the use of == for comparison, we fail to match on join points later because they will use the ReferenceType from the cache.</column>
            <column name="report_time">2009-07-30 11:00:41</column>
            <column name="report_timestamp">1248970000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">dd7d879</column>
            <column name="commit_timestamp">1248970000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/World.java</column>
            <column name="result">23:org.aspectj.matcher/src/org/aspectj/weaver/World.java</column>
        </table>
        <table name="aspectj">
            <column name="id">99</column>
            <column name="bug_id">280783</column>
            <column name="summary">Bug 280783  JavaDocRunner fails on System.setSecurityManager in Netbeans</column>
            <column name="description"></column>
            <column name="report_time">2009-06-18 10:48:34</column>
            <column name="report_timestamp">1245340000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">59d5c3b</column>
            <column name="commit_timestamp">1245350000</column>
            <column name="files">ajdoc/src/org/aspectj/tools/ajdoc/JavadocRunner.java</column>
            <column name="result">1:ajdoc/src/org/aspectj/tools/ajdoc/JavadocRunner.java</column>
        </table>
        <table name="aspectj">
            <column name="id">100</column>
            <column name="bug_id">279120</column>
            <column name="summary">Bug 279120  NPE determining annotation target kind during weaving</column>
            <column name="description">reported on the list:

Hi,

 

I am using aspectj LTW (aspectjweaver-1.6.1) for weaving an aspect available in another jar within my web application code.

 

While building the jar which contains the aspect, using maven, I have JUnits which run without any problems using LTW.

 

My aspect code looks as below

      @Around(&quot;execution (@com.arisglobal.aglite.annotations.OperationTrail public * *(..)) &amp;&amp; this(executor)&quot;)

      public Object auditOperation(ProceedingJoinPoint thisJoinPoint,

                  Object executor) {

            ...

... aspect code

...

            }

 

However when I deploy the application in tomcat (with javaagent:aspectjweaver-1.6.1.jar option), I get a NPE which I have pasted below.

 

Jun 4, 2009 12:06:18 PM org.aspectj.weaver.tools.Jdk14Trace error

SEVERE: com/arisglobal/aglite/services/actiontrail/ActionTrailAspect

java.lang.NullPointerException

        at org.aspectj.weaver.bcel.BcelObjectType.getAnnotationTargetKinds(BcelO

bjectType.java:612)

        at org.aspectj.weaver.ReferenceType.getAnnotationTargetKinds(ReferenceTy

pe.java:265)

        at org.aspectj.weaver.patterns.SignaturePattern.checkForIncorrectTargetK

ind(SignaturePattern.java:112)

        at org.aspectj.weaver.patterns.SignaturePattern.checkForIncorrectTargetK

ind(SignaturePattern.java:94)

        at org.aspectj.weaver.patterns.SignaturePattern.resolveBindings(Signatur

ePattern.java:87)

        at org.aspectj.weaver.patterns.KindedPointcut.resolveBindings(KindedPoin

tcut.java:262)

        at org.aspectj.weaver.patterns.AndPointcut.resolveBindings(AndPointcut.j

ava:75)

        at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:196)

        at org.aspectj.weaver.bcel.AtAjAttributes.handleAroundAnnotation(AtAjAtt

ributes.java:1308)

        at org.aspectj.weaver.bcel.AtAjAttributes.readAj5MethodAttributes(AtAjAt

tributes.java:403)

        at org.aspectj.weaver.bcel.BcelMethod.unpackAjAttributes(BcelMethod.java

:189)

        at org.aspectj.weaver.bcel.BcelMethod.&lt;init&gt;(BcelMethod.java:96)

        at org.aspectj.weaver.bcel.BcelObjectType.getDeclaredMethods(BcelObjectT

ype.java:264)

        at org.aspectj.weaver.bcel.LazyClassGen.&lt;init&gt;(LazyClassGen.java:303)

        at org.aspectj.weaver.bcel.BcelObjectType.getLazyClassGen(BcelObjectType

.java:524)

        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1728)

        at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1

696)

        at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:145

8)

        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1244)

        at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.

java:423)

        at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.jav

a:286)

        at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:95)

        at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(C

lassPreProcessorAgentAdapter.java:52)

        at sun.instrument.TransformerManager.transform(TransformerManager.java:1

22)

        at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java

:155)

        at java.lang.ClassLoader.defineClass1(Native Method)

        at java.lang.ClassLoader.defineClass(ClassLoader.java:620)

 

I also tried using aspectjweaver-1.6.4 version however got the same error.</column>
            <column name="report_time">2009-06-04 11:10:13</column>
            <column name="report_timestamp">1244130000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3417cbe</column>
            <column name="commit_timestamp">1244130000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</column>
            <column name="result">21:weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">101</column>
            <column name="bug_id">274986</column>
            <column name="summary">Bug 274986  DocumentParser incorrectly caches DTD InputStream</column>
            <column name="description">Build ID: 1.6.3

Steps To Reproduce:
Attempt to parse two aop.xml files using two DocumentParsers that are loaded by the same class loader. If the DTD is loaded from a JAR file you'll get an NPE at  java.util.zip.Inflater.inflateBytes(Native Method).

More information:
DocumentParser caches the DTD InputStream in a static final field. Many InputStreams are unusable after being closed so the same instance should not be used here. 

For InflaterInputStreams there seems to be a bug in the JRE that prevents the stream from reporting itself as closed when you use it again.</column>
            <column name="report_time">2009-05-05 09:50:07</column>
            <column name="report_timestamp">1241530000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">66235e8</column>
            <column name="commit_timestamp">1241570000</column>
            <column name="files">weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</column>
        </table>
        <table name="aspectj">
            <column name="id">102</column>
            <column name="bug_id">274559</column>
            <column name="summary">Bug 274559  Compile exception when not using debug info</column>
            <column name="description">The following project throws a compiler exception when the project property &quot;Add variable attributes to generated class files&quot; is turned off.</column>
            <column name="report_time">2009-04-30 14:06:37</column>
            <column name="report_timestamp">1241110000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f9578da</column>
            <column name="commit_timestamp">1241130000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</column>
            <column name="result">104:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</column>
        </table>
        <table name="aspectj">
            <column name="id">103</column>
            <column name="bug_id">272591</column>
            <column name="summary">Bug 272591  [WARNING] couldn't find aspectjrt.jar on classpath</column>
            <column name="description">I am using the aspectj runtime jar that is in the spring source bundle repository.  The have renamed their jar to match their naming conventions and it is causing the warning to occur.  Their bundle is named com.springsource.org.aspectj.runtime-1.6.3.RELEASE.jar.  It would be nice if this warning was not printed out in this case.</column>
            <column name="report_time">2009-04-16 18:32:15</column>
            <column name="report_timestamp">1239920000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">1b663a9</column>
            <column name="commit_timestamp">1241120000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
        </table>
        <table name="aspectj">
            <column name="id">104</column>
            <column name="bug_id">269522</column>
            <column name="summary">Bug 269522  [handles] Cross reference view and markers mix up joinpoints assigned to advice</column>
            <column name="description">Build ID: M20090211-1700

Steps To Reproduce:
I have two pieces of after advice in my aspect.  

In the cross reference view I see all of the joinpoints for both after advice selecting one of the after advice statements.  When I select the other after advice statement I see no joinpoints.

When I select the marker for either piece of after advice, I see all the joinpoints for both pieces of advice.

1. open and perform a clean compile on the attached project
2. open the xref view
3. select line 22 an note that you see 5 joinpoints (should only be 3)
4. select line 68 and note that you see zero joinpoints (should be 2 here)
5. right click the marker at line 68 and choose &quot;advises&quot; - note you see all 5 joinpoints
6. right click the marker at line 22 and choose &quot;advises&quot; - note you see all 5 joinpoints


More information:</column>
            <column name="report_time">2009-03-20 10:24:07</column>
            <column name="report_timestamp">1237560000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6dbb5f3</column>
            <column name="commit_timestamp">1238090000</column>
            <column name="files">asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java</column>
            <column name="result">27:asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java</column>
        </table>
        <table name="aspectj">
            <column name="id">105</column>
            <column name="bug_id">270033</column>
            <column name="summary">Bug 270033  [incremental] Incremental compilation with aspects on an incoming classpath/aspectpath</column>
            <column name="description"></column>
            <column name="report_time">2009-03-25 17:20:22</column>
            <column name="report_timestamp">1238020000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b23cc1a</column>
            <column name="commit_timestamp">1238040000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</column>
            <column name="result">2:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</column>
        </table>
        <table name="aspectj">
            <column name="id">106</column>
            <column name="bug_id">269902</column>
            <column name="summary">Bug 269902  NPE in AsmRelationshipProvider.addRelationship</column>
            <column name="description">When doing a clean build of my project, seeing dozens, upwards of 100 of NPEs similar to the following:

java.lang.NullPointerException
at org.aspectj.weaver.model.AsmRelationshipProvider.addRelationship(AsmRelationshipProvider.java:168)
at org.aspectj.weaver.bcel.BcelTypeMunger.munge(BcelTypeMunger.java:124)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:441)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:103)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1732)
at org.aspectj.weaver.b ...  

FWIW, this is seen for Spring-managed auto-injection of beans with the @Configurable annotation.

Official AJDT version is: 1.6.4.20090304172355
Version: 3.4.2
Build id: M20090211-17</column>
            <column name="report_time">2009-03-24 18:39:30</column>
            <column name="report_timestamp">1237930000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d5e900d</column>
            <column name="commit_timestamp">1238030000</column>
            <column name="files">weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java</column>
            <column name="result">3:weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java</column>
        </table>
        <table name="aspectj">
            <column name="id">107</column>
            <column name="bug_id">269912</column>
            <column name="summary">Bug 269912  wasted time building message context when it is only used for command line builds</column>
            <column name="description">The context for a message is created even when AspectJ is used inside AJDT - but the context only ever gets used when printing messages to System.out.  Under AJDT we ought to be able to 'switch it off'</column>
            <column name="report_time">2009-03-24 19:25:29</column>
            <column name="report_timestamp">1237940000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">c732808</column>
            <column name="commit_timestamp">1238000000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</column>
            <column name="result">2:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
14:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</column>
        </table>
        <table name="aspectj">
            <column name="id">108</column>
            <column name="bug_id">269867</column>
            <column name="summary">Bug 269867  Non synchronized access to WeakHashMap causes infinite loop</column>
            <column name="description">The non synchronized access from AjTypeSystem.getAjType(clazz) to a static instance of WeakHashMap may cause an infinite loop at start up in a multi threaded system. The thread dump shows that 32 of 33 threads of the application stuck in WeakHashMap.get(Object) line 355:

&quot;BundleStarterThreadQcCtrl24&quot; prio=3 tid=0x00957c00 nid=0x39 runnable [0xd42fb000..0xd42ffa70]
   java.lang.Thread.State: RUNNABLE
	at java.util.WeakHashMap.get(WeakHashMap.java:355)
	at org.aspectj.lang.reflect.AjTypeSystem.getAjType(AjTypeSystem.java:37)
	at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.initialize(Java15ReflectionBasedReferenceTypeDelegate.java:66)
	at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.create15Delegate(ReflectionBasedReferenceTypeDelegateFactory.java:56)
	at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:42)
	at org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate(ReflectionWorld.java:111)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:388)
	at org.aspectj.weaver.World.resolve(World.java:279)
	at org.aspectj.weaver.World.resolve(World.java:199)
	at org.aspectj.weaver.World.resolve(World.java:348)
	at org.aspectj.weaver.reflect.ReflectionWorld.resolve(ReflectionWorld.java:103)
	at org.aspectj.weaver.reflect.ReflectionWorld.resolve(ReflectionWorld.java:93)
	at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.toResolvedTypeArray(ReflectionBasedReferenceTypeDelegateFactory.java:214)
	at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createResolvedMethod(ReflectionBasedReferenceTypeDelegateFactory.java:107)
	at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createResolvedMember(ReflectionBasedReferenceTypeDelegateFactory.java:98)
	at org.aspectj.weaver.reflect.ReflectionShadow.makeExecutionShadow(ReflectionShadow.java:53)
	at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesExecution(PointcutExpressionImpl.java:100)
	at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesMethodExecution(PointcutExpressionImpl.java:92)
	at org.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch(AspectJExpressionPointcut.java:370)</column>
            <column name="report_time">2009-03-24 14:16:04</column>
            <column name="report_timestamp">1237920000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">752f895</column>
            <column name="commit_timestamp">1237930000</column>
            <column name="files">aspectj5rt/java5-src/org/aspectj/lang/reflect/AjTypeSystem.java</column>
            <column name="result">74:aspectj5rt/java5-src/org/aspectj/lang/reflect/AjTypeSystem.java</column>
        </table>
        <table name="aspectj">
            <column name="id">109</column>
            <column name="bug_id">269840</column>
            <column name="summary">Bug 269840  [model] package search fails in binary aspect in same package as a source type</column>
            <column name="description">If type a.b.c.C is advised by an aspect a.b.c.X from the aspectpath the model search logic breaks for finding 'X' because it hits the package node for a.b.c and stops looking</column>
            <column name="report_time">2009-03-24 12:07:29</column>
            <column name="report_timestamp">1237910000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7a7d6f0</column>
            <column name="commit_timestamp">1237910000</column>
            <column name="files">asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</column>
            <column name="result">3:asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</column>
        </table>
        <table name="aspectj">
            <column name="id">110</column>
            <column name="bug_id">269578</column>
            <column name="summary">Bug 269578  Resource deletion in source folder on full build when source and output folders are the same.</column>
            <column name="description">On the clean before a full aspectj build resources are removed from the output folder.  This is true even when the output and the source folder are the same.  In this case, the resources are deleted from the source folder!

When the source and output folders are the same, resources should never be deleted.</column>
            <column name="report_time">2009-03-20 17:01:10</column>
            <column name="report_timestamp">1237580000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5c49c0b</column>
            <column name="commit_timestamp">1237600000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</column>
            <column name="result">4:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
16:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</column>
        </table>
        <table name="aspectj">
            <column name="id">111</column>
            <column name="bug_id">266996</column>
            <column name="summary">Bug 266996  AspectJElementHierarchy.java:427 NullPointerException</column>
            <column name="description">Since an recent update to eclipse I get errors when using ajdt compile time weaving. Single used aspect is @Configurable from spring 2.5.6. I call this critical because my application wont run without that aspect compiled in.

When doing a build two popups &quot;AspectJ Internal Compiler Error&quot; are showing up with instructions to look for and post bugreports.


1st popup:
--------------------------------
java.lang.NullPointerException
at org.aspectj.asm.internal.AspectJElementHierarchy.findCloserMatchForLineNumber(AspectJElementHierarchy.java:427)
at org.aspectj.weaver.model.AsmRelationshipProvider.addRelationship(AsmRelationshipProvider.java:130)
at org.aspectj.weaver.bcel.BcelTypeMunger.munge(BcelTypeMunger.java:124)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:441)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave( ... 
end abstract interface org.springframework.beans.factory.aspectj.AbstractInterfaceDrivenDependencyInjectionAspect$ConfigurableDeserializationSupport
--------------------------------


2nd popup
--------------------------------
java.lang.NullPointerException
at org.aspectj.asm.internal.AspectJElementHierarchy.findCloserMatchForLineNumber(AspectJElementHierarchy.java:427)
at org.aspectj.weaver.model.AsmRelationshipProvider.addRelationship(AsmRelationshipProvider.java:130)
at org.aspectj.weaver.bcel.BcelTypeMunger.munge(BcelTypeMunger.java:124)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:441)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave( ... ibatis/domain/Banf;)I
                    IRETURN
  end public volatile int compareTo(Object)
end public class de.synaix.k070_Banf.ibatis.domain.Banf
--------------------------------


Output of AJDT Event trace window:
--------------------------------
11:21:34 Removed problems and tasks for project SOME_webapp
11:21:34 Builder: Tidied output folder(s), removed class files and derived resources
11:21:35 Timer event: 1ms: Delete markers: SOME_webapp (Finished deleting markers for SOME_webapp
11:21:38 Compiler configuration for project SOME_webapp doesn't know previous state, so assuming EVERYTHING has changed.
11:21:38 ===========================================================================================
11:21:38 Build kind = FULLBUILD
11:21:38 Project=SOME_webapp, kind of build requested=Full AspectJ compilation
11:21:38 Builder: Tidied output folder(s), removed class files and derived resources
11:21:38 Timer event: 442ms: Pre compile
11:21:38 Compiler configuration for project SOME_webapp has been read by compiler.  Resetting.
11:21:38      Configuration was [PROJECTSOURCEFILES_CHANGED, JAVAOPTIONS_CHANGED, ASPECTPATH_CHANGED, CLASSPATH_CHANGED, INPATH_CHANGED, NONSTANDARDOPTIONS_CHANGED, OUTJAR_CHANGED, PROJECTSOURCERESOURCES_CHANGED, OUTPUTDESTINATIONS_CHANGED, INJARS_CHANGED]
11:21:38 Resetting list of modified source files.  Was null
11:21:38 Preparing for build: not going to be incremental because no successful previous full build
11:21:40 Timer event: 1252ms: Time to first compiled message
11:21:40 Timer event: 1276ms: Time to first woven message
11:21:45 AspectJ reports build successful, build was: FULL
11:21:45 AJDE Callback: finish. Was full build: true
11:21:45 Timer event: 6456ms: Total time spent in AJDE
11:21:45 Timer event: 157ms: Refresh after build
11:21:45 Types affected during build = 308
11:21:45 Crosscutting model sanity checked with no problems
11:21:45 Timer event: 0ms: Post compile
11:21:45 Timer event: 7248ms: Total time spent in AJBuilder.build()
11:21:45 Timer event: 2ms: Delete markers: SOME_webapp (Finished deleting markers for SOME_webapp)
11:21:45 Timer event: 179ms: Create markers: SOME_webapp (Finished creating markers for SOME_webapp)
--------------------------------</column>
            <column name="report_time">2009-03-04 05:49:51</column>
            <column name="report_timestamp">1236160000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2309f7b</column>
            <column name="commit_timestamp">1236190000</column>
            <column name="files">asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</column>
            <column name="result">1:asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</column>
        </table>
        <table name="aspectj">
            <column name="id">112</column>
            <column name="bug_id">266602</column>
            <column name="summary">Bug 266602  Problem with incremental itd compilation</column>
            <column name="description">Reproduceable from Roo code - commenting out a field after a successful build results in this exception. The underlying cause may also apply to ITD methods (and maybe constructors).

org.aspectj.weaver.BCException: Couldn't find ITD init member 'void com.springsource.petclinic.domain.Visit_Roo_Entity_Itd.ajc$interFieldInit$com_springsource_petclinic_domain_Visit_Roo_Entity_Itd$com_springsource_petclinic_domain_Visit$id(com.springsource.petclinic.domain.Visit)' on aspect com.springsource.petclinic.domain.Visit_Roo_Entity_Itd
when type munging with (BcelTypeMunger ResolvedTypeMunger(Field, java.lang.Long com.springsource.petclinic.domain.Visit.id))
when weaving type com.springsource.petclinic.domain.Visit
when weaving classes 
when weaving 
when incrementally building with classpath: C:\temp\petclinic\target\classes;E:/jvms/jdk1.6.0_06/jre/lib/resources.jar;E:/jvms/jdk1.6.0_06/jre/lib/rt.jar;E:/jvms/jdk1.6.0_06/jre/lib/jsse.jar;E:/jvms/jdk1.6.0_06/jre/lib/jce.jar;E:/jvms/jdk1.6.0_06/jre/lib/charsets.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/dnsns.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/localedata.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/sunjce_provider.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/sunmscapi.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/sunpkcs11.jar;C:/Users/Andy/.m2/repository/org/antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-2.7.6.jar;C:/Users/Andy/.m2/repository/com/thoughtworks/xstream/com.springsource.com.thoughtworks.xstream/1.3.0/com.springsource.com.thoughtworks.xstream-1.3.0.jar;C:/Users/Andy/.m2/repository/edu/emory/mathcs/backport/com.springsource.edu.emory.mathcs.backport/3.1.0/com.springsource.edu.emory.mathcs.backport-3.1.0.jar;C:/Users/Andy/.m2/repository/edu/oswego/cs/concurrent/com.springsource.edu.oswego.cs.dl.util.concurrent/1.3.4/com.springsource.edu.oswego.cs.dl.util.concurrent-1.3.4.jar;C:/Users/Andy/.m2/repository/org/jboss/javassist/com.springsource.javassist/3.3.0.ga/com.springsource.javassist-3.3.0.ga.jar;C:/Users/Andy/.m2/repository/javax/annotation/com.springsource.javax.annotation/1.0.0/com.springsource.javax.annotation-1.0.0.jar;C:/Users/Andy/.m2/repository/javax/persistence/com.springsource.javax.persistence/1.0.0/com.springsource.javax.persistence-1.0.0.jar;C:/Users/Andy/.m2/repository/javax/servlet/com.springsource.javax.servlet/2.4.0/com.springsource.javax.servlet-2.4.0.jar;C:/Users/Andy/.m2/repository/javax/servlet/com.springsource.javax.servlet.jsp.jstl/1.2.0/com.springsource.javax.servlet.jsp.jstl-1.2.0.jar;C:/Users/Andy/.m2/repository/javax/transaction/com.springsource.javax.transaction/1.1.0/com.springsource.javax.transaction-1.1.0.jar;C:/Users/Andy/.m2/repository/net/sourceforge/cglib/com.springsource.net.sf.cglib/2.1.3/com.springsource.net.sf.cglib-2.1.3.jar;C:/Users/Andy/.m2/repository/net/sourceforge/ehcache/com.springsource.net.sf.ehcache/1.4.1/com.springsource.net.sf.ehcache-1.4.1.jar;C:/Users/Andy/.m2/repository/net/sourceforge/jsr107cache/com.springsource.net.sf.jsr107cache/1.0.0/com.springsource.net.sf.jsr107cache-1.0.0.jar;C:/Users/Andy/.m2/repository/org/antlr/com.springsource.org.antlr/3.0.1/com.springsource.org.antlr-3.0.1.jar;C:/Users/Andy/.m2/repository/org/aopalliance/com.springsource.org.aopalliance/1.0.0/com.springsource.org.aopalliance-1.0.0.jar;C:/Users/Andy/.m2/repository/org/apache/commons/com.springsource.org.apache.commons.collections/3.2.0/com.springsource.org.apache.commons.collections-3.2.0.jar;C:/Users/Andy/.m2/repository/org/apache/commons/com.springsource.org.apache.commons.dbcp/1.2.2.osgi/com.springsource.org.apache.commons.dbcp-1.2.2.osgi.jar;C:/Users/Andy/.m2/repository/org/apache/commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-1.1.1.jar;C:/Users/Andy/.m2/repository/org/apache/commons/com.springsource.org.apache.commons.pool/1.3.0/com.springsource.org.apache.commons.pool-1.3.0.jar;C:/Users/Andy/.m2/repository/org/apache/log4j/com.springsource.org.apache.log4j/1.2.15/com.springsource.org.apache.log4j-1.2.15.jar;C:/Users/Andy/.m2/repository/org/apache/taglibs/com.springsource.org.apache.taglibs.standard/1.1.2/com.springsource.org.apache.taglibs.standard-1.1.2.jar;C:/Users/Andy/.m2/repository/org/aspectj/com.springsource.org.aspectj.runtime/1.6.2.RELEASE/com.springsource.org.aspectj.runtime-1.6.2.RELEASE.jar;C:/Users/Andy/.m2/repository/org/aspectj/com.springsource.org.aspectj.tools/1.6.2.RELEASE/com.springsource.org.aspectj.tools-1.6.2.RELEASE.jar;C:/Users/Andy/.m2/repository/org/aspectj/com.springsource.org.aspectj.weaver/1.6.2.RELEASE/com.springsource.org.aspectj.weaver-1.6.2.RELEASE.jar;C:/Users/Andy/.m2/repository/org/dom4j/com.springsource.org.dom4j/1.6.1/com.springsource.org.dom4j-1.6.1.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate/3.2.6.ga/com.springsource.org.hibernate-3.2.6.ga.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate.annotations/3.3.1.ga/com.springsource.org.hibernate.annotations-3.3.1.ga.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate.annotations.common/3.3.0.ga/com.springsource.org.hibernate.annotations.common-3.3.0.ga.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate.ejb/3.3.2.GA/com.springsource.org.hibernate.ejb-3.3.2.GA.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate.validator/3.0.0.GA/com.springsource.org.hibernate.validator-3.0.0.GA.jar;C:/Users/Andy/.m2/repository/org/hsqldb/com.springsource.org.hsqldb/1.8.0.9/com.springsource.org.hsqldb-1.8.0.9.jar;C:/Users/Andy/.m2/repository/org/jboss/util/com.springsource.org.jboss.util/2.0.4.GA/com.springsource.org.jboss.util-2.0.4.GA.jar;C:/Users/Andy/.m2/repository/org/junit/com.springsource.org.junit/4.4.0/com.springsource.org.junit-4.4.0.jar;C:/Users/Andy/.m2/repository/org/objectweb/asm/com.springsource.org.objectweb.asm/2.2.3/com.springsource.org.objectweb.asm-2.2.3.jar;C:/Users/Andy/.m2/repository/org/objectweb/asm/com.springsource.org.objectweb.asm.attrs/1.5.3/com.springsource.org.objectweb.asm.attrs-1.5.3.jar;C:/Users/Andy/.m2/repository/org/objectweb/asm/com.springsource.org.objectweb.asm.commons/2.2.3/com.springsource.org.objectweb.asm.commons-2.2.3.jar;C:/Users/Andy/.m2/repository/org/xmlpull/com.springsource.org.xmlpull/1.1.3.4-O/com.springsource.org.xmlpull-1.1.3.4-O.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.aop/3.0.0.M1/org.springframework.aop-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.aspects/3.0.0.M1/org.springframework.aspects-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.beans/3.0.0.M1/org.springframework.beans-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.context/3.0.0.M1/org.springframework.context-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.core/3.0.0.M1/org.springframework.core-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.expression/3.0.0.M1/org.springframework.expression-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.jdbc/3.0.0.M1/org.springframework.jdbc-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.orm/3.0.0.M1/org.springframework.orm-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.test/3.0.0.M1/org.springframework.test-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.transaction/3.0.0.M1/org.springframework.transaction-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.web/3.0.0.M1/org.springframework.web-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.web.servlet/3.0.0.M1/org.springframework.web.servlet-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/roo/roo-core/0.2.0-SNAPSHOT/roo-core-0.2.0-SNAPSHOT.jar;F:/eclipse/e342/eclipse/plugins/org.aspectj.runtime_1.6.4.20090205161900/aspectjrt.jar;f:\jvms\jdk1.6.0_06\jre\lib\ext\dnsns.jar;f:\jvms\jdk1.6.0_06\jre\lib\ext\localedata.jar;f:\jvms\jdk1.6.0_06\jre\lib\ext\sunjce_provider.jar;f:\jvms\jdk1.6.0_06\jre\lib\ext\sunmscapi.jar;f:\jvms\jdk1.6.0_06\jre\lib\ext\sunpkcs11.jar;f:\eclipse\e342\eclipse\\plugins\org.eclipse.equinox.launcher_1.0.101.R34x_v20081125.jar;


	at org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewField(BcelTypeMunger.java:1638)

	at org.aspectj.weaver.bcel.BcelTypeMunger.munge(BcelTypeMunger.java:90)

	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:441)

	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:103)

	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1732)

	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1693)

	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1458)

	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1272)

	at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:435)

	at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:371)

	at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:358)

	at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:98)

	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:652)

	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:392)

	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:977)

	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:301)

	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:183)

	at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild(AjdeCoreBuildManager.java:127)

	at org.aspectj.ajde.core.AjCompiler.build(AjCompiler.java:88)

	at org.eclipse.ajdt.core.builder.AJBuilder.build(AJBuilder.java:223)

	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:633)

	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)

	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:170)

	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:201)

	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:253)

	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)

	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:256)

	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:309)

	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:341)

	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:140)

	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:238)

	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)</column>
            <column name="report_time">2009-02-28 16:09:42</column>
            <column name="report_timestamp">1235860000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2f36e7f</column>
            <column name="commit_timestamp">1235970000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
            <column name="result">2:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">113</column>
            <column name="bug_id">264869</column>
            <column name="summary">Bug 264869  AspectJ depends on Class files having a dot in their source file name attribute</column>
            <column name="description">The following code in ShadowMunger$getBinaryFile() (line 169 ff) fails if a class file does not contain a proper source file name:

		if (binaryFile == null) {
			String s = getDeclaringType().getBinaryPath();
			File f = getDeclaringType().getSourceLocation().getSourceFile();
			int i = f.getPath().lastIndexOf('.');
			String path = f.getPath().substring(0, i) + &quot;.class&quot;;
			binaryFile = new File(s + &quot;!&quot; + path);
		}

(there is no '.' in the file name, thus this gives a string index out of bounds error).</column>
            <column name="report_time">2009-02-13 11:54:48</column>
            <column name="report_timestamp">1234540000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9f80317</column>
            <column name="commit_timestamp">1234890000</column>
            <column name="files">org.aspectj.matcher/src/org/aspectj/weaver/ShadowMunger.java</column>
            <column name="result">1:org.aspectj.matcher/src/org/aspectj/weaver/ShadowMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">114</column>
            <column name="bug_id">264563</column>
            <column name="summary">Bug 264563  [handles] Remove trailing '/' from source path handles</column>
            <column name="description"></column>
            <column name="report_time">2009-02-11 13:19:52</column>
            <column name="report_timestamp">1234380000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0af658e</column>
            <column name="commit_timestamp">1234460000</column>
            <column name="files">asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java</column>
            <column name="result">9:asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java</column>
        </table>
        <table name="aspectj">
            <column name="id">115</column>
            <column name="bug_id">263837</column>
            <column name="summary">Bug 263837  Error during Delete AJ Markers</column>
            <column name="description">Error sent through the AJDT mailing list.  I believe this is an LTW weaving error, so not raising it against AJDT.</column>
            <column name="report_time">2009-02-05 13:25:34</column>
            <column name="report_timestamp">1233860000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">1b54b4b</column>
            <column name="commit_timestamp">1233880000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java
weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
            <column name="result">9:weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
11:weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java
39:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">116</column>
            <column name="bug_id">261808</column>
            <column name="summary">Bug 261808  iajc-Ant-Task fails &quot;type already defined&quot;</column>
            <column name="description"></column>
            <column name="report_time">2009-01-21 07:43:15</column>
            <column name="report_timestamp">1232540000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">1da1f7c</column>
            <column name="commit_timestamp">1233380000</column>
            <column name="files">taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</column>
            <column name="result">1:taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</column>
        </table>
        <table name="aspectj">
            <column name="id">117</column>
            <column name="bug_id">260751</column>
            <column name="summary">Bug 260751  java.lang.StringIndexOutOfBoundsException</column>
            <column name="description">ava.lang.StringIndexOutOfBoundsException
at java.lang.String.substring(String.java:1938)
at org.aspectj.ajdt.ajc.ConfigParser.stripWhitespaceAndComments(ConfigParser.java:103)
at org.aspectj.ajdt.ajc.ConfigParser.parseConfigFileHelper(ConfigParser.java:69)
at org.aspectj.ajdt.ajc.ConfigParser.parseImportedConfigFile(ConfigParser.java:224)
at org.aspectj.ajdt.ajc.ConfigParser.parseOneArg(ConfigParser.java:213)
at org.aspectj.ajdt.ajc.ConfigP ... 82)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)</column>
            <column name="report_time">2009-01-12 12:43:06</column>
            <column name="report_timestamp">1231780000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d9bd46d</column>
            <column name="commit_timestamp">1231800000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/ConfigParser.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/ConfigParser.java</column>
        </table>
        <table name="aspectj">
            <column name="id">118</column>
            <column name="bug_id">259528</column>
            <column name="summary">Bug 259528  [incremental] [build] Class with ITD declared on it causes too many full builds</column>
            <column name="description">When there is a structural change to a class that has an ITD on it there is a full build.  This should be an incremental build, but the compiler always drops to a full build.</column>
            <column name="report_time">2008-12-22 16:42:04</column>
            <column name="report_timestamp">1229980000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2b43e63</column>
            <column name="commit_timestamp">1230080000</column>
            <column name="files">tests/multiIncremental/pr259528/base/src/b/IsAdvised.java
tests/multiIncremental/pr259528/inc1/src/b/IsAdvised.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">119</column>
            <column name="bug_id">251326</column>
            <column name="summary">Bug 251326  Anonymous inner classes declare inside an ITD method will cause IllegalAccessError</column>
            <column name="description">If i declare an aspect in pkgB, having an ITD method for a class in pkgA using an inner anonymous class, is created in the pkgA package, package protected, but then instantiated from pkgB causeing the error.

Test case is attached.</column>
            <column name="report_time">2008-10-19 15:53:28</column>
            <column name="report_timestamp">1224450000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f1a83b5</column>
            <column name="commit_timestamp">1228850000</column>
            <column name="files">tests/bugs163/pr251326/pkgA/Listener.java
tests/bugs163/pr251326/pkgA/Target.java
tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</column>
            <column name="result">20:tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">120</column>
            <column name="bug_id">185447</column>
            <column name="summary">Bug 185447  [plan] [ataspectj] Abstract @Aspect causing problems</column>
            <column name="description">Trying to use an abstract @Aspect from a library jar file is causing problems.

In the (soon to be) attached zip of eclipse projects:
* logging-library: defines two abstract trivial logging aspects, one in code-style and one in @AspectJ style.

* sample-system: uses the code-style abstract aspect successfully
* sample-system2: uses the @AspectJ style abstract aspect and won't compile in Eclipse

Exception:
java.lang.NullPointerException
at org.aspectj.weaver.bcel.AtAjAttributes$LazyResolvedPointcutDefinition.getPointcut(AtAjAttributes.java:1632)
at org.aspectj.weaver.ShadowMunger.addChildNodes(ShadowMunger.java:258)
at org.aspectj.weaver.ShadowMunger.createHierarchy(ShadowMunger.java:247)
at org.aspectj.weaver.AsmRelationshipProvider.adviceMunger(AsmRelationshipProvider.java:180)
at org.aspectj.weaver.Shadow.implementMungers(Shadow.java:717)
a ... int;)Ljava/lang/String;
                    ARETURN
  end public Object run(Object[])</column>
            <column name="report_time">2007-05-03 17:18:07</column>
            <column name="report_timestamp">1178230000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">120b47f</column>
            <column name="commit_timestamp">1228170000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java
weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java</column>
            <column name="result">21:weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java
22:weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java</column>
        </table>
        <table name="aspectj">
            <column name="id">121</column>
            <column name="bug_id">256400</column>
            <column name="summary">Bug 256400  An internal error occurred during: &quot;Delete and update AspectJ markers for CoreSource&quot;.</column>
            <column name="description">this occured during a clean and build of the project i'm working on. The following was inthe details.

An internal error occurred during: &quot;Delete and update AspectJ markers for CoreSource&quot;.
java.lang.NullPointerException</column>
            <column name="report_time">2008-11-25 04:51:17</column>
            <column name="report_timestamp">1227610000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">155a888</column>
            <column name="commit_timestamp">1227810000</column>
            <column name="files">asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java</column>
            <column name="result">1085:asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java</column>
        </table>
        <table name="aspectj">
            <column name="id">122</column>
            <column name="bug_id">249710</column>
            <column name="summary">Bug 249710  [compiling] Problem with -XterminateAfterCompilation</column>
            <column name="description"></column>
            <column name="report_time">2008-10-05 18:24:39</column>
            <column name="report_timestamp">1223250000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">cffe291</column>
            <column name="commit_timestamp">1225310000</column>
            <column name="files">tests/bugs163/pr249710/Foo.java
tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">123</column>
            <column name="bug_id">186884</column>
            <column name="summary">Bug 186884  Unhandled Kind of New Exception when have advice for Pointcut call(Throwable+.new(..))</column>
            <column name="description"></column>
            <column name="report_time">2007-05-14 17:02:02</column>
            <column name="report_timestamp">1179180000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7a398a2</column>
            <column name="commit_timestamp">1222820000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result">5:weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
        </table>
        <table name="aspectj">
            <column name="id">124</column>
            <column name="bug_id">192877</column>
            <column name="summary">Bug 192877  [ataspectj] @AspectJ style inter-type declaration causes false compiler error during incremental build</column>
            <column name="description">Build ID: M20070212-1330

Steps To Reproduce:
Use @DeclareParents to introduce a default interface implementation to an existing type.  

A full build compiles cleanly and works as expected.  An incremental build causes the following type of compile error: &quot;The type FooImpl must implement the inherited abstract method Test.methodA()&quot;.  

In this example FooImpl is the class we are introducing a default implementation of the Test interface which defines the method &quot;methodA&quot;.


More information:
See attached zip for a complete set of files to reproduce.

I can repoduce this bug with AJDT 1.4.2.200705221209 for Eclipse 3.2.2 as well as AJDT 1.5RC1 for Eclipse 3.3RC1</column>
            <column name="report_time">2007-06-15 09:57:08</column>
            <column name="report_timestamp">1181920000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9b68a31</column>
            <column name="commit_timestamp">1222810000</column>
            <column name="files">tests/multiIncremental/PR192877/base/src/DefaultTestImpl.java
tests/multiIncremental/PR192877/base/src/Foo.java
tests/multiIncremental/PR192877/base/src/FooImpl.java
tests/multiIncremental/PR192877/base/src/Test.java
tests/multiIncremental/PR192877/base/src/TestAspect.java
tests/multiIncremental/PR192877/inc1/src/Test.java
tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
            <column name="result">13:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">125</column>
            <column name="bug_id">245734</column>
            <column name="summary">Bug 245734  AJDT throws a RuntimeException from EclipseResolvedMember.getAnnotations</column>
            <column name="description">Build ID: N/A

Steps To Reproduce:
This exception is happening for us in both Eclipse 3.4 and 3.3 when we run an incremental build on one of our projects.

We are using an aspect to declare an annotation on a class in the project, and we only started seeing this exception after we added it.  

A clean build on the project never throws the exception, only an incremental build.


More information:
The Exception Stack Trace:

java.lang.RuntimeException
at org.aspectj.ajdt.internal.compiler.lookup.EclipseResolvedMember.getAnnotations(EclipseResolvedMember.java:78)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations(AjLookupEnvironment.java:794)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:592)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironmen ... 
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

Compile error: RuntimeException thrown: not yet implemented - please raise an AJ bug


I was going to include the AJDT Event log for the build but it is very long, and mostly unremarkable, 
so I have included only the section for the project where the exception was thrown.

11:9:50 Build kind = INCREMENTALBUILD
11:9:50 Project=ICODES, kind of build requested=Incremental AspectJ compilation
11:9:50 build: Examined delta - source file changes in required project ICODES
11:9:51 Found state instance managing output location : C:\jnaylor\Java_Dev\workspace\ICDM
11:9:51 Failed to find a state instance managing output location : C:\jnaylor\Java_dev\workspace\Dependencies\MARVEL\resources
11:9:51 Failed to find a state instance managing output location : C:\jnaylor\Java_Dev\workspace\GSG
11:9:52 Failed to find a state instance managing output location : C:\jnaylor\Java_dev\.build\Launch4J
11:9:52 Preparing for build: planning to be an incremental build
11:9:52 Starting incremental compilation loop 1 of possibly 5
11:9:52 AJDE Callback: finish. Was full build: false
11:9:52 Timer event: 2172ms: Total time spent in AJDE
11:9:54 Timer event: 47ms: Create element map (0 rels in project: ICODES)
11:9:54 Types affected during build = 0
11:9:54 Timer event: 0ms: Add markers (0 markers)
11:9:54 Timer event: 3735ms: Total time spent in AJBuilder.build()
11:9:54 ===========================================================================================


This is occurring frequently, but not every time so we haven't been able to narrow down a reasonable sized test case.</column>
            <column name="report_time">2008-08-29 14:27:06</column>
            <column name="report_timestamp">1220030000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f376a21</column>
            <column name="commit_timestamp">1222130000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseResolvedMember.java</column>
            <column name="result">2:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseResolvedMember.java</column>
        </table>
        <table name="aspectj">
            <column name="id">126</column>
            <column name="bug_id">246021</column>
            <column name="summary">Bug 246021  FindBugs reporting another optimization</column>
            <column name="description">Ben Hale reported that FindBugs was producing a warning about a dead store to a local variable (a variable that is never then read within the method).  This bug is to investigate and hopefully remove the dead store.</column>
            <column name="report_time">2008-09-02 18:22:57</column>
            <column name="report_timestamp">1220390000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">78a483d</column>
            <column name="commit_timestamp">1220400000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result">9:weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
        </table>
        <table name="aspectj">
            <column name="id">127</column>
            <column name="bug_id">244321</column>
            <column name="summary">Bug 244321  I cannot aspect code written in SJPP-based encoding</column>
            <column name="description"></column>
            <column name="report_time">2008-08-15 13:54:43</column>
            <column name="report_timestamp">1218820000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d5c2ead</column>
            <column name="commit_timestamp">1220040000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
            <column name="result">4:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
171:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</column>
        </table>
        <table name="aspectj">
            <column name="id">128</column>
            <column name="bug_id">216067</column>
            <column name="summary">Bug 216067  Typo in point example</column>
            <column name="description"></column>
            <column name="report_time">2008-01-21 21:05:25</column>
            <column name="report_timestamp">1200970000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6d906dc</column>
            <column name="commit_timestamp">1219260000</column>
            <column name="files">docs/dist/doc/examples/introduction/Point.java</column>
            <column name="result">143:docs/dist/doc/examples/introduction/Point.java</column>
        </table>
        <table name="aspectj">
            <column name="id">129</column>
            <column name="bug_id">238666</column>
            <column name="summary">Bug 238666  Allow the ltw configuration to be directly specified rather than discovered on the classpath</column>
            <column name="description">Currently the property:

org.aspectj.weaver.loadtime.configuration

can be set to name the ltw configuration file that the loadtime weaver searches for.  The default value is:

META-INF/aop.xml;META-INF/aop-ajc.xml;org/aspectj/aop.xml

and the weaver searches the classpath for .xml files matching any of those three possibilities.

A typical override might therefore be:

-Dorg.aspectj.weaver.loadtime.configuration=META-INF/overhere.xml

however the weaver will still only look for it on the classpath.

In some environments the ltw user may just want to name the aop config file to use, and not be forced to include it on the classpath.

We have had the suggestion to make it protocol based, which i like, but for now I would just allow support for 'file:'.  If file: is the prefix, it will be treated as direct reference to the file to use, otherwise it will be searched for.

This change would mean all existing uses of the override will be fine, but new users will be all to exploit the flexibility of naming their configuration directly.</column>
            <column name="report_time">2008-06-26 15:05:26</column>
            <column name="report_timestamp">1214510000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">df49b5c</column>
            <column name="commit_timestamp">1218050000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</column>
            <column name="result">2:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</column>
        </table>
        <table name="aspectj">
            <column name="id">130</column>
            <column name="bug_id">229829</column>
            <column name="summary">Bug 229829  SourceTypeBinding.sourceStart() NPE</column>
            <column name="description">java.lang.NullPointerException
at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.sourceStart(SourceTypeBinding.java:1514)
at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodBinding.sourceStart(MethodBinding.java:988)
at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.fillDeclaredMembers(EclipseSourceType.java:243)
at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getDeclaredFiel ...                     IRETURN
  end public boolean isTracingModifications()

end public class com.centricsoftware.pi.core.data.reflection.Attribute</column>
            <column name="report_time">2008-05-01 14:00:27</column>
            <column name="report_timestamp">1209660000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">e9823aa</column>
            <column name="commit_timestamp">1217350000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">131</column>
            <column name="bug_id">237962</column>
            <column name="summary">Bug 237962  [migration] Unexpected problem loading an aspect built with 1.5.4</column>
            <column name="description">We always support processing of old aspects.  It doesn't matter what level of AspectJ was used to build an aspect, as long as you use that version or a later version of the weaver, we can unpack it and don't require it to be rebuilt from source.  However, I've just encountered a .class apparently built with 1.5.4 that 1.6.1 cannot load.  It crashes deserializing a PointcutDeclaration.

In the data stream we have just read the numbers 1 and 3 indicating 'kinded pointcut' and then 'method-execution' and the next digit is a 0 when it should be 1-9.  We crash with a:

org.aspectj.weaver.BCException: weird kind 0
when batch building BuildConfig[null] #Files=43
	at org.aspectj.weaver.MemberKind.read(MemberKind.java:35)
	at org.aspectj.weaver.patterns.SignaturePattern.read(SignaturePattern.java:682)

The memberkind is a typesafeenum and so can never be other than 1-9.  It is the first part of a signaturepattern so hard to see how it got written out 'wrong' right now.

I've been told 1.5.4 can load this, so about to try that. Wow....1.5.4 did load it back in, how the hell.

I suspect we aren't consuming enough in 1.6.1 which then leaves us some extra that we interpret as a rogue pointcut.

Ok, in a comparison we consume one extra byte from the stream when reading it with 1.6.1 that we do not consume with 1.6.0 - at position 260.

As I got closer to it, I knew what it would be - especially when I knew it was just one byte difference.  The version check for whether the byte for 'annotation pattern relates to a parameter match' was wrong (urgh).</column>
            <column name="report_time">2008-06-20 13:07:32</column>
            <column name="report_timestamp">1213980000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">be03167</column>
            <column name="commit_timestamp">1213980000</column>
            <column name="files">weaver/src/org/aspectj/weaver/patterns/AndAnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/NotAnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/OrAnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</column>
            <column name="result">43:weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java
122:weaver/src/org/aspectj/weaver/patterns/AndAnnotationTypePattern.java
123:weaver/src/org/aspectj/weaver/patterns/OrAnnotationTypePattern.java
126:weaver/src/org/aspectj/weaver/patterns/NotAnnotationTypePattern.java</column>
        </table>
        <table name="aspectj">
            <column name="id">132</column>
            <column name="bug_id">203367</column>
            <column name="summary">Bug 203367  ITD of interface on generic type; can't match calls to methods on interface+</column>
            <column name="description">Build ID: I20070621-1340

Steps To Reproduce:
package bug;  // I used a &quot;bug&quot; package under the &quot;src&quot; source folder.

public aspect CantMatchOnInterfaceIntroducedToGenericClass {
	public static interface Marker {}
	public static class NonGenericClass {
		public void doit(String msg) {
			System.out.println(&quot;doit(): msg = &quot;+msg);
		}
	}
	public static class GenericClass&lt;T&gt; {
		public void doit(T t) {
			System.out.println(&quot;doit&lt;T&gt;(): t = &quot;+t);
		}
	}
	
	declare parents: NonGenericClass implements Marker;
	declare parents: GenericClass    implements Marker;
	
	pointcut nonGenericCall(): call (void NonGenericClass.doit(..));
	pointcut genericCall():    call (void GenericClass.doit(..));
	pointcut markerCall():     call (void Marker+.doit(..));
	
	before(): nonGenericCall() {
		System.out.println(&quot;nonGenericCall: &quot;+thisJoinPointStaticPart);
	}
	before(): genericCall() {
		System.out.println(&quot;genericCall: &quot;+thisJoinPointStaticPart);
	}
	before(): markerCall() {
		System.out.println(&quot;markerCall: &quot;+thisJoinPointStaticPart);
	}
	
	public static void main(String args[]) {
		new NonGenericClass().doit(&quot;message1&quot;);
		new GenericClass&lt;Integer&gt;().doit(new Integer(2));
	}
}


More information:
The code pasted in the &quot;steps&quot; demonstrates the bug.</column>
            <column name="report_time">2007-09-13 17:23:51</column>
            <column name="report_timestamp">1189720000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">11ebdd8</column>
            <column name="commit_timestamp">1213680000</column>
            <column name="files">tests/bugs161/pr203367/CantMatchOnInterfaceIntroducedToGenericClass.java
tests/src/org/aspectj/systemtest/ajc161/Ajc161Tests.java</column>
            <column name="result">570:tests/src/org/aspectj/systemtest/ajc161/Ajc161Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">133</column>
            <column name="bug_id">155347</column>
            <column name="summary">Bug 155347  NPE during compilation of class file with pointcuts</column>
            <column name="description">I commented out a static nested aspect inside a class to let me do a rename refactoring in Eclipse. This results in the following exception, which even a full rebuild won't fix. The class does have pointcut definitions inside of it. Commenting those out avoids the problem (though it caused other syntax errors...)

java.lang.ArrayIndexOutOfBoundsException
at org.aspectj.weaver.patterns.IfPointcut.findResidueInternal(IfPointcut.java:186)
at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:269)
at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:93)
at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:269)
at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:93)
at or ... ses 
when weaving 
when batch building BuildConfig[C:\devel\glassbox\.metadata\.plugins\org.eclipse.ajdt.core\glassboxAgent.generated.lst] #Files=210</column>
            <column name="report_time">2006-08-27 18:46:07</column>
            <column name="report_timestamp">1156720000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">248962b</column>
            <column name="commit_timestamp">1213130000</column>
            <column name="files">weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</column>
            <column name="result">6:weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</column>
        </table>
        <table name="aspectj">
            <column name="id">134</column>
            <column name="bug_id">227295</column>
            <column name="summary">Bug 227295  AJC error, somehow connected with generics</column>
            <column name="description">Build ID: 1.5.0.20070607

Steps To Reproduce:
I cannot find a way to reproduce it, it's somehow &quot;randomic&quot;, for example it happened to me now while creating a new class in an aspectj project, but when i then saved the .java it compiled properly. That's why I'm filing it in AJDT and not in AspectJ directly.

Based on the exception, IIUC, there is a narrowing in a generic (UnresolvedType should be something like Converter&lt;?&gt;, while BoundedReferenceType should be somethinf like Converter&lt;? extends Number&gt;), and the weaver is not handling it properly, but simply casting from one to the other .. but this are just silly assumptions.

More information:
java.lang.ClassCastException
at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding1(EclipseFactory.java:656)
at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding(EclipseFactory.java:579)
at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding1(EclipseFactory.java:640)
at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding(EclipseFactory.java:579)
at org.asp ... Worker.java:55)

Compile error: ClassCastException thrown: org.aspectj.weaver.UnresolvedType cannot be cast to org.aspectj.weaver.BoundedReferenceType</column>
            <column name="report_time">2008-04-16 06:24:42</column>
            <column name="report_timestamp">1208340000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3b2109a</column>
            <column name="commit_timestamp">1212780000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</column>
        </table>
        <table name="aspectj">
            <column name="id">135</column>
            <column name="bug_id">233497</column>
            <column name="summary">Bug 233497  StringIndexOutOfBoundsException thrown in BcelWeaver</column>
            <column name="description"></column>
            <column name="report_time">2008-05-22 13:12:59</column>
            <column name="report_timestamp">1211480000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">93b7bed</column>
            <column name="commit_timestamp">1211480000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
        </table>
        <table name="aspectj">
            <column name="id">136</column>
            <column name="bug_id">232712</column>
            <column name="summary">Bug 232712  ClassFormatError during LTW using annotation approach</column>
            <column name="description">The following exception is obtained when using the annotation approach and load-time weaving:

[AppClassLoader@1f12c4e] info AspectJ Weaver Version 1.5.4 built on Thursday Dec 20, 2007 at 13:44:10 GMT
[AppClassLoader@1f12c4e] info register classloader sun.misc.Launcher$AppClassLoader@1f12c4e
[AppClassLoader@1f12c4e] info using configuration /H:/temp/aspectj_bug/scratch/classes/scratch/aop/annotationbug/aspect/aop-bug.xml
[AppClassLoader@1f12c4e] info register aspect scratch.aop.annotationbug.aspect.BugAspect
doSomething()
Exception in thread &quot;main&quot; java.lang.ClassFormatError: Code attribute in native or abstract methods in class file scratch/aop/annotationbug/extra/SubClass
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:620)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)
	at java.net.URLClassLoader.access$000(URLClassLoader.java:56)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:195)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:276)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)
	at scratch.aop.annotationbug.extra.BugOther.getSubClass(BugOther.java:22)
	at scratch.aop.annotationbug.main.BugMain.somethingElse(BugMain.java:36)
	at scratch.aop.annotationbug.main.BugMain.doSomething(BugMain.java:30)
	at scratch.aop.annotationbug.main.BugMain.execute(BugMain.java:24)
	at scratch.aop.annotationbug.main.BugDriver.doExecute(BugDriver.java:27)
	at scratch.aop.annotationbug.main.BugDriver.main(BugDriver.java:21)

The same advice logic does not result in a ClassFormatError when using the Aspect approach, it only appears using the annotation approach.

Unfortunately we have not been able to track down exactly why the above Error occurs but have attached a test case that manifests it.

To run simply use the runtime configuration on the BugDriver main():

-Dorg.aspectj.weaver.loadtime.configuration=&quot;scratch/aop/annotationbug/aspect/aop-bug.xml&quot;

Along with the AspectJ Load-Time Weaver Agent.

The above occurs with both AspectJ 1.5.4 and AspectJ 1.6.0. Interestingly when using the aspectj 1.6.0 weaver, the AppClassLoader log still indicates &quot;1.5.4&quot;.</column>
            <column name="report_time">2008-05-18 17:23:43</column>
            <column name="report_timestamp">1211150000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f014275</column>
            <column name="commit_timestamp">1211310000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</column>
            <column name="result">9:weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</column>
        </table>
        <table name="aspectj">
            <column name="id">137</column>
            <column name="bug_id">231467</column>
            <column name="summary">Bug 231467  Cant Compile new Statement for the Generic Class</column>
            <column name="description">[aspectj:iajc] error at (no source information available)
[aspectj:iajc] C:\Development\PI\JavaSrc\com\centricsoftware\pi\service\expression\FuncNewMatrix.java:0::0 Internal compiler error
[aspectj:iajc] java.lang.ArrayIndexOutOfBoundsException: 1
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.getMemberParameterizationMap(ResolvedType.java:744)
[aspectj:iajc] 	at org.aspectj.weaver.ReferenceType.getDeclaredInterfaces(ReferenceType.java:411)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.getDirectSupertypes(ResolvedType.java:68)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1206)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1211)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1211)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers(ResolvedType.java:1185)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.checkInterTypeMungers(ResolvedType.java:1255)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:646)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:522)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom(AjLookupEnvironment.java:1105)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:599)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:276)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:113)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:49)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:99)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.getMemberType(BinaryTypeBinding.java:755)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.findMemberType(Scope.java:986)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getMemberType(Scope.java:2116)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.findNextTypeBinding(QualifiedTypeReference.java:43)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.getTypeBinding(QualifiedTypeReference.java:77)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:142)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolveType(AllocationExpression.java:258)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:196)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:433)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:196)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:404)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1109)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1188)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:366)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:625)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:392)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:990)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:264)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:180)
[aspectj:iajc] 	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)
[aspectj:iajc] 	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)
[aspectj:iajc] 	at org.aspectj.tools.ajc.Main.run(Main.java:378)
[aspectj:iajc] 	at org.aspectj.tools.ajc.Main.runMain(Main.java:253)
[aspectj:iajc] 	at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTask.java:1303)
[aspectj:iajc] 	at org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1101)
[aspectj:iajc] 	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
[aspectj:iajc] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[aspectj:iajc] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
[aspectj:iajc] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
[aspectj:iajc] 	at java.lang.reflect.Method.invoke(Method.java:585)
[aspectj:iajc] 	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
[aspectj:iajc] 	at org.apache.tools.ant.Task.perform(Task.java:348)
[aspectj:iajc] 	at org.apache.tools.ant.Target.execute(Target.java:357)
[aspectj:iajc] 	at org.apache.tools.ant.Target.performTasks(Target.java:385)
[aspectj:iajc] 	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
[aspectj:iajc] 	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
[aspectj:iajc] 	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
[aspectj:iajc] 	at org.eclipse.ant.internal.ui.antsupport.EclipseDefaultExecutor.executeTargets(EclipseDefaultExecutor.java:32)
[aspectj:iajc] 	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
[aspectj:iajc] 	at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.run(InternalAntRunner.java:423)
[aspectj:iajc] 	at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.main(InternalAntRunner.java:137)
[aspectj:iajc] abort ABORT -- (ArrayIndexOutOfBoundsException) 1
[aspectj:iajc] 1
[aspectj:iajc] java.lang.ArrayIndexOutOfBoundsException: 1
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.getMemberParameterizationMap(ResolvedType.java:744)
[aspectj:iajc] 	at org.aspectj.weaver.ReferenceType.getDeclaredInterfaces(ReferenceType.java:411)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.getDirectSupertypes(ResolvedType.java:68)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1206)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1211)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1211)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers(ResolvedType.java:1185)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.checkInterTypeMungers(ResolvedType.java:1255)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:646)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:522)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom(AjLookupEnvironment.java:1105)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:599)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:276)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:113)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:49)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:99)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.getMemberType(BinaryTypeBinding.java:755)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.findMemberType(Scope.java:986)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getMemberType(Scope.java:2116)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.findNextTypeBinding(QualifiedTypeReference.java:43)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.getTypeBinding(QualifiedTypeReference.java:77)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:142)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolveType(AllocationExpression.java:258)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:196)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:433)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:196)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:404)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1109)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1188)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:366)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:625)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:392)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:990)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:264)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:180)
[aspectj:iajc] 	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)
[aspectj:iajc] 	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)
[aspectj:iajc] 	at org.aspectj.tools.ajc.Main.run(Main.java:378)
[aspectj:iajc] 	at org.aspectj.tools.ajc.Main.runMain(Main.java:253)
[aspectj:iajc] 	at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTask.java:1303)
[aspectj:iajc] 	at org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1101)
[aspectj:iajc] 	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
[aspectj:iajc] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[aspectj:iajc] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
[aspectj:iajc] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
[aspectj:iajc] 	at java.lang.reflect.Method.invoke(Method.java:585)
[aspectj:iajc] 	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
[aspectj:iajc] 	at org.apache.tools.ant.Task.perform(Task.java:348)
[aspectj:iajc] 	at org.apache.tools.ant.Target.execute(Target.java:357)
[aspectj:iajc] 	at org.apache.tools.ant.Target.performTasks(Target.java:385)
[aspectj:iajc] 	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
[aspectj:iajc] 	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
[aspectj:iajc] 	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
[aspectj:iajc] 	at org.eclipse.ant.internal.ui.antsupport.EclipseDefaultExecutor.executeTargets(EclipseDefaultExecutor.java:32)
[aspectj:iajc] 	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
[aspectj:iajc] 	at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.run(InternalAntRunner.java:423)
[aspectj:iajc] 	at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.main(InternalAntRunner.java:137)
[aspectj:iajc] May 11, 2008 9:35:06 AM org.aspectj.weaver.tools.Jdk14Trace info
[aspectj:iajc] INFO: Dumping to C:\Development\PI\Projects\PI-ServiceCommon\.\ajcore.20080511.093506.214.txt
[aspectj:iajc] MessageHolder:  (92 info)  (1 error)  (1 abort) 
[aspectj:iajc] [error   0]: error at (no source information available)
[aspectj:iajc] C:\Development\PI\JavaSrc\com\centricsoftware\pi\service\expression\FuncNewMatrix.java:0::0 Internal compiler error
[aspectj:iajc] java.lang.ArrayIndexOutOfBoundsException: 1
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.getMemberParameterizationMap(ResolvedType.java:744)
[aspectj:iajc] 	at org.aspectj.weaver.ReferenceType.getDeclaredInterfaces(ReferenceType.java:411)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.getDirectSupertypes(ResolvedType.java:68)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1206)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1211)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1211)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers(ResolvedType.java:1185)
[aspectj:iajc] 	at org.aspectj.weaver.ResolvedType.checkInterTypeMungers(ResolvedType.java:1255)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:646)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:522)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom(AjLookupEnvironment.java:1105)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:599)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:276)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:113)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:49)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:99)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.getMemberType(BinaryTypeBinding.java:755)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.findMemberType(Scope.java:986)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getMemberType(Scope.java:2116)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.findNextTypeBinding(QualifiedTypeReference.java:43)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.getTypeBinding(QualifiedTypeReference.java:77)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:142)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolveType(AllocationExpression.java:258)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:196)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:433)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:196)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:404)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1109)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1188)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:366)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:625)
[aspectj:iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:392)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:990)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:264)
[aspectj:iajc] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:180)
[aspectj:iajc] 	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)
[aspectj:iajc] 	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)
[aspectj:iajc] 	at org.aspectj.tools.ajc.Main.run(Main.java:378)
[aspectj:iajc] 	at org.aspectj.tools.ajc.Main.runMain(Main.java:253)
[aspectj:iajc] 	at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTask.java:1303)
[aspectj:iajc] 	at org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1101)
[aspectj:iajc] 	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
[aspectj:iajc] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[aspectj:iajc] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
[aspectj:iajc] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
[aspectj:iajc] 	at java.lang.reflect.Method.invoke(Method.java:585)
[aspectj:iajc] 	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
[aspectj:iajc] 	at org.apache.tools.ant.Task.perform(Task.java:348)
[aspectj:iajc] 	at org.apache.tools.ant.Target.execute(Target.java:357)
[aspectj:iajc] 	at org.apache.tools.ant.Target.performTasks(Target.java:385)
[aspectj:iajc] 	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
[aspectj:iajc] 	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
[aspectj:iajc] 	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
[aspectj:iajc] 	at org.eclipse.ant.internal.ui.antsupport.EclipseDefaultExecutor.executeTargets(EclipseDefaultExecutor.java:32)
[aspectj:iajc] 	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
[aspectj:iajc] 	at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.run(InternalAntRunner.java:423)
[aspectj:iajc] 	at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.main(InternalAntRunner.java:137)</column>
            <column name="report_time">2008-05-11 12:48:06</column>
            <column name="report_timestamp">1210520000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a8739e3</column>
            <column name="commit_timestamp">1210710000</column>
            <column name="files">weaver/src/org/aspectj/weaver/TypeFactory.java</column>
            <column name="result">77:weaver/src/org/aspectj/weaver/TypeFactory.java</column>
        </table>
        <table name="aspectj">
            <column name="id">138</column>
            <column name="bug_id">209372</column>
            <column name="summary">Bug 209372  Compile error: IllegalArgumentException thrown: negative line: -1</column>
            <column name="description">If line numbers have not been added to the generated class files the following exception is thrown:

java.lang.IllegalArgumentException
at org.aspectj.bridge.SourceLocation.validLine(SourceLocation.java:41)
at org.aspectj.bridge.SourceLocation.&lt;init&gt;(SourceLocation.java:96)
at org.aspectj.bridge.SourceLocation.&lt;init&gt;(SourceLocation.java:85)
at org.aspectj.bridge.SourceLocation.&lt;init&gt;(SourceLocation.java:70)
at org.aspectj.ajdt.internal.core.builder.EclipseSourceContext.makeSourceLocation(EclipseSourceContext.java:57)
at org.aspectj.we ... reUtility.java:155)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

Compile error: IllegalArgumentException thrown: negative line: -1



An easy way to reproduce the problem is to uncheck the corresponding checkbox in the Classfile Generation section of the Java Compiler options in Eclipse.  A full build is performed during which an AspectJ Internal Compiler Error is thrown.

My Eclipse feature version is org.eclipse.ajdt_1.5.0.200706070619.</column>
            <column name="report_time">2007-11-09 14:27:51</column>
            <column name="report_timestamp">1194640000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d3c3e32</column>
            <column name="commit_timestamp">1210200000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</column>
            <column name="result">2:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</column>
        </table>
        <table name="aspectj">
            <column name="id">139</column>
            <column name="bug_id">230817</column>
            <column name="summary">Bug 230817  LazyMethodGen.remap() NullPointerException</column>
            <column name="description">This has been reported a few times by different users, but has always proved tough to diagnose.  The typical stack trace is something like:

java.lang.NullPointerException
org.aspectj.weaver.bcel.LazyMethodGen.remap(LazyMethodGen.java:1237)
org.aspectj.weaver.bcel.LazyMethodGen.addExceptionHandlers(LazyMethodGen.java:1132)
org.aspectj.weaver.bcel.LazyMethodGen.packBody(LazyMethodGen.java:1078)
org.aspectj.weaver.bcel.LazyMethodGen.pack(LazyMethodGen.java:977)
org.aspectj.weaver.bcel.LazyMethodGen.getMethod(LazyMethodGen.java:484)
org.aspectj.weaver.bcel.LazyClassGen.writeBack(LazyClassGen.java:512)
org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable(LazyClassGen.java:652)
org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor(BcelWeaver.java:1420)
org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1390)

And that is an exception on this line in remap()

ih = ih.getNext();

called from the addExceptionHandlers() line:

 gen.addExceptionHandler(
                remap(r.getRealStart(), map), 
                remap(r.getRealEnd(), map),
                remap(r.getHandler(), map),
                (r.getCatchType() == null)
                ? null 
                : (ObjectType) BcelWorld.makeBcelType(r.getCatchType()));

During weaving, an instruction list is augmented with extra entries representing where shadows start and end (method-call, method-execution, handler, etc).  When weaving is complete we want to remove these temporary elements and use the remaining instructions to produce the method bytecode.  Now sometimes these temporary entries are targeted by other elements (line number tags, local variable tags and exception handlers usually).  During packing we use remap() to reposition the locations so they move off of temporary placeholders and onto real instructions that will make it out into the bytecode.  What the above exception tells us is that we started walking over temporary placeholder entries, but before we came to a real instruction, we ran out of instructions!  This cannot happen, and indicates something went seriously wrong, we should always encounter an instruction when remapping off a temporary element.

After some digging it is actually the remap() call for the handler (not the start or end) that leads to the problem.  The handler represents where to jump to in the code when an exception of the specified type occurs between the instructions pointed at by start and end.

I sent a debug build to a user encountering this problem (I could not recreate it) and in that I was looking at where in fact the handler was pointing before we called remap().  I learned that when this problem occurs, the handler is not pointing to anywhere in the method currently being processed (not good).

In a second debug build I tried to ascertain who was setting these handlers to point to nowhere.  This debug never triggered, no-one was setting them to point to nowhere...

I happened to notice whilst going through the instructions in the debug output that cobertura was being used, a coverage toolkit that works by doing bytecode manipulation to insert calls out to a library.  AspectJ was being called after cobertura and I asked the user to try the steps the other way round - it worked fine.  Indicating cobertura was doing something to the bytecode that gave us problems.  After much messing about, I recreated it by applying around advice to within(*) to all the classes in rt.jar (I just used that as a very large standalone jar file I could weave into).

I learned that Cobertura creates catch blocks that look a little different to what javac and other compilers create.  The typical bytecode sequence a compiler produces for a catch block starts with a STORE instruction, to store the exception being caught (whether the body of the catch block uses it or not).  But the cobertura catch blocks started with an INVOKESTATIC instruction, a call out to another method.  What does this mean?  It means the same instruction has two shadows, a 'handler' shadow and a 'method-call' shadow - and it turns out this is what causes our problem.  If around advice is applied to the call join point and it cannot be inlined then the body of the call shadow (the call itself) is pulled out into a new method.  Because the handler was the same instruction, this meant the handler *was also being pulled out* into the new method, leaving behind an exception handler that jumped to an invalid location (in fact it 'jumped' to an instruction in a different method!).  So the reason I never saw the handler location being set incorrectly is that it was set correctly up front, but then dragged out with the method-call shadow into the wrong place.  In bytecode terms it looks like this:

   method-execution()
    |               ICONST_0
    |               ISTORE_2
    |               SIPUSH -1
    |               ISTORE_3
    | catch java.lang.Exception (1806389629) -&gt; E0
    | | method-call(ProjectData ProjectData.getGlobalProjectData())
    | | |           INVOKESTATIC ProjectData.getGlobalProjectData ()
    | | method-call(ProjectData getGlobalProjectData())
    | |             LDC &quot;SomeString&quot;
    | | method-call(ClassData getOrCreateClassData(java.lang.String))
    | | |           INVOKEVIRTUAL  ProjectData.getOrCreateClassData (LString;)
    | | method-call(ClassData ProjectData.getOrCreateClassData(String))
    | |             SIPUSH 106
    | | method-call(void ClassData.touch(int))
    | | |           INVOKEVIRTUAL ClassData.touch (I)V
    | | method-call(void ClassData.touch(int))
    | |             ALOAD_1
    | | method-call(Object Expression.getValue())
    | | |           INVOKEVIRTUAL Expression.getValue ()
    | | method-call(Object Expression.getValue())
    | catch java.lang.Exception (1806389629) -&gt; E0
    |               ARETURN
    | method-call(nProjectData ProjectData.getGlobalProjectData())
    | |         E0: INVOKESTATIC ProjectData.getGlobalProjectData ()
    | method-call(ProjectData ProjectData.getGlobalProjectData())
    |               LDC &quot;Object&quot;

We can see the problem in that final method-call.  The target for the exception handler seen earlier (E0) is within the method-call shadow.

What to do?</column>
            <column name="report_time">2008-05-06 22:43:15</column>
            <column name="report_timestamp">1210130000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5f97d46</column>
            <column name="commit_timestamp">1210170000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java
13:weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</column>
        </table>
        <table name="aspectj">
            <column name="id">140</column>
            <column name="bug_id">228633</column>
            <column name="summary">Bug 228633  AST Support for PointcutDesignators</column>
            <column name="description">I would like an enhancement to be able to match two PointcutDesignators (called 'pointcut definitions' in the AJ5 quick reference). Currently, the following test fails:

---------------AjASTMatcherTest.java---------------
public void testMatchDefaultPointcut() {
  AjAST ast = AjAST.newAjAST(AST.JLS3);
  DefaultPointcut dp1 = ast.newDefaultPointcut();
  DefaultPointcut dp2 = ast.newDefaultPointcut();
  dp1.setDetail(&quot;call(* *.foo(..)&quot;);
  dp2.setDetail(&quot;call(* *.bar(..)&quot;);
  assertFalse(dp1.subtreeMatch(new AjASTMatcher(), dp2));
}
---------------------------------------------------

The reason is that there are no implementations for the many different kinds of pointcut definitions of AspectJ. Instead, DefaultPointcut simply contains the pointcut definition in a String-field &quot;detail&quot; as shown in the test case. The same is true for DefaultTypePattern and SignaturePattern. Additionally, in the current implementation a DefaultPointcut, DefaultTypePattern, and SignaturePattern node will always match another AST node if that node is of the same type (instanceof).

From what I see, it is necessary to 
1) add types for every possible pointcut definition,
2) extend the current implementation of type name patterns and 
3) signature patterns,
4) extend the parser (internal and external?) to create nodes for the pointcut definitions,
5) extend the converter to convert the new node types, and finally
6) extend the matcher to be able to match two pointcut definitions.

Implementation is already done for combinations of poincuts using and (&amp;&amp;), or (||), not (!), cflow, and reference pointcuts (without parameters).

Please comment on the task list as it is just an initial overview resulting from my limited knowledge on this field.</column>
            <column name="report_time">2008-04-24 05:32:45</column>
            <column name="report_timestamp">1209030000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">bed3f4e</column>
            <column name="commit_timestamp">1209060000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjASTMatcher.java</column>
            <column name="result">10:org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjASTMatcher.java</column>
        </table>
        <table name="aspectj">
            <column name="id">141</column>
            <column name="bug_id">224962</column>
            <column name="summary">Bug 224962  AjcTask doesn't work with Java6</column>
            <column name="description">Although support for Java6 has been added in the last milestone, you can't use it from ant because AjcTask doesn't recognize the &quot;source=1.6&quot; and &quot;target=1.6&quot; parameters.

It's easy to fix by modifying AjcTask.java and adding the missing constants:

     static final String[] TARGET_INPUTS = new String [] 
    { &quot;1.1&quot;, &quot;1.2&quot;, &quot;1.3&quot;, &quot;1.4&quot;, &quot;1.5&quot;, &quot;1.6&quot; };
    static final String[] SOURCE_INPUTS = new String [] 
    { &quot;1.3&quot;, &quot;1.4&quot;, &quot;1.5&quot;, &quot;1.6&quot; };
    static final String[] COMPLIANCE_INPUTS = new String [] 
    { &quot;-1.3&quot;, &quot;-1.4&quot;, &quot;-1.5&quot;, &quot;-1.6&quot; };

Thanks.</column>
            <column name="report_time">2008-03-31 14:11:02</column>
            <column name="report_timestamp">1206990000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6bdb87d</column>
            <column name="commit_timestamp">1207030000</column>
            <column name="files">taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</column>
            <column name="result">1:taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</column>
        </table>
        <table name="aspectj">
            <column name="id">142</column>
            <column name="bug_id">184447</column>
            <column name="summary">Bug 184447  AjLookupEnvironment.java:519</column>
            <column name="description">Build ID: Eclipse SDK

Version: 3.2.2
M20070212-1330

Steps To Reproduce:
This occured repeatedly when I saved a .aj file or a .java file that was boing advised.  A restart of eclipse made it go away and it has not happen again so I don't know how reproduce it. Sorry.

AJDT version 1.4.2.200703020612

More information:
java.lang.NullPointerException
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations(AjLookupEnvironment.java:803)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:592)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:519)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupE ... AutoBuildJob.run(AutoBuildJob.java:217)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)

Compile error: NullPointerException thrown: null</column>
            <column name="report_time">2007-04-27 11:00:01</column>
            <column name="report_timestamp">1177690000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">8ce9dcf</column>
            <column name="commit_timestamp">1206120000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</column>
        </table>
        <table name="aspectj">
            <column name="id">143</column>
            <column name="bug_id">163802</column>
            <column name="summary">Bug 163802  Compilation error</column>
            <column name="description">Hello,

I had several times aspectj compiler errors when compiling some normal java class file (not refering any aspect nor concerned by an aspect) but in a aspectJ project. Bug goes away after cleaning project. 

Here is the error reported for my class
java.lang.NullPointerException
at org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1158)
at org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1158)
at org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers(ResolvedType.java:1135)
at org.aspectj.weaver.ResolvedType.checkInterTypeMungers(ResolvedType.java:1202)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInt ... Adapter.java:102)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

NullPointerException thrown: null


It occurs with plugin configuration:
com.ibm.icu (3.4.5) &quot;International Components for Unicode for Java (ICU4J)&quot; [Active]
com.ibm.icu.source (3.4.5) &quot;International Components for Unicode for Java (ICU4J) source plug-in&quot; [Resolved]
com.jcraft.jsch (0.1.28) &quot;JSch&quot; [Resolved]
net.sf.fjep.fatjar (0.0.24) &quot;Fat Jar Plug-in&quot; [Resolved]
org.apache.ant (1.6.5) &quot;Apache Ant&quot; [Resolved]
org.apache.lucene (1.4.103.v20060601) &quot;Apache Lucene&quot; [Resolved]
org.aspectj.ajde (1.5.3.200610201049) &quot;AspectJ&quot; [Active]
org.aspectj.runtime (1.5.3.200610201049) &quot;AspectJ Runtime&quot; [Resolved]
org.aspectj.weaver (1.5.3.200610201049) &quot;AspectJ Weaver&quot; [Resolved]
org.eclipse.ajdt.core (1.4.1.200611071030) &quot;AspectJ Development Tools Core&quot; [Active]
org.eclipse.ajdt.examples (1.4.1.200611071030) &quot;AspectJ Examples&quot; [Resolved]
org.eclipse.ajdt.pde.build (1.4.1.200611071030) &quot;AspectJ Plug-in Development Environment Build Support&quot; [Resolved]
org.eclipse.ajdt.source (1.4.1.200611071030) &quot;pluginName&quot; [Resolved]
org.eclipse.ajdt.ui (1.4.1.200611071030) &quot;AspectJ Development Tools UI&quot; [Active]
org.eclipse.ant.core (3.1.100.v20060531) &quot;Ant Build Tool Core&quot; [Resolved]
org.eclipse.ant.ui (3.2.1.r321_v20060828) &quot;Ant UI&quot; [Resolved]
org.eclipse.aspectj (1.4.1.200611071030) &quot;AspectJ Development Tools&quot; [Resolved]
org.eclipse.compare (3.2.1.M20060711) &quot;Compare Support&quot; [Active]
org.eclipse.contribution.visualiser (2.2.0.200611071030) &quot;Visualiser Plug-in&quot; [Resolved]
org.eclipse.contribution.xref.core (1.4.1.200611071030) &quot;Cross Reference Core Plugin&quot; [Active]
org.eclipse.contribution.xref.ui (1.4.1.200611071030) &quot;Cross Reference UI Plugin&quot; [Active]
org.eclipse.core.boot (3.1.100.v20060603) &quot;Core Boot&quot; [Resolved]
org.eclipse.core.commands (3.2.0.I20060605-1400) &quot;Commands&quot; [Resolved]
org.eclipse.core.contenttype (3.2.0.v20060603) &quot;Eclipse Content Mechanism&quot; [Active]
org.eclipse.core.expressions (3.2.1.r321_v20060721) &quot;Expression Language&quot; [Active]
org.eclipse.core.filebuffers (3.2.1.r321_v20060721) &quot;File Buffers&quot; [Active]
org.eclipse.core.filesystem (1.0.0.v20060603) &quot;Core File Systems&quot; [Resolved]
org.eclipse.core.filesystem.macosx (1.0.0.v20060603) &quot;Core File System for Macintosh&quot; [Resolved]
org.eclipse.core.jobs (3.2.0.v20060603) &quot;Eclipse Jobs Mechanism&quot; [Active]
org.eclipse.core.resources (3.2.1.R32x_v20060914) &quot;Core Resource Management&quot; [Active]
org.eclipse.core.resources.compatibility (3.2.0.v20060603) &quot;Core Resource Management Compatibility Fragment&quot; [Resolved]
org.eclipse.core.runtime (3.2.0.v20060603) &quot;Core Runtime&quot; [Active]
org.eclipse.core.runtime.compatibility (3.1.100.v20060603) &quot;Core Runtime Plug-in Compatibility&quot; [Active]
org.eclipse.core.runtime.compatibility.auth (3.2.0.v20060601) &quot;Authorization Compatibility Plug-in&quot; [Active]
org.eclipse.core.runtime.compatibility.registry (3.2.1.R32x_v20060907) &quot;Eclipse Registry Compatibility Fragment&quot; [Resolved]
org.eclipse.core.variables (3.1.100.v20060605) &quot;Core Variables&quot; [Active]
org.eclipse.debug.core (3.2.1.v20060823) &quot;Debug Core&quot; [Active]
org.eclipse.debug.ui (3.2.1.v20060823) &quot;Debug UI&quot; [Active]
org.eclipse.equinox.common (3.2.0.v20060603) &quot;Common Eclipse Runtime&quot; [Active]
org.eclipse.equinox.preferences (3.2.1.R32x_v20060717) &quot;Eclipse Preferences Mechanism&quot; [Active]
org.eclipse.equinox.registry (3.2.1.R32x_v20060814) &quot;Extension Registry Support&quot; [Active]
org.eclipse.help (3.2.1.R321_v20060920) &quot;Help System Core&quot; [Active]
org.eclipse.help.appserver (3.1.100.v20060602) &quot;Help Application Server&quot; [Resolved]
org.eclipse.help.base (3.2.1.R321_v20060822) &quot;Help System Base&quot; [Resolved]
org.eclipse.help.ui (3.2.0.v20060602) &quot;Help System UI&quot; [Resolved]
org.eclipse.help.webapp (3.2.1.R321_v20060803) &quot;Help System Webapp&quot; [Resolved]
org.eclipse.jdt (3.2.1.r321_v20060823) &quot;Eclipse Java Development Tools&quot; [Resolved]
org.eclipse.jdt.apt.core (3.2.1.R32x_v20060822-2100) &quot;Java Annotation Processing Core&quot; [Active]
org.eclipse.jdt.apt.ui (3.2.1.R32x_v20060822-2100) &quot;Java Annotation Processing UI&quot; [Resolved]
org.eclipse.jdt.core (3.2.1.v_677_R32x) &quot;Java Development Tools Core&quot; [Active]
org.eclipse.jdt.core.manipulation (1.0.1.r321_v20060721) &quot;Java Code Manipulation Functionality&quot; [Resolved]
org.eclipse.jdt.debug (3.2.1.r321_v20060731) &quot;JDI Debug Model&quot; [Active]
org.eclipse.jdt.debug.ui (3.2.1.r321_v20060918) &quot;JDI Debug UI&quot; [Active]
org.eclipse.jdt.doc.isv (3.2.1.r321_v20060907) &quot;Eclipse JDT Plug-in Developer Guide&quot; [Resolved]
org.eclipse.jdt.doc.user (3.2.0.v20060605-1400) &quot;Eclipse Java Development User Guide&quot; [Resolved]
org.eclipse.jdt.junit (3.2.1.r321_v20060810) &quot;Java Development Tools JUnit support&quot; [Active]
org.eclipse.jdt.junit.runtime (3.2.1.r321_v20060721) &quot;Java Development Tools JUnit runtime support&quot; [Resolved]
org.eclipse.jdt.junit4.runtime (1.0.1.r321_v20060905) &quot;Java Development Tools JUnit4 runtime support&quot; [Resolved]
org.eclipse.jdt.launching (3.2.1.r321_v20060731) &quot;Java Development Tools Launching Support&quot; [Active]
org.eclipse.jdt.launching.macosx (3.1.100.v20060605) &quot;Mac OS X Launcher&quot; [Active]
org.eclipse.jdt.source (3.2.1.r321_v20060905-R4CM1Znkvre9wC-) &quot;Eclipse Java Development Tools SDK&quot; [Resolved]
org.eclipse.jdt.source.macosx.carbon.ppc (3.2.1.r321_v20060905-R4CM1Znkvre9wC-) &quot;Eclipse Java Development Tools SDK&quot; [Resolved]
org.eclipse.jdt.ui (3.2.1.r321_v20060907) &quot;Java Development Tools UI&quot; [Active]
org.eclipse.jface (3.2.1.M20060908-1000) &quot;JFace&quot; [Resolved]
org.eclipse.jface.databinding (1.0.0.I20060605-1400) &quot;JFace Data Binding&quot; [Resolved]
org.eclipse.jface.text (3.2.1.r321_v20060810) &quot;JFace Text&quot; [Resolved]
org.eclipse.ltk.core.refactoring (3.2.1.r321_v20060823) &quot;Refactoring Core&quot; [Active]
org.eclipse.ltk.ui.refactoring (3.2.1.r321_v20060726) &quot;Refactoring UI&quot; [Active]
org.eclipse.osgi.services (3.1.100.v20060601) &quot;OSGi Release 3 Services&quot; [Resolved]
org.eclipse.osgi.util (3.1.100.v20060601) &quot;OSGi R3 Utility Classes&quot; [Resolved]
org.eclipse.pde (3.2.1.v20060810-0800) &quot;Eclipse Plug-in Development Environment&quot; [Resolved]
org.eclipse.pde.build (3.2.1.r321_v20060823) &quot;Plug-in Development Environment Build Support&quot; [Resolved]
org.eclipse.pde.core (3.2.1.v20060915-0800) &quot;Plug-in Development Core&quot; [Resolved]
org.eclipse.pde.doc.user (3.2.1.v20060816-0800) &quot;Eclipse Plug-in Development User Guide&quot; [Resolved]
org.eclipse.pde.junit.runtime (3.2.0.v20060605) &quot;PDE JUnit Plug-in Test&quot; [Resolved]
org.eclipse.pde.runtime (3.2.0.v20060605) &quot;Plug-in Development Environment Runtime&quot; [Resolved]
org.eclipse.pde.source (3.2.1.r321_v20060823-6vYLLdQ3Nk8DrFG) &quot;Eclipse Plug-in Development Environment Developer Resources&quot; [Resolved]
org.eclipse.pde.ui (3.2.1.v20060816-0800) &quot;Plug-in Development UI&quot; [Resolved]
org.eclipse.platform (3.2.0.v20060601) &quot;Eclipse Platform&quot; [Resolved]
org.eclipse.platform.doc.isv (3.2.1.r321_v2006030) &quot;Eclipse Platform Plug-in Developer Guide&quot; [Resolved]
org.eclipse.platform.doc.user (3.2.1.R32x_v200608101155) &quot;Eclipse Workbench User Guide&quot; [Resolved]
org.eclipse.platform.source (3.2.1.r321_v20060921-b_XVA-INSQSyMtx) &quot;Eclipse Platform Plug-in Developer Resources&quot; [Resolved]
org.eclipse.platform.source.macosx.carbon.ppc (3.2.1.r321_v20060921-b_XVA-INSQSyMtx) &quot;Eclipse Platform Plug-in Developer Resources&quot; [Resolved]
org.eclipse.rcp (3.2.0.v20060605) &quot;Eclipse RCP&quot; [Resolved]
org.eclipse.rcp.source (3.2.1.r321_v20060801-2ekW2BxmcpPUOoq) &quot;Eclipse RCP Plug-in Developer Resources&quot; [Resolved]
org.eclipse.rcp.source.macosx.carbon.ppc (3.2.1.r321_v20060801-2ekW2BxmcpPUOoq) &quot;Eclipse RCP Plug-in Developer Resources&quot; [Resolved]
org.eclipse.sdk (3.2.1.r321_v20060705) &quot;Eclipse Project SDK&quot; [Resolved]
org.eclipse.search (3.2.1.r321_v20060726) &quot;Search Support&quot; [Resolved]
org.eclipse.swt (3.2.1.v3235e) &quot;Standard Widget Toolkit&quot; [Resolved]
org.eclipse.swt.carbon.macosx (3.2.1.v3235) &quot;Standard Widget Toolkit for Mac OS X (Carbon)&quot; [Resolved]
org.eclipse.team.core (3.2.1.M20060711) &quot;Team Support Core&quot; [Active]
org.eclipse.team.cvs.core (3.2.1.M200608161750) &quot;CVS Team Provider Core&quot; [Active]
org.eclipse.team.cvs.ssh (3.2.0.I200606011710) &quot;CVS SSH Core&quot; [Resolved]
org.eclipse.team.cvs.ssh2 (3.2.0.I200606051140) &quot;CVS SSH2&quot; [Active]
org.eclipse.team.cvs.ui (3.2.1.M20060831) &quot;CVS Team Provider UI&quot; [Active]
org.eclipse.team.ui (3.2.1.M200608151725) &quot;Team Support UI&quot; [Active]
org.eclipse.text (3.2.0.v20060605-1400) &quot;Text&quot; [Resolved]
org.eclipse.tomcat (4.1.130.v20060601) &quot;Tomcat Wrapper&quot; [Resolved]
org.eclipse.ui (3.2.1.M20060913-0800) &quot;Eclipse UI&quot; [Active]
org.eclipse.ui.browser (3.2.0.v20060602) &quot;Browser Support&quot; [Active]
org.eclipse.ui.carbon (3.2.0.I20060605-1400) &quot;Eclipse UI MacOS X Enhancements&quot; [Resolved]
org.eclipse.ui.cheatsheets (3.2.1.R321_v20060720) &quot;Cheat Sheets&quot; [Resolved]
org.eclipse.ui.console (3.1.100.v20060605) &quot;Console&quot; [Active]
org.eclipse.ui.editors (3.2.1.r321_v20060721) &quot;Default Text Editor&quot; [Active]
org.eclipse.ui.externaltools (3.1.101.r321_v20060802) &quot;External Tools&quot; [Active]
org.eclipse.ui.forms (3.2.0.v20060602) &quot;Eclipse Forms&quot; [Active]
org.eclipse.ui.ide (3.2.1.M20060915-1030) &quot;Eclipse IDE UI&quot; [Active]
org.eclipse.ui.intro (3.2.1.R321_v20060810) &quot;Welcome Framework&quot; [Resolved]
org.eclipse.ui.intro.universal (3.2.1.R321_v20060905) &quot;Universal Welcome&quot; [Resolved]
org.eclipse.ui.navigator (3.2.1.M20060913-0800) &quot;Common Navigator View&quot; [Resolved]
org.eclipse.ui.navigator.resources (3.2.1.M20060906-0800b) &quot;Navigator Workbench Components&quot; [Resolved]
org.eclipse.ui.presentations.r21 (3.2.0.I20060605-1400) &quot;R21 Presentation Plug-in&quot; [Resolved]
org.eclipse.ui.views (3.2.1.M20060906-0800) &quot;Views&quot; [Active]
org.eclipse.ui.views.properties.tabbed (3.2.1.M20060830-0800) &quot;Tabbed Properties View&quot; [Resolved]
org.eclipse.ui.workbench (3.2.1.M20060906-0800) &quot;Workbench&quot; [Active]
org.eclipse.ui.workbench.compatibility (3.2.0.I20060605-1400) &quot;Workbench Compatibility&quot; [Resolved]
org.eclipse.ui.workbench.texteditor (3.2.0.v20060605-1400) &quot;Text Editor Framework&quot; [Active]
org.eclipse.update.configurator (3.2.1.v20092006) &quot;Install/Update Configurator&quot; [Active]
org.eclipse.update.core (3.2.1.v20092006) &quot;Install/Update Core&quot; [Active]
org.eclipse.update.scheduler (3.2.1.v20092006) &quot;Automatic Updates Scheduler&quot; [Active]
org.eclipse.update.ui (3.2.1.v20092006) &quot;Install/Update UI&quot; [Resolved]
org.junit (3.8.1) &quot;JUnit Testing Framework&quot; [Resolved]
org.junit4 (4.1.0.1) &quot;JUnit Testing Framework Version 4&quot; [Resolved]
sf.eclipse.javacc (1.5.5) &quot;JavaCC Plug-in&quot; [Active]
system.bundle (3.2.1.R32x_v20060919) &quot;OSGi System Bundle&quot; [Active]</column>
            <column name="report_time">2006-11-08 08:48:52</column>
            <column name="report_timestamp">1162990000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">fe99e6b</column>
            <column name="commit_timestamp">1206060000</column>
            <column name="files">weaver/src/org/aspectj/weaver/ResolvedType.java</column>
            <column name="result">5:weaver/src/org/aspectj/weaver/ResolvedType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">144</column>
            <column name="bug_id">222987</column>
            <column name="summary">Bug 222987  More NPEs in Java15AnnotationFinder</column>
            <column name="description"></column>
            <column name="report_time">2008-03-17 13:57:36</column>
            <column name="report_timestamp">1205780000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6c54db9</column>
            <column name="commit_timestamp">1206030000</column>
            <column name="files">weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java</column>
            <column name="result">1:weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java</column>
        </table>
        <table name="aspectj">
            <column name="id">145</column>
            <column name="bug_id">222437</column>
            <column name="summary">Bug 222437  MANIFEST.MF copying is not always reliable</column>
            <column name="description">Sometimes an AJDT project gets into a state where it has a meta-inf/manifest.mf - and this file fails to make it out to the destination folder.</column>
            <column name="report_time">2008-03-12 12:45:11</column>
            <column name="report_timestamp">1205340000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">906c849</column>
            <column name="commit_timestamp">1205340000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
            <column name="result">2:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
        </table>
        <table name="aspectj">
            <column name="id">146</column>
            <column name="bug_id">193348</column>
            <column name="summary">Bug 193348  NPE on attempt to compile</column>
            <column name="description">I can't really pinpoint any code that trigger this. It happens on for an incremental, and only some of the time. If I do a full build of the project then I do not get the error and all seems to work.

----

java.lang.NullPointerException
at org.aspectj.weaver.bcel.BcelWeaver.raiseUnboundFormalError(BcelWeaver.java:833)
at org.aspectj.weaver.bcel.BcelWeaver.validateSingleBranch(BcelWeaver.java:688)
at org.aspectj.weaver.bcel.BcelWeaver.validateBindings(BcelWeaver.java:627)
at org.aspectj.weaver.bcel.BcelWeaver.rewritePointcuts(BcelWeaver.java:556)
at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java:484)
at org.aspectj.ajd ... oBuildJob.run(AutoBuildJob.java:235)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

Compile error: NullPointerException thrown: null</column>
            <column name="report_time">2007-06-19 12:01:51</column>
            <column name="report_timestamp">1182270000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a31b3de</column>
            <column name="commit_timestamp">1205170000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
        </table>
        <table name="aspectj">
            <column name="id">147</column>
            <column name="bug_id">220686</column>
            <column name="summary">Bug 220686  unsynchronized access to WeakHashMap</column>
            <column name="description"></column>
            <column name="report_time">2008-02-27 21:16:31</column>
            <column name="report_timestamp">1204160000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">caf8960</column>
            <column name="commit_timestamp">1204230000</column>
            <column name="files">weaver/src/org/aspectj/weaver/World.java</column>
            <column name="result">9:weaver/src/org/aspectj/weaver/World.java</column>
        </table>
        <table name="aspectj">
            <column name="id">148</column>
            <column name="bug_id">219830</column>
            <column name="summary">Bug 219830  java.lang.NullPointerException in Java15AnnotationFinder when using SWT</column>
            <column name="description">I receive the following Exception when running SWT with AspjectJ load time weaving through the Spring Framework.  The lines around org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations(Java15AnnotationFinder.java:123) are as follows:

for (int i = 0; i &lt; anns.length; i++) {
     annSet.add(world.resolve(UnresolvedType.forSignature(anns[i].getTypeSignature())));
}

When using the debugger, I see &quot;world&quot; as a null value.

Attached is a stripped down Eclipse project that generates the error during startup.  My runtime arguments are as follows:

-javaagent:${resource_loc:/AspectJBug/lib/spring-agent.jar}

--------------------------------------------

[AppClassLoader@19d819d8] abort trouble in: 
final class org.eclipse.swt.awt.SWT_AWT$10 extends java.lang.Object implements java.lang.Runnable:
  private final java.awt.Frame val$frame [Synthetic]
  void &lt;init&gt;(java.awt.Frame):
                    ALOAD_0     // Lorg/eclipse/swt/awt/SWT_AWT$10; this   (line 274)
                    INVOKESPECIAL java.lang.Object.&lt;init&gt; ()V
    constructor-execution(void org.eclipse.swt.awt.SWT_AWT$10.&lt;init&gt;(java.awt.Frame))
    |               ALOAD_0     // Lorg/eclipse/swt/awt/SWT_AWT$10; this   (line 1)
    |               ALOAD_1
    |               PUTFIELD org.eclipse.swt.awt.SWT_AWT$10.val$frame Ljava/awt/Frame;
    |               RETURN
    constructor-execution(void org.eclipse.swt.awt.SWT_AWT$10.&lt;init&gt;(java.awt.Frame))
  end void &lt;init&gt;(java.awt.Frame)

  public void run():
    method-execution(void org.eclipse.swt.awt.SWT_AWT$10.run())
    | catch java.lang.Throwable -&gt; E0
    | |             LDC &quot;sun.awt.windows.WComponentPeer&quot;   (line 277)
    | | method-call(java.lang.Class java.lang.Class.forName(java.lang.String))
    | | |           INVOKESTATIC java.lang.Class.forName (Ljava/lang/String;)Ljava/lang/Class;
    | | method-call(java.lang.Class java.lang.Class.forName(java.lang.String))
    | |             ASTORE_1
    | |             ALOAD_1     // Ljava/lang/Class; clazz   (line 278)
    | |             LDC &quot;winGraphicsConfig&quot;
    | | method-call(java.lang.reflect.Field java.lang.Class.getDeclaredField(java.lang.String))
    | | |           INVOKEVIRTUAL java.lang.Class.getDeclaredField (Ljava/lang/String;)Ljava/lang/reflect/Field;
    | | method-call(java.lang.reflect.Field java.lang.Class.getDeclaredField(java.lang.String))
    | |             ASTORE_2
    | |             ALOAD_2     // Ljava/lang/reflect/Field; field   (line 279)
    | |             ICONST_1
    | | method-call(void java.lang.reflect.Field.setAccessible(boolean))
    | | |           INVOKEVIRTUAL java.lang.reflect.Field.setAccessible (Z)V
    | | method-call(void java.lang.reflect.Field.setAccessible(boolean))
    | |             ALOAD_2     // Ljava/lang/reflect/Field; field   (line 280)
    | |             ALOAD_0     // Lorg/eclipse/swt/awt/SWT_AWT$10; this
    | |             GETFIELD org.eclipse.swt.awt.SWT_AWT$10.val$frame Ljava/awt/Frame;
    | | method-call(java.awt.peer.ComponentPeer java.awt.Frame.getPeer())
    | | |           INVOKEVIRTUAL java.awt.Frame.getPeer ()Ljava/awt/peer/ComponentPeer;
    | | method-call(java.awt.peer.ComponentPeer java.awt.Frame.getPeer())
    | |             ALOAD_0     // Lorg/eclipse/swt/awt/SWT_AWT$10; this
    | |             GETFIELD org.eclipse.swt.awt.SWT_AWT$10.val$frame Ljava/awt/Frame;
    | |             INVOKEVIRTUAL java.awt.Frame.getGraphicsConfiguration ()Ljava/awt/GraphicsConfiguration;
    | |             INVOKEVIRTUAL java.lang.reflect.Field.set (Ljava/lang/Object;Ljava/lang/Object;)V
    | catch java.lang.Throwable -&gt; E0
    |               GOTO L0
    |           E0: POP   (line 281)
    |           L0: RETURN   (line 282)
    method-execution(void org.eclipse.swt.awt.SWT_AWT$10.run())
  end public void run()

end final class org.eclipse.swt.awt.SWT_AWT$10
 -- (NullPointerException) null
null
java.lang.NullPointerException
	at org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations(Java15AnnotationFinder.java:123)
	at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.unpackAnnotations(ReflectionBasedResolvedMemberImpl.java:174)
	at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.hasAnnotation(ReflectionBasedResolvedMemberImpl.java:158)
	at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:82)
	at org.aspectj.weaver.patterns.AnnotationPointcut.matchInternal(AnnotationPointcut.java:151)
	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)
	at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:52)
	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)
	at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:75)
	at org.aspectj.weaver.Advice.match(Advice.java:112)
	at org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:118)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2811)
	at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction(BcelClassWeaver.java:2773)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2506)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2332)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:494)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:119)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1651)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1602)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1380)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1200)
	at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:360)
	at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:262)
	at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:78)
	at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)
	at org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformerDecorator.transform(AspectJWeavingEnabler.java:84)
	at sun.instrument.TransformerManager.transform(TransformerManager.java:141)
	at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:174)
	at java.lang.ClassLoader.defineClassImpl(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:228)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:148)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:557)
	at java.net.URLClassLoader.access$400(URLClassLoader.java:120)
	at java.net.URLClassLoader$ClassFinder.run(URLClassLoader.java:962)
	at java.security.AccessController.doPrivileged(AccessController.java:275)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:488)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:607)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:327)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:573)
	at org.eclipse.swt.awt.SWT_AWT.new_Frame(SWT_AWT.java:274)

Feb 21, 2008 12:09:23 PM org.aspectj.weaver.tools.Jdk14Trace error
SEVERE: org/eclipse/swt/awt/SWT_AWT$10
java.lang.NullPointerException
	at org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations(Java15AnnotationFinder.java:123)
	at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.unpackAnnotations(ReflectionBasedResolvedMemberImpl.java:174)
	at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.hasAnnotation(ReflectionBasedResolvedMemberImpl.java:158)
	at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:82)
	at org.aspectj.weaver.patterns.AnnotationPointcut.matchInternal(AnnotationPointcut.java:151)
	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)
	at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:52)
	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)
	at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:75)
	at org.aspectj.weaver.Advice.match(Advice.java:112)
	at org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:118)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2811)
	at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction(BcelClassWeaver.java:2773)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2506)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2332)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:494)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:119)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1651)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1602)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1380)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1200)
	at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:360)
	at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:262)
	at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:78)
	at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)
	at org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformerDecorator.transform(AspectJWeavingEnabler.java:84)
	at sun.instrument.TransformerManager.transform(TransformerManager.java:141)
	at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:174)
	at java.lang.ClassLoader.defineClassImpl(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:228)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:148)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:557)
	at java.net.URLClassLoader.access$400(URLClassLoader.java:120)
	at java.net.URLClassLoader$ClassFinder.run(URLClassLoader.java:962)
	at java.security.AccessController.doPrivileged(AccessController.java:275)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:488)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:607)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:327)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:573)
	at org.eclipse.swt.awt.SWT_AWT.new_Frame(SWT_AWT.java:274)</column>
            <column name="report_time">2008-02-21 12:47:46</column>
            <column name="report_timestamp">1203620000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">1bbe6f9</column>
            <column name="commit_timestamp">1204070000</column>
            <column name="files">weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</column>
            <column name="result">10:weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</column>
        </table>
        <table name="aspectj">
            <column name="id">149</column>
            <column name="bug_id">220430</column>
            <column name="summary">Bug 220430  mixup in retrieving the right class in Java15AnnotationFinder</column>
            <column name="description"></column>
            <column name="report_time">2008-02-26 13:41:45</column>
            <column name="report_timestamp">1204050000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9bbdb41</column>
            <column name="commit_timestamp">1204060000</column>
            <column name="files">weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java</column>
            <column name="result">1:weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java</column>
        </table>
        <table name="aspectj">
            <column name="id">150</column>
            <column name="bug_id">220172</column>
            <column name="summary">Bug 220172  [compiler] NullpointerException during compile</column>
            <column name="description"></column>
            <column name="report_time">2008-02-25 06:34:35</column>
            <column name="report_timestamp">1203940000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5beab0e</column>
            <column name="commit_timestamp">1203980000</column>
            <column name="files">weaver/src/org/aspectj/weaver/Shadow.java</column>
            <column name="result">132:weaver/src/org/aspectj/weaver/Shadow.java</column>
        </table>
        <table name="aspectj">
            <column name="id">151</column>
            <column name="bug_id">210848</column>
            <column name="summary">Bug 210848  Fix javadoc for ProceedingJoinPoint.proceed(Object[])</column>
            <column name="description"></column>
            <column name="report_time">2007-11-24 17:49:30</column>
            <column name="report_timestamp">1195940000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b4715bc</column>
            <column name="commit_timestamp">1203560000</column>
            <column name="files">runtime/src/org/aspectj/lang/ProceedingJoinPoint.java</column>
            <column name="result">1:runtime/src/org/aspectj/lang/ProceedingJoinPoint.java</column>
        </table>
        <table name="aspectj">
            <column name="id">152</column>
            <column name="bug_id">203384</column>
            <column name="summary">Bug 203384  AST: Type information not exposed on itmd, itfd...</column>
            <column name="description">The Types:

org/aspectj/org/eclipse/jdt/core/dom/InterTypeFieldDeclaration.java
org/aspectj/org/eclipse/jdt/core/dom/InterTypeMethodDeclaration.java

Which can be returned by visiting the AjAST tree do not expose the name of the type on which the method or field is added. I require this information in the project I'm currently working on, and would appreciate if it was added.</column>
            <column name="report_time">2007-09-13 19:22:16</column>
            <column name="report_timestamp">1189730000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">114db35</column>
            <column name="commit_timestamp">1201030000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjASTConverter.java
org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/InterTypeFieldDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/InterTypeMethodDeclaration.java</column>
            <column name="result">2:org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/InterTypeFieldDeclaration.java
4:org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/InterTypeMethodDeclaration.java
16:org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjASTConverter.java</column>
        </table>
        <table name="aspectj">
            <column name="id">153</column>
            <column name="bug_id">211674</column>
            <column name="summary">Bug 211674  [ataspectj] after throwing annotation style is too sensitive to parameter positions</column>
            <column name="description">Reported on the list by Ashley Williams:
Having converted my aspects to use the @AspectJ style, I'm now getting a strange error message when a compile my tracing aspect,.
First here is the section of code:


        @Pointcut(&quot;execution(@Tracing * *(..)) &amp;&amp; @annotation(tracing)&quot;)
        void annotatedMethods(Tracing tracing) {
        }
       
        @AfterThrowing(pointcut = &quot;annotatedMethods(tracing)&quot;, throwing = &quot;t&quot;)
        public void logException(JoinPoint thisJoinPoint, Tracing tracing,
                        Throwable t) {
                Level level = Level.toLevel(tracing.level());
                if (logger.isEnabledFor(level)) {
                        logger.log(level, formatter.formatSignatureThrowing(thisJoinPoint),
                                        t);
                }
        }

So I am matching on all methods annotated with @Tracing and logging the subclass of Throwable that may have been thrown.
However when I run my test case i get the following error:

java.lang.VerifyError: (class: com/db/abfo/tracing/PojoOne, method: calculate signature: ()V) catch_type not a subclass of Throwable

This used to work when I used the aspectj after throwing language extention form:


        pointcut annotatedMethods(Tracing tracing) : execution(@Tracing * *(..)) &amp;&amp; @annotation(tracing);

        after(Tracing tracing) throwing(Throwable t) : annotatedMethods(tracing) {
                Level level = tracing.level().getLevel();
                if (logger.isEnabledFor(level)) {
                        logger.log(level, formatter.formatSignatureThrowing(thisJoinPoint),
                                        t);
                }
        }</column>
            <column name="report_time">2007-12-01 13:15:13</column>
            <column name="report_timestamp">1196530000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9de03b7</column>
            <column name="commit_timestamp">1196590000</column>
            <column name="files">tests/bugs154/pr211674/Test.java
tests/bugs154/pr211674/Test2.java
tests/src/org/aspectj/systemtest/ajc154/Ajc154Tests.java</column>
            <column name="result">526:tests/src/org/aspectj/systemtest/ajc154/Ajc154Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">154</column>
            <column name="bug_id">206732</column>
            <column name="summary">Bug 206732  [itds] Problem with ITDs appearing to be applied twice (and clashing) for binary types</column>
            <column name="description">As reported by Josh on the mailing list:

I have the following 2 files:

 

Advised.aj:

 

package bugs;

 

public class Advised {}

aspect ITD {

          public void Advised.f() {}

}

 

Ref.aj:

 

package notbugs;

 

import bugs.Advised;

 

public class Ref {

          public void g() {

                   new Advised().f();

          }

}

 

I am attempting to build Advised.aj into a jar, and refer to it from Ref.aj, using the following ant build.xml:

 

&lt;?xml version=&quot;1.0&quot;?&gt;

 

&lt;project name=&quot;Bugs&quot; basedir=&quot;C:\workplace\imds\Bugs&quot;

          xmlns:aj=&quot;antlib:org.aspectj&quot;&gt;

          &lt;taskdef uri=&quot;antlib:org.aspectj&quot; resource=&quot;org/aspectj/antlib.xml&quot; classpath=&quot;./aspectjtools.jar&quot;/&gt;

          &lt;target name=&quot;clean&quot;&gt;

                   &lt;delete dir=&quot;bugs&quot; includes=&quot;**/*.class&quot;/&gt;

                   &lt;delete dir=&quot;notbugs&quot; includes=&quot;**/*.class&quot;/&gt;

          &lt;/target&gt;

          &lt;target name=&quot;task1&quot;&gt;

                   &lt;aj:iajc srcdir=&quot;.&quot; destdir=&quot;.&quot; source=&quot;1.5&quot; target=&quot;1.5&quot;&gt;

                             &lt;classpath location=&quot;.\aspectjrt.jar&quot;/&gt;

                             &lt;include name=&quot;bugs/Advised.aj&quot;/&gt;

                   &lt;/aj:iajc&gt;

          &lt;/target&gt;

          &lt;target name=&quot;task2&quot;&gt;

                   &lt;aj:iajc source=&quot;1.5&quot; target=&quot;1.5&quot; srcdir=&quot;.&quot;&gt;

                             &lt;classpath location=&quot;.\aspectjrt.jar&quot;/&gt;

                             &lt;aspectpath location=&quot;.&quot;/&gt;

                             &lt;include name=&quot;notbugs/Ref.aj&quot;/&gt;

                   &lt;/aj:iajc&gt;

          &lt;/target&gt;

&lt;/project&gt;

 

From within Eclipse, there are no build errors because this is all one project.  On the command line, however, once I execute ant task2, I get the following marvelous error message which suggests that ajc is trying to ITD f into a class it already ITDd f into before:

 

  [aj:iajc] error at C:\workplace\imds\Bugs\bugs\Advised.aj:5::77 inter-type declaration from bugs.ITD conflicts with existing member: void bugs.Advised.f()

  [aj:iajc] MessageHolder:  (8 info)  (1 error)

  [aj:iajc] [error   0]: error at C:\workplace\imds\Bugs\bugs\Advised.aj:5::77 inter-type declaration from bugs.ITD conflicts with existing member: void bugs.Advised.f()

 

Let me also say that in my real use-case, the jar produced by task1 will contain aspects that should apply to clients thereof, and as such, that jar should indeed be in the aspectpath (not the classpath) for task2 (unless I am seriously misunderstanding something).

 

How to stop this duplicate attempt to ITD?

 

Josh

---

Josh is correct that using aspectpath will pull in the aspects for application to other types, the problem is that when pulling in type Advised, we reapply known ITDs and it clashes with the one added in the original build of the type.

Two possible fixes that I am looking at:
- don't reapply the ITDs (they are added to ensure type system is consistent) to binary types pulled in from the aspectpath
- recognize the ITD is clashing with a member previously applied through the same ITD

I am not sure we can determine it came from the aspectpath at the point the clash is detected.  I have option (2) already implemented, but I'll try a little more with option 1 before giving up ;)</column>
            <column name="report_time">2007-10-18 05:54:26</column>
            <column name="report_timestamp">1192700000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">797ec4d</column>
            <column name="commit_timestamp">1192710000</column>
            <column name="files">weaver/src/org/aspectj/weaver/ResolvedType.java</column>
            <column name="result">19:weaver/src/org/aspectj/weaver/ResolvedType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">155</column>
            <column name="bug_id">175039</column>
            <column name="summary">Bug 175039  ArrayIndexOutOfBoundException Bug with Nested Type in TypeParameters</column>
            <column name="description">I debugged this stack trace from load-time weaving (ajcore files are also available). I found that the signature argument to TypeFactory.createTypeFromSignature(String) is Pjava/lang/Enum&lt;Ljavax/jws/soap/SOAPBinding$ParameterStyle;&gt;; but the method is erroneously using an empty array of parameters, because it thinks the $ relates to the generic type, not the parameter. It should be fairly easy to reproduce with a test case and to fix with a patch - I'll look at it some more tonight or this week.

java.lang.ArrayIndexOutOfBoundsException
	at org.aspectj.weaver.ResolvedType.getMemberParameterizationMap(ResolvedType.java:698)
	at org.aspectj.weaver.ReferenceType.getDeclaredInterfaces(ReferenceType.java:406)
	at org.aspectj.weaver.ResolvedType.getDirectSupertypes(ResolvedType.java:65)
	at org.aspectj.weaver.patterns.TypePattern.matchesSubtypes(TypePattern.java:182)
	at org.aspectj.weaver.patterns.TypePattern.matchesSubtypes(TypePattern.java:169)
	at org.aspectj.weaver.patterns.TypePattern.matchesStatically(TypePattern.java:119)
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.accept(ClassLoaderWeavingAdaptor.java:621)
	at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:253)
	at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:78)
	at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)
	at sun.instrument.TransformerManager.transform(TransformerManager.java:122)
	at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155)
	at java.lang.ClassLoader.defineClass(Ljava.lang.String;[BIILjava.security.ProtectionDomain;)Ljava.lang.Class;(Unknown Source)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:56)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:195)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
	at java.lang.ClassLoader.loadClass(Ljava.lang.String;Z)Ljava.lang.Class;(Unknown Source)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)
	at java.lang.ClassLoader.loadClass(Ljava.lang.String;)Ljava.lang.Class;(Unknown Source)
	at java.lang.ClassLoader.loadClassFromNative(Ljava.lang.String;)Ljava.lang.Class;(Unknown Source)
	at java.lang.Class.forName(Ljava.lang.String;ZLjava.lang.ClassLoader;)Ljava.lang.Class;(Unknown Source)
	at jrockit.reflect.MemberAccess.getClassFromFieldDesc(Ljava.lang.String;ILjava.lang.ClassLoader;)Ljava.lang.Class;(Unknown Source)
	at jrockit.reflect.MemberAccess.getReturnClassFromMethodDesc(Ljava.lang.String;Ljava.lang.ClassLoader;)Ljava.lang.Class;(Unknown Source)</column>
            <column name="report_time">2007-02-21 16:02:15</column>
            <column name="report_timestamp">1172090000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">579ec14</column>
            <column name="commit_timestamp">1173180000</column>
            <column name="files">weaver/src/org/aspectj/weaver/TypeFactory.java
weaver/testsrc/org/aspectj/weaver/TypeXTestCase.java</column>
            <column name="result">51:weaver/testsrc/org/aspectj/weaver/TypeXTestCase.java
72:weaver/src/org/aspectj/weaver/TypeFactory.java</column>
        </table>
        <table name="aspectj">
            <column name="id">156</column>
            <column name="bug_id">171667</column>
            <column name="summary">Bug 171667  When ordering a Clean with Build Automatico I receive the error below.</column>
            <column name="description">When executing an Clean Project in Eclipse with Automatic Building I receive the error below.

line from the top stack, e.g. &quot;SomeFile.jara:243&quot;

java.lang.NullPointerException
at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.methodMustOverride(AjProblemReporter.java:380)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:153)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:400)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDe ... pter.java:107)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

NullPointerException thrown: null</column>
            <column name="report_time">2007-01-25 09:24:17</column>
            <column name="report_timestamp">1169740000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">4177bed</column>
            <column name="commit_timestamp">1171620000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</column>
            <column name="result">2:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</column>
        </table>
        <table name="aspectj">
            <column name="id">157</column>
            <column name="bug_id">170102</column>
            <column name="summary">Bug 170102  iajc Ant task doesn't support all warn options</column>
            <column name="description">The iajc Ant task currently supports only a few of the options provided by the ajc compiler.

It would be nice if it could support them all so that builds done using the Ant task generate the same errors/warnings as the ones done within the Eclipse IDE.</column>
            <column name="report_time">2007-01-10 12:16:53</column>
            <column name="report_timestamp">1168450000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5336603</column>
            <column name="commit_timestamp">1168500000</column>
            <column name="files">taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</column>
            <column name="result">3:taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</column>
        </table>
        <table name="aspectj">
            <column name="id">158</column>
            <column name="bug_id">165148</column>
            <column name="summary">Bug 165148  [ltw] Unnecessary exceptions during concretization of aspects in aop.xml</column>
            <column name="description">Due to the mechanism used in ConcreteAspectCodeGen I see a lot of unnecessary exceptions created.  The problem is rather than looking up a type to confirm it doesn't exist before defining it, the code uses a resolve() to check if it exists and resolve attempts to build it if it isnt there.  Because the classloader will never find an aop.xml defined type (the class doesn't exist anywhere on the classpath), a spurious exception is created and sometimes traced (if collecting a trace).  I'm going to change the code to do a lookup, that is all that is really necessary.</column>
            <column name="report_time">2006-11-20 08:26:11</column>
            <column name="report_timestamp">1164030000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">e8d2556</column>
            <column name="commit_timestamp">1164030000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java</column>
            <column name="result">3:loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java</column>
        </table>
        <table name="aspectj">
            <column name="id">159</column>
            <column name="bug_id">164288</column>
            <column name="summary">Bug 164288  Can no longer compile JDK 1.5 projects with apsectj for JDeveloper</column>
            <column name="description">I am working with AspectJ 1.5.2 in JDeveloper and have found that it is 
not possible to convince the compiler to use JDK 5 constructs.
 
It appears that there is a method on AjcBuildOptions called 
getJavaOptionsMap() which is currently implemented to return null in all 
cases. In CompilerAdapter.configureBuildOptions areound line 358 the 
code tried to access this object to access whether to use JDK 5 
constructs or not. Since the return value is always null the project is 
never properly configured. 
 
I notice that the only other implementation of the root interface is 
CoreBuildOption which appears to directly return a structure from the 
eclipse class JavaProject. It would appear that this interface is 
breaking the rules on abstraction, is this the correct read on the 
situation? 

If so the solution would either be to implement a CoreBuildOption class 
to correctly work with the ADJE project adapter class or alter the code in
Compiler adapter to correct use the properties in project adapter. I think
that the latter is probably the best as BuildOption assumes a depedency on
Eclipse which shouldn't be there.

We do currently have customer, one in nato, who are currently having to 
work around this issue so it would be good to get it resolve for 1.5.3 if possible
But I know I am a bit late for that now do to a lost email.</column>
            <column name="report_time">2006-11-13 04:04:24</column>
            <column name="report_timestamp">1163410000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">c54fa62</column>
            <column name="commit_timestamp">1163770000</column>
            <column name="files">ajde/src/org/aspectj/ajde/BuildOptionsAdapter.java
ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java
ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java</column>
            <column name="result">3:ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java
4:ajde/src/org/aspectj/ajde/BuildOptionsAdapter.java
10:ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">160</column>
            <column name="bug_id">161502</column>
            <column name="summary">Bug 161502  UnsupportedOperationException thrown: unable to parameterize unresolved type: Pjava/util/List&lt;+Ljava/lang/Object; &gt;;</column>
            <column name="description">Generic parameters (like List&lt;? extends T&gt;) in pointcuts throw UnsupportedOperationException.

java.lang.UnsupportedOperationException
at org.aspectj.weaver.UnresolvedType.parameterize(UnresolvedType.java: 220)
at org.aspectj.weaver.patterns.ExactTypePattern.parameterizeWith (ExactTypePattern.java:244)
at org.aspectj.weaver.patterns.SignaturePattern.parameterizeWith (SignaturePattern.java:265)
at org.aspectj.weaver.patterns.KindedPointcut.parameterizeWith (KindedPointcut.java:381)
at org.aspectj.weaver.bcel.BcelAdvice.parameterizeWith (BcelAdvice.java:93)
at org.aspectj.weaver.ResolvedType.getDeclaredAdvice (ResolvedType.java:710)
at org.aspectj.weaver.ResolvedType.getDeclaredShadowMungers (ResolvedType.java:739)
at org.aspectj.weaver.ResolvedType.collectShadowMungers (ResolvedType.java:575)
at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers (ResolvedType.java:504)
at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect (CrosscuttingMembersSet.java:68)
at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect (CrosscuttingMembersSet.java:57)
at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java: 450)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave (AjCompilerAdapter.java:299)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling (AjCompilerAdapter.java:192)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc $afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2 $f9cc9ca0(CompilerAdapter.aj:70)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile (Compiler.java:367)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation (AjBuildManager.java:887)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuildManager.java:244)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (AjBuildManager.java:163)
at org.aspectj.ajde.internal.CompilerAdapter.compile (CompilerAdapter.java:122)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run (AspectJBuildManager.java:191)

UnsupportedOperationException thrown: unable to parameterize unresolved type: Pjava/util/List&lt;+Ljava/lang/Object;&gt;;

To reproduce this exception compile the following code snippet.

import java.util.ArrayList;
import java.util.List;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;

public class Main {

  public List&lt;? extends Element&gt; getElements() {
    return new ArrayList&lt;Element&gt;();
  }

  class Element {};

  @Aspect
  static abstract class Base&lt;T&gt; {
    @Around(&quot;call(List&lt;? extends T&gt; *.*(..))&quot;)
    public List&lt;? extends T&gt; elementList(ProceedingJoinPoint thisJoinPoint) {
      try {
        return (List&lt;? extends T&gt;)thisJoinPoint.proceed();
      } catch (Throwable e) {
        throw new RuntimeException(e);
      }
    }
  }

  @Aspect
  static class Concrete extends Base&lt;Element&gt; {}

  public static void main(String[] args) {
    new Main().getElements();
  }
	
}</column>
            <column name="report_time">2006-10-18 22:23:58</column>
            <column name="report_timestamp">1161220000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7b40e7e</column>
            <column name="commit_timestamp">1161690000</column>
            <column name="files">tests/bugs153/pr161502/Main.java
tests/bugs153/pr161502/Main2.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
weaver/src/org/aspectj/weaver/BoundedReferenceType.java
weaver/src/org/aspectj/weaver/Checker.java
weaver/src/org/aspectj/weaver/ReferenceType.java
weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java
weaver/src/org/aspectj/weaver/ResolvedType.java
weaver/src/org/aspectj/weaver/TypeVariable.java
weaver/src/org/aspectj/weaver/TypeVariableReferenceType.java
weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java
weaver/src/org/aspectj/weaver/internal/tools/PointcutDesignatorHandlerBasedPointcut.java
weaver/src/org/aspectj/weaver/patterns/AndAnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/AndPointcut.java
weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java
weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java
weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java
weaver/src/org/aspectj/weaver/patterns/BindingAnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/BindingTypePattern.java
weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java
weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java
weaver/src/org/aspectj/weaver/patterns/Declare.java
weaver/src/org/aspectj/weaver/patterns/DeclareAnnotation.java
weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java
weaver/src/org/aspectj/weaver/patterns/DeclareParents.java
weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java
weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java
weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java
weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java
weaver/src/org/aspectj/weaver/patterns/HasMemberTypePattern.java
weaver/src/org/aspectj/weaver/patterns/IfPointcut.java
weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java
weaver/src/org/aspectj/weaver/patterns/NotAnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/NotPointcut.java
weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java
weaver/src/org/aspectj/weaver/patterns/OrAnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/OrPointcut.java
weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java
weaver/src/org/aspectj/weaver/patterns/PerCflow.java
weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java
weaver/src/org/aspectj/weaver/patterns/PerObject.java
weaver/src/org/aspectj/weaver/patterns/PerSingleton.java
weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java
weaver/src/org/aspectj/weaver/patterns/Pointcut.java
weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java
weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java
weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java
weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java
weaver/src/org/aspectj/weaver/patterns/TypePattern.java
weaver/src/org/aspectj/weaver/patterns/TypePatternList.java
weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java
weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java
weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java</column>
            <column name="result">4:weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
5:weaver/src/org/aspectj/weaver/ResolvedType.java
7:weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java
11:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
15:weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java
23:weaver/src/org/aspectj/weaver/patterns/TypePattern.java
27:weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java
32:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java
34:weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java
44:weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java
47:weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java
51:weaver/src/org/aspectj/weaver/patterns/PerSingleton.java
54:weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java
59:weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java
61:weaver/src/org/aspectj/weaver/patterns/Pointcut.java
63:weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java
69:weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java
71:weaver/src/org/aspectj/weaver/ReferenceType.java
72:weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java
78:weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java
80:weaver/src/org/aspectj/weaver/internal/tools/PointcutDesignatorHandlerBasedPointcut.java
81:weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java
82:weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java
84:weaver/src/org/aspectj/weaver/patterns/TypePatternList.java
85:weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java
94:weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java
98:weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java
101:weaver/src/org/aspectj/weaver/patterns/IfPointcut.java
106:weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java
107:weaver/src/org/aspectj/weaver/patterns/PerObject.java
110:weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java
111:weaver/src/org/aspectj/weaver/patterns/PerCflow.java
115:weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java
125:weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java
130:weaver/src/org/aspectj/weaver/patterns/OrPointcut.java
136:weaver/src/org/aspectj/weaver/patterns/DeclareAnnotation.java
138:weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java
144:weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java
150:weaver/src/org/aspectj/weaver/patterns/HasMemberTypePattern.java
151:weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java
152:weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java
156:weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java
171:weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java
172:weaver/src/org/aspectj/weaver/patterns/Declare.java
177:weaver/src/org/aspectj/weaver/patterns/AndPointcut.java
180:weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java
187:weaver/src/org/aspectj/weaver/patterns/NotPointcut.java
211:weaver/src/org/aspectj/weaver/patterns/BindingTypePattern.java
218:weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java
224:weaver/src/org/aspectj/weaver/Checker.java
236:weaver/src/org/aspectj/weaver/patterns/OrAnnotationTypePattern.java
240:weaver/src/org/aspectj/weaver/TypeVariable.java
252:weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java
255:weaver/src/org/aspectj/weaver/patterns/AndAnnotationTypePattern.java
256:weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java
263:weaver/src/org/aspectj/weaver/patterns/BindingAnnotationTypePattern.java
266:weaver/src/org/aspectj/weaver/patterns/DeclareParents.java
267:weaver/src/org/aspectj/weaver/patterns/NotAnnotationTypePattern.java
511:weaver/src/org/aspectj/weaver/BoundedReferenceType.java
841:weaver/src/org/aspectj/weaver/TypeVariableReferenceType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">161</column>
            <column name="bug_id">149908</column>
            <column name="summary">Bug 149908  NPE in org.aspectj.weaver.MemberImpl.getModifiers(MemberImpl.java:526)</column>
            <column name="description">java.lang.NullPointerException
	at org.aspectj.weaver.MemberImpl.getModifiers(MemberImpl.java:526)
	at org.aspectj.weaver.MemberImpl.getMethodSignatureString(MemberImpl.java:824)
	at org.aspectj.weaver.MemberImpl.getSignatureString(MemberImpl.java:753)
	at org.aspectj.weaver.bcel.LazyClassGen.initializeTjp(LazyClassGen.java:1039)
	at org.aspectj.weaver.bcel.LazyClassGen.initializeAllTjps(LazyClassGen.java:1016)
	at org.aspectj.weaver.bcel.LazyClassGen.addAjcInitializers(LazyClassGen.java:964)
	at org.aspectj.weaver.bcel.LazyClassGen.writeBack(LazyClassGen.java:502)
	at org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable(LazyClassGen.java:652)
	at org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor(BcelWeaver.java:1337)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1309)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1127)
	at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:284)
	at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:212)
	at org.aspectj.weaver.loadtime.WeavingURLClassLoader.defineClass(WeavingURLClassLoader.java:125)
	at org.aspectj.weaver.ExtensibleURLClassLoader.defineClass(ExtensibleURLClassLoader.java:80)
	at org.aspectj.weaver.ExtensibleURLClassLoader.findClass(ExtensibleURLClassLoader.java:46)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)
Exception in thread &quot;main&quot; 

public aspect JoinPointTraceAspect {
	
	private int _callDepth = -1;
	
	pointcut tracePoints() : !within(JoinPointTraceAspect);
	
	before() : tracePoints() {
		_callDepth++; print(&quot;Before&quot;, thisJoinPoint);
	}
	
	after() : tracePoints() {
		print(&quot;After&quot;, thisJoinPoint);
		_callDepth--;
	}
	
	private void print(String prefix, Object message) {
		for(int i = 0, spaces = _callDepth * 2; i &lt; spaces; i++) {
			System.out.print(&quot; &quot;);
		}
		
		System.out.println(prefix + &quot;: &quot; + message);
	}
}

aspect EdtRuleChecker {
    private boolean isStressChecking = true;
    
    public pointcut anySwingMethods(JComponent c):
         target(c) &amp;&amp; call(* *(..));

    public pointcut threadSafeMethods():         
         call(* repaint(..)) || 
         call(* revalidate()) ||
         call(* invalidate()) ||
         call(* getListeners(..)) ||
         call(* add*Listener(..)) ||
         call(* remove*Listener(..));

    //calls of any JComponent method, including subclasses
    before(JComponent c): anySwingMethods(c) &amp;&amp; 
                          !threadSafeMethods() &amp;&amp;
                          !within(EdtRuleChecker) {
     if(!SwingUtilities.isEventDispatchThread() &amp;&amp;
         (isStressChecking || c.isShowing())) 
     {
             System.err.println(thisJoinPoint.getSourceLocation());
             System.err.println(thisJoinPoint.getSignature());
             System.err.println();
      }
    }

    //calls of any JComponent constructor, including subclasses
    before(): call(JComponent+.new(..)) {
      if (isStressChecking &amp;&amp; !SwingUtilities.isEventDispatchThread()) {
          System.err.println(thisJoinPoint.getSourceLocation());
          System.err.println(thisJoinPoint.getSignature() +
                                &quot; *constructor*&quot;);
          System.err.println();
      }
    }
}

Running with SwingSet2.</column>
            <column name="report_time">2006-07-06 17:24:00</column>
            <column name="report_timestamp">1152220000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">757004c</column>
            <column name="commit_timestamp">1161600000</column>
            <column name="files">tests/bugs153/pr149908/C.java
tests/bugs153/pr149908/C1.java
tests/bugs153/pr149908/MyStringBuilder.java
tests/bugs153/pr149908/withoutMethod/MyStringBuilder.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
weaver/src/org/aspectj/weaver/MemberImpl.java</column>
            <column name="result">7:weaver/src/org/aspectj/weaver/MemberImpl.java
12:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">162</column>
            <column name="bug_id">160496</column>
            <column name="summary">Bug 160496  ajdoc Main class needs refactoring for ease of use</column>
            <column name="description">Whilst looking at other ajdoc bugs it was slightly confusing to read the main ajdoc method. I didn't want to include the refactoring of this within patches for the other bugs as this is mearly for ease of use. Therefore, raising this enhancement to cover it.</column>
            <column name="report_time">2006-10-11 11:41:29</column>
            <column name="report_timestamp">1160580000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">efe6cc7</column>
            <column name="commit_timestamp">1161600000</column>
            <column name="files">ajdoc/src/org/aspectj/tools/ajdoc/Main.java</column>
            <column name="result">2:ajdoc/src/org/aspectj/tools/ajdoc/Main.java</column>
        </table>
        <table name="aspectj">
            <column name="id">163</column>
            <column name="bug_id">161217</column>
            <column name="summary">Bug 161217  NPE in BcelAdvice</column>
            <column name="description">I've been playing with some aspect deployment models and got into this error during project rebuild from AJDT:

java.lang.NullPointerException
at org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:199)
at org.aspectj.weaver.Shadow.implementMungers(Shadow.java:699)
at org.aspectj.weaver.Shadow.implement(Shadow.java:471)
at org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2832)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:506)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeave ... lasses 
when weaving 
when batch building BuildConfig[...] #Files=6

Here is the aspect and classes it is applied to:

-----
@Aspect(&quot;percflow(execution(* InstrumentedBean.getProperty2()))&quot;)
public class GetFieldAtAspect {

  @Around(&quot;execution(* ConfigurableBean.getProperty2())&quot;)
  public Object onGet(ProceedingJoinPoint jp) throws Throwable {
    return jp.proceed();
  }
}
------
import org.springframework.beans.factory.InitializingBean;


public class InstrumentedBean implements InitializingBean, IInstrumentedBean {

  private ConfigurableBean configurableBean;

  private String value;

  private transient String transientValue = &quot;aaa&quot;;

  
  public void afterPropertiesSet() throws Exception {
    this.configurableBean = new ConfigurableBean();
  }
  
  public String getProperty1() {
    synchronized(this) {
      return this.configurableBean.getProperty1();
    }
  }

  public String getProperty2() {
    synchronized(this) {
      return this.configurableBean.getProperty2();
    }
  }
  
  public void setValue(String value) {
    synchronized(this) {
      this.value = value;
    }
  }

  public Object getValue() {
    synchronized(this) {
      return value;
    }
  }

  public Object getTransientValue() {
    return transientValue;
  }
  
  public void setTransientValue(String transientValue) {
    this.transientValue = transientValue;
  }

}

------

import java.io.Serializable;

import org.springframework.beans.factory.annotation.Configurable;


@Configurable
public class ConfigurableBean implements Serializable {
  private static final long serialVersionUID = 1L;
  
  private String property1;
  private String property2;
  
  public ConfigurableBean() {
  }
  
  public String getProperty1() {
    return this.property1;
  }
  
  public String getProperty2() {
    return this.property2;
  }
  
  public void setProperty1(String property1) {
    this.property1 = property1;
  }
  
  public void setProperty2(String property2) {
    this.property2 = property2;
  }
  
}</column>
            <column name="report_time">2006-10-17 08:19:24</column>
            <column name="report_timestamp">1161090000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">044542c</column>
            <column name="commit_timestamp">1161270000</column>
            <column name="files">tests/bugs153/pr161217/AtAspectJAspect.java
tests/bugs153/pr161217/C.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</column>
            <column name="result">2:weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
8:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">164</column>
            <column name="bug_id">149293</column>
            <column name="summary">Bug 149293  declare annotation problem: AIOOBE at ProblemReporter.java:2992</column>
            <column name="description">This has been happening a lot, but I'm having trouble figuring out why it's happening.  It's always &quot;5&quot;.  It happens both in Eclipse and from the command line.

java.lang.ArrayIndexOutOfBoundsException
at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.invalidType(ProblemReporter.java:2992)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.reportInvalidType(TypeReference.java:170)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:136)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:123)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Annotation.resolveType(Annotation.java:214)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveAnnotations(ASTNode.java:436)
at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getAnnotationTypes(EclipseSourceType.java:443)
at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.isAnnotationStyleAspect(EclipseSourceType.java:123)
at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.isAspect(EclipseSourceType.java:108)
at org.aspectj.weaver.ReferenceType.isAspect(ReferenceType.java:159)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.verifyAnyTypeParametersMeetBounds(AjLookupEnvironment.java:269)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:228)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:887)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:244)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:163)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

ArrayIndexOutOfBoundsException thrown: 5</column>
            <column name="report_time">2006-06-30 08:20:01</column>
            <column name="report_timestamp">1151670000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">bc2f36f</column>
            <column name="commit_timestamp">1161070000</column>
            <column name="files">tests/multiIncremental/PR149293_1/base/src/mypackage/MyAbstractClass.java
tests/multiIncremental/PR149293_1/base/src/mypackage/MyAspect.java
tests/multiIncremental/PR149293_1/base/src/mypackage/MyBaseClass.java
tests/multiIncremental/PR149293_1/base/src/mypackage/MyInterface.java
tests/multiIncremental/PR149293_1/inc1/src/mypackage/MySubclass.java
tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
            <column name="result">6:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">165</column>
            <column name="bug_id">160167</column>
            <column name="summary">Bug 160167  NPE when using crossrefs option for iajc ant task</column>
            <column name="description">The ant task is shown below.  I ommited the full paths to the values of inpath, outJar, and argfiles, because they are somewhat long (hence the &quot;...&quot; before the file names):

&lt;iajc  
crossrefs=&quot;true&quot; argfiles=&quot;...\weave-jars.txt&quot; inpath=&quot;...\org.eclipse.core.runtime_3.2.0.v20060603.jar&quot; outJar=&quot;...\org.eclipse.core.runtime_3.2.0.v20060603_woven.jar&quot;&gt;
  &lt;classpath&gt;
    &lt;pathelement location=&quot;C:\aspectj1.5\lib\aspectjrt.jar&quot;/&gt;
      &lt;fileset dir=&quot;${plugins.dir}&quot;&gt;
        &lt;include name=&quot;**/*.jar&quot;/&gt;
      &lt;/fileset&gt;
  &lt;/classpath&gt;
&lt;/iajc&gt;

My argfile only contains the absolute path of a single .aj file, which contains one aspect.  The aspect is shown below.  It is very basic - advice bodies simply toggle a boolean variable.  

public aspect FFDC {
  public static boolean bit = false;
  protected pointcut ffdcScope(): within(org.eclipse..*);	
  protected pointcut excluded():  within(org.eclipse.ffdc.FFDC+)
	|| within(org.eclipse.core.internal.runtime.PlatformActivator);
	
  before(CoreException c): ffdcScope() &amp;&amp; !excluded() 
      &amp;&amp; handler(CoreException+) &amp;&amp; args(c) {
    bit = !bit;
  }
	
  after() throwing(CoreException c): ffdcScope() &amp;&amp; !excluded() &amp;&amp; !handler(*) {
    bit = !bit;
  }
	
  after(Plugin activator): execution(void PlatformActivator.start(..)) 
      &amp;&amp; this(activator) {
    bit = !bit;
  }
}

This task worked properly before I added &quot;crossrefs=true&quot;.  After adding this option, I get the following error:

weave-C:\eclipse\sdk-aspect-package\eclipse\plugins\org.eclipse.core.runtime_3.2.0.v20060603.jar:
     [iajc] abort ABORT -- (NullPointerException) null
     [iajc] null
     [iajc] java.lang.NullPointerException
     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:313)
     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:163)
     [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)
     [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)
     [iajc]     at org.aspectj.tools.ajc.Main.run(Main.java:367)
     [iajc]     at org.aspectj.tools.ajc.Main.runMain(Main.java:246)
     [iajc]     at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTask.java:1282)
     [iajc]     at org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1080)
     [iajc]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)
     [iajc]     at org.apache.tools.ant.Task.perform(Task.java:364)
     [iajc]     at org.apache.tools.ant.Target.execute(Target.java:341)
     [iajc]     at org.apache.tools.ant.Target.performTasks(Target.java:369)
     [iajc]     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1216)
     [iajc]     at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:37)
     [iajc]     at org.apache.tools.ant.Project.executeTargets(Project.java:1068)
     [iajc]     at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:382)
     [iajc]     at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:107)
     [iajc]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)
     [iajc]     at org.apache.tools.ant.Task.perform(Task.java:364)
     [iajc]     at org.apache.tools.ant.Target.execute(Target.java:341)
     [iajc]     at org.apache.tools.ant.Target.performTasks(Target.java:369)
     [iajc]     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1216)
     [iajc]     at org.apache.tools.ant.Project.executeTarget(Project.java:1185)
     [iajc]     at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:40)
     [iajc]     at org.apache.tools.ant.Project.executeTargets(Project.java:1068)
     [iajc]     at org.apache.tools.ant.Main.runBuild(Main.java:668)
     [iajc]     at org.apache.tools.ant.Main.startAnt(Main.java:187)
     [iajc]     at org.apache.tools.ant.launch.Launcher.run(Launcher.java:246)
     [iajc]     at org.apache.tools.ant.launch.Launcher.main(Launcher.java:67)</column>
            <column name="report_time">2006-10-08 18:51:11</column>
            <column name="report_timestamp">1160350000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f7508cf</column>
            <column name="commit_timestamp">1160400000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
            <column name="result">3:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
        </table>
        <table name="aspectj">
            <column name="id">166</column>
            <column name="bug_id">159896</column>
            <column name="summary">Bug 159896  advice from injars do not have unique handles with the JDTLikeHandleProvider</column>
            <column name="description">Advice of the same kind contained in the same aspect currently do not have unique handles if the aspect is on the aspectpath.</column>
            <column name="report_time">2006-10-05 11:44:57</column>
            <column name="report_timestamp">1160060000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d532892</column>
            <column name="commit_timestamp">1160150000</column>
            <column name="files">tests/features153/jdtlikehandleprovider/ClassForAspectpath.java
tests/src/org/aspectj/systemtest/ajc153/JDTLikeHandleProviderTests.java
weaver/src/org/aspectj/weaver/ShadowMunger.java
weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java</column>
            <column name="result">6:tests/src/org/aspectj/systemtest/ajc153/JDTLikeHandleProviderTests.java
37:weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java
60:weaver/src/org/aspectj/weaver/ShadowMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">167</column>
            <column name="bug_id">159143</column>
            <column name="summary">Bug 159143  subtype pattern not working for declare annotation on method</column>
            <column name="description">Using AspectJ 1.5.3.200609271036, when declaring an annotation on a method, get unexpected error when using subtype wildcard for the declaring type.  E.g.,

  declare @method : void Foo+.foo() : @MethodAnnotation;

Error text: &quot;The method 'void Foo+.foo()' does not exist&quot;</column>
            <column name="report_time">2006-09-28 12:47:33</column>
            <column name="report_timestamp">1159460000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">513564a</column>
            <column name="commit_timestamp">1159950000</column>
            <column name="files">tests/bugs153/pr159143/DeclareMethodAnnotation.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</column>
            <column name="result">16:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">168</column>
            <column name="bug_id">156904</column>
            <column name="summary">Bug 156904  Incorrect warning when advising a private method of a private inner class</column>
            <column name="description">The Eclipse AJDT give an incorrect warning when you want to advise a private method of a private inner class.


When I want to advise a private method in a private inner class, like this

public class Outer
{
   private class Inner
   {
      private void myMethod()
   }
}

Using the following poincut:

poincut innerpointcut():execution( * Outer.Inner.myMethod() );

and advice:

before():innerpointcut()
{
   System.out.println( &quot;executing!&quot; );
}

I get a warning &quot;invalidAbsoluteTypeName&quot; next to my pointcut, but next to the advice, there is a marker that points to the private method.</column>
            <column name="report_time">2006-09-11 13:39:27</column>
            <column name="report_timestamp">1158000000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">782ade2</column>
            <column name="commit_timestamp">1159890000</column>
            <column name="files">tests/bugs153/pr156904/inDiffPkgAndImport/Outer.java
tests/bugs153/pr156904/inDiffPkgWithoutImport/Outer.java
tests/bugs153/pr156904/inSamePkg/Outer.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</column>
            <column name="result">5:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
15:weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</column>
        </table>
        <table name="aspectj">
            <column name="id">169</column>
            <column name="bug_id">152366</column>
            <column name="summary">Bug 152366  LTW Within Patterns Should Accept AND For Consistency</column>
            <column name="description">The load-time weaving definition system accepts AND in addition to &amp;amp;&amp;amp; for pointcuts, but it silently accepts and then fails to work with type patterns that use AND. Such type patterns are important when creating exceptions (e.g., excluding weblogic..* &amp;amp;&amp;amp; !weblogic.jdbc..*) and using AND is also helpful here.

I've attached a patch to support this and tests to show it's working.</column>
            <column name="report_time">2006-07-31 14:44:20</column>
            <column name="report_timestamp">1154370000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7b831ff</column>
            <column name="commit_timestamp">1159890000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java
tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java</column>
            <column name="result">8:tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java
71:loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</column>
        </table>
        <table name="aspectj">
            <column name="id">170</column>
            <column name="bug_id">158573</column>
            <column name="summary">Bug 158573  changing value of variable in aspect results in adviceDidNotMatch warning</column>
            <column name="description"></column>
            <column name="report_time">2006-09-25 11:09:03</column>
            <column name="report_timestamp">1159200000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">cd9fd11</column>
            <column name="commit_timestamp">1159540000</column>
            <column name="files">tests/multiIncremental/PR158573/base/C.java
tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
weaver/src/org/aspectj/weaver/CrosscuttingMembers.java
weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
6:weaver/src/org/aspectj/weaver/CrosscuttingMembers.java
37:weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</column>
        </table>
        <table name="aspectj">
            <column name="id">171</column>
            <column name="bug_id">158624</column>
            <column name="summary">Bug 158624  Compiler Error: generics and arrays</column>
            <column name="description">OK, not sure what to report here or what info you need, but here's the set up, message, and erroreous class.  I don't understand the errors from the compiler enough to parse down the erroneous file to something that contains only the bug, but I could if direction were given.

Here's my set up:
Eclipse SDK
Version: 3.2.0
Build id: M20060629-1905

With AJDT:
Eclipse AspectJ Development Tools
Version: 1.4.1.200608141223
AspectJ version: 1.5.3.200608210848

Here's the bug dump from the compiler inside Eclipse:
java.lang.UnsupportedOperationException
at org.aspectj.weaver.UnresolvedType.parameterize(UnresolvedType.java:221)
at org.aspectj.weaver.ResolvedMemberImpl.parameterize(ResolvedMemberImpl.java:680)
at org.aspectj.weaver.ResolvedMemberImpl.parameterize(ResolvedMemberImpl.java:690)
at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:643)
at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:597)
at org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:508)
at org.aspectj.weaver.ResolvedType$4.get(ResolvedType.java:226)
at org.aspectj.weaver.Iterators$3$1.hasNext(Iterators.java:118)
at org.aspectj.weaver.Iterators$5.hasNext(Iterators.java:171)
at org.aspectj.weaver.Iterators$3.hasNext(Iterators.java:128)
at org.aspectj.weaver.ResolvedType.lookupMember(ResolvedType.java:346)
at org.aspectj.weaver.ResolvedType.lookupMethod(ResolvedType.java:327)
at org.aspectj.weaver.World.resolve(World.java:523)
at org.aspectj.weaver.MemberImpl.resolve(MemberImpl.java:93)
at org.aspectj.weaver.JoinPointSignatureIterator.addSignaturesUpToFirstDefiningMember(JoinPointSignatureIterator.java:109)
at org.aspectj.weaver.JoinPointSignatureIterator.&lt;init&gt;(JoinPointSignatureIterator.java:51)
at org.aspectj.weaver.MemberImpl.getJoinPointSignatures(MemberImpl.java:943)
at org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:286)
at org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:106)
at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)
at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:51)
at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)
at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:75)
at org.aspectj.weaver.Advice.match(Advice.java:112)
at org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:117)
at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2806)
at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction(BcelClassWeaver.java:2768)
at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2506)
at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2332)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:494)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:119)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1606)
at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1557)
at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1335)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1155)
at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:455)
at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:392)
at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:380)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:98)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:533)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:892)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:246)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:165)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

trouble in: 
public class com.wec.lib.util.test.SyncValueTest extends junit.framework.TestCase:
  private com.wec.lib.util.test.SyncValueTest$SyncInteger a
  private com.wec.lib.util.test.SyncValueTest$SyncInteger b
  private com.wec.lib.util.test.SyncValueTest$SyncInteger c
  private com.wec.lib.util.test.SyncValueTest$SyncInteger d
  private com.wec.lib.util.test.SyncValueTest$SyncInteger e
  public void &lt;init&gt;():
                    ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 17)
                    INVOKESPECIAL junit.framework.TestCase.&lt;init&gt; ()V
    constructor-execution(void com.wec.lib.util.test.SyncValueTest.&lt;init&gt;())
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 27)
    |               NEW com.wec.lib.util.test.SyncValueTest$SyncInteger
    |               DUP
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               ICONST_1
    |               INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.&lt;init&gt; (Lcom/wec/lib/util/test/SyncValueTest;I)V
    |               PUTFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 28)
    |               NEW com.wec.lib.util.test.SyncValueTest$SyncInteger
    |               DUP
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               ICONST_2
    |               INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.&lt;init&gt; (Lcom/wec/lib/util/test/SyncValueTest;I)V
    |               PUTFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 29)
    |               NEW com.wec.lib.util.test.SyncValueTest$SyncInteger
    |               DUP
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               ICONST_3
    |               INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.&lt;init&gt; (Lcom/wec/lib/util/test/SyncValueTest;I)V
    |               PUTFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 30)
    |               NEW com.wec.lib.util.test.SyncValueTest$SyncInteger
    |               DUP
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               ICONST_4
    |               INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.&lt;init&gt; (Lcom/wec/lib/util/test/SyncValueTest;I)V
    |               PUTFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 31)
    |               NEW com.wec.lib.util.test.SyncValueTest$SyncInteger
    |               DUP
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               ICONST_5
    |               INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.&lt;init&gt; (Lcom/wec/lib/util/test/SyncValueTest;I)V
    |               PUTFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               RETURN   (line 17)
    constructor-execution(void com.wec.lib.util.test.SyncValueTest.&lt;init&gt;())
  end public void &lt;init&gt;()

  public void testSyncValueGroup()    org.aspectj.weaver.MethodDeclarationLineNumber: 39:1035
:
    method-execution(void com.wec.lib.util.test.SyncValueTest.testSyncValueGroup())
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 42)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               ICONST_1
    |               ANEWARRAY com.wec.lib.util.SyncValueGroup
    |               DUP
    |               ICONST_0
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               AASTORE
    | method-call(void com.wec.lib.util.test.SyncValueTest$SyncInteger.link(com.wec.lib.util.SyncValueGroup[]))
    | |             INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link ([Lcom/wec/lib/util/SyncValueGroup;)V
    | method-call(void com.wec.lib.util.test.SyncValueTest$SyncInteger.link(com.wec.lib.util.SyncValueGroup[]))
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 43)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               IF_ACMPNE L0
    |               ICONST_1
    |               GOTO L1
    |           L0: ICONST_0
    |           L1: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ICONST_1   (line 44)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L2
    |               ICONST_1
    |               GOTO L3
    |           L2: ICONST_0
    |           L3: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 45)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               ICONST_2
    |               INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V
    |               ICONST_2   (line 46)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L4
    |               ICONST_1
    |               GOTO L5
    |           L4: ICONST_0
    |           L5: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 47)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               ICONST_1
    |               ANEWARRAY com.wec.lib.util.SyncValueGroup
    |               DUP
    |               ICONST_0
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               AASTORE
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link ([Lcom/wec/lib/util/SyncValueGroup;)V
    |               ICONST_2   (line 48)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L6
    |               ICONST_1
    |               GOTO L7
    |           L6: ICONST_0
    |           L7: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 49)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               ICONST_3
    |               INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V
    |               ICONST_3   (line 50)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L8
    |               ICONST_1
    |               GOTO L9
    |           L8: ICONST_0
    |           L9: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ICONST_3   (line 51)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L10
    |               ICONST_1
    |               GOTO L11
    |          L10: ICONST_0
    |          L11: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 52)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               ICONST_4
    |               INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V
    |               ICONST_4   (line 53)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L12
    |               ICONST_1
    |               GOTO L13
    |          L12: ICONST_0
    |          L13: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ICONST_4   (line 54)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L14
    |               ICONST_1
    |               GOTO L15
    |          L14: ICONST_0
    |          L15: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 55)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               ICONST_1
    |               INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V
    |               ICONST_1   (line 56)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L16
    |               ICONST_1
    |               GOTO L17
    |          L16: ICONST_0
    |          L17: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ICONST_1   (line 57)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L18
    |               ICONST_1
    |               GOTO L19
    |          L18: ICONST_0
    |          L19: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 59)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               ICONST_1
    |               ANEWARRAY com.wec.lib.util.SyncValueGroup
    |               DUP
    |               ICONST_0
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               AASTORE
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link ([Lcom/wec/lib/util/SyncValueGroup;)V
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 60)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               IF_ACMPNE L20
    |               ICONST_1
    |               GOTO L21
    |          L20: ICONST_0
    |          L21: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 63)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               ICONST_1
    |               ANEWARRAY com.wec.lib.util.SyncValueGroup
    |               DUP
    |               ICONST_0
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               AASTORE
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link ([Lcom/wec/lib/util/SyncValueGroup;)V
    |               ICONST_1   (line 64)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L22
    |               ICONST_1
    |               GOTO L23
    |          L22: ICONST_0
    |          L23: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ICONST_1   (line 65)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L24
    |               ICONST_1
    |               GOTO L25
    |          L24: ICONST_0
    |          L25: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 66)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               BIPUSH 8
    |               INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V
    |               BIPUSH 8   (line 67)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L26
    |               ICONST_1
    |               GOTO L27
    |          L26: ICONST_0
    |          L27: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               BIPUSH 8   (line 68)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L28
    |               ICONST_1
    |               GOTO L29
    |          L28: ICONST_0
    |          L29: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               BIPUSH 8   (line 69)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L30
    |               ICONST_1
    |               GOTO L31
    |          L30: ICONST_0
    |          L31: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               BIPUSH 8   (line 70)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L32
    |               ICONST_1
    |               GOTO L33
    |          L32: ICONST_0
    |          L33: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               BIPUSH 8   (line 71)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L34
    |               ICONST_1
    |               GOTO L35
    |          L34: ICONST_0
    |          L35: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 74)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.unlink ()V
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 75)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               ICONST_3
    |               INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 76)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               ICONST_2
    |               INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V
    |               ICONST_2   (line 77)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L36
    |               ICONST_1
    |               GOTO L37
    |          L36: ICONST_0
    |          L37: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ICONST_2   (line 78)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L38
    |               ICONST_1
    |               GOTO L39
    |          L38: ICONST_0
    |          L39: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ICONST_3   (line 79)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L40
    |               ICONST_1
    |               GOTO L41
    |          L40: ICONST_0
    |          L41: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ICONST_2   (line 80)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L42
    |               ICONST_1
    |               GOTO L43
    |          L42: ICONST_0
    |          L43: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ICONST_2   (line 81)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L44
    |               ICONST_1
    |               GOTO L45
    |          L44: ICONST_0
    |          L45: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 82)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.unlink ()V
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 83)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               ICONST_1
    |               ANEWARRAY com.wec.lib.util.SyncValueGroup
    |               DUP
    |               ICONST_0
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               AASTORE
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link ([Lcom/wec/lib/util/SyncValueGroup;)V
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 84)
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               ICONST_1
    |               INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V
    |               ICONST_1   (line 85)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L46
    |               ICONST_1
    |               GOTO L47
    |          L46: ICONST_0
    |          L47: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ICONST_1   (line 86)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L48
    |               ICONST_1
    |               GOTO L49
    |          L48: ICONST_0
    |          L49: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ICONST_3   (line 87)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L50
    |               ICONST_1
    |               GOTO L51
    |          L50: ICONST_0
    |          L51: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ICONST_3   (line 88)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L52
    |               ICONST_1
    |               GOTO L53
    |          L52: ICONST_0
    |          L53: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               ICONST_1   (line 89)
    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this
    |               GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;
    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;
    |               CHECKCAST java.lang.Integer
    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I
    |               IF_ICMPNE L54
    |               ICONST_1
    |               GOTO L55
    |          L54: ICONST_0
    |          L55: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V
    |               RETURN   (line 90)
    method-execution(void com.wec.lib.util.test.SyncValueTest.testSyncValueGroup())
  end public void testSyncValueGroup()

end public class com.wec.lib.util.test.SyncValueTest

when weaving classes 
when weaving 
when batch building BuildConfig[D:\workspace\.metadata\.plugins\org.eclipse.ajdt.core\ANSER2.generated.lst] #Files=365

Here's the class:
package com.wec.lib.util.test;

import static com.wec.ide.Constants.UNCHECKED;
import junit.framework.TestCase;

import org.junit.Test;

import com.wec.lib.util.SyncValueGroup;
import com.wec.scrum.Tests;

/**
 * This class tests the SyncValueGroup utility class.
 */
@Tests(classes = {
        SyncValueGroup.class })
@SuppressWarnings(&quot;nls&quot;)
public class SyncValueTest extends TestCase {

    class SyncInteger extends SyncValueGroup&lt;Integer&gt; {
        public SyncInteger(int val) {
            super(new Integer(val));
        }
        public void valueChanged() {
        }
    }
    
    private SyncInteger a = new SyncInteger(1);
    private SyncInteger b = new SyncInteger(2);
    private SyncInteger c = new SyncInteger(3);
    private SyncInteger d = new SyncInteger(4);
    private SyncInteger e = new SyncInteger(5);    
    
    /**
     * Ensures that SyncValueGroup replicates values and
     * calls valueChange.
     */
    @SuppressWarnings(UNCHECKED)
    @Test
    public void testSyncValueGroup() {
        
        //  Link tests
        a.link(b);
        assertTrue(a.getValue() == b.getValue());
        assertTrue(1 == b.getValue());
        b.setValue(2);
        assertTrue(2 == a.getValue());
        b.link(c);
        assertTrue(2 == c.getValue());
        c.setValue(3);
        assertTrue(3 == a.getValue());
        assertTrue(3 == b.getValue());
        a.setValue(4);
        assertTrue(4 == c.getValue());
        assertTrue(4 == b.getValue());
        b.setValue(1);
        assertTrue(1 == c.getValue());
        assertTrue(1 == a.getValue());
        
        d.link(e);
        assertTrue(d.getValue() == e.getValue());
        
        //  Join loops
        b.link(d);
        assertTrue(1 == d.getValue());
        assertTrue(1 == e.getValue());
        d.setValue(8);
        assertTrue(8 == a.getValue());
        assertTrue(8 == b.getValue());
        assertTrue(8 == c.getValue());
        assertTrue(8 == d.getValue());
        assertTrue(8 == e.getValue());
        
        //  Unlink tests
        c.unlink();
        c.setValue(3);
        b.setValue(2);
        assertTrue(2 == a.getValue());
        assertTrue(2 == b.getValue());
        assertTrue(3 == c.getValue());
        assertTrue(2 == d.getValue());
        assertTrue(2 == e.getValue());
        d.unlink();
        c.link(d);
        a.setValue(1);
        assertTrue(1 == a.getValue());
        assertTrue(1 == b.getValue());
        assertTrue(3 == c.getValue());
        assertTrue(3 == d.getValue());
        assertTrue(1 == e.getValue());
    }
}</column>
            <column name="report_time">2006-09-25 14:18:53</column>
            <column name="report_timestamp">1159210000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ea4ff8a</column>
            <column name="commit_timestamp">1159530000</column>
            <column name="files">tests/bugs153/pr158624/ValueChange.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</column>
            <column name="result">3:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
25:weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</column>
        </table>
        <table name="aspectj">
            <column name="id">172</column>
            <column name="bug_id">148908</column>
            <column name="summary">Bug 148908  incorrect source signature for field ipe with qualified allocation expression</column>
            <column name="description"></column>
            <column name="report_time">2006-06-27 18:41:34</column>
            <column name="report_timestamp">1151450000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">fc39df1</column>
            <column name="commit_timestamp">1159260000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java
tests/bugs153/pr148908/BadInterface.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</column>
            <column name="result">2:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
3:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</column>
        </table>
        <table name="aspectj">
            <column name="id">173</column>
            <column name="bug_id">158412</column>
            <column name="summary">Bug 158412  @Pointcut in declare error results in NPE</column>
            <column name="description">I am trying to use an @AspectJ @Pointcut in a &quot;normal&quot; AspectJ declare error expression. That  results in the following exception.


java.lang.NullPointerException
at org.aspectj.weaver.patterns.ReferencePointcut.concretize1(ReferencePointcut.java:361)
at org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:233)
at org.aspectj.weaver.patterns.NotPointcut.concretize1(NotPointcut.java:100)
at org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:233)
at org.aspectj.weaver.patterns.AndPointcut.concretize1(AndPointcut.java:97)
at org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:233)
at org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:220)
at org.aspectj.weaver.Checker.concretize(Checker.java:45)
at org.aspectj.weaver.CrosscuttingMembers.addShadowMunger(CrosscuttingMembers.java:91)
at org.aspectj.weaver.CrosscuttingMembers.addDeclare(CrosscuttingMembers.java:122)
at org.aspectj.weaver.CrosscuttingMembers.addDeclares(CrosscuttingMembers.java:113)
at org.aspectj.weaver.CrosscuttingMembersSet.addAdviceLikeDeclares(CrosscuttingMembersSet.java:117)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addAdviceLikeDeclares(AjLookupEnvironment.java:382)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:245)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:887)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:244)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:199)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:170)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

NullPointerException thrown: null</column>
            <column name="report_time">2006-09-23 05:11:13</column>
            <column name="report_timestamp">1159000000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">e56a69a</column>
            <column name="commit_timestamp">1159190000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java
tests/bugs153/pr158412/dao/Foo.java
tests/bugs153/pr158412/layering/SystemArchitektur.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</column>
            <column name="result">20:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
86:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">174</column>
            <column name="bug_id">153845</column>
            <column name="summary">Bug 153845  [generics] Problem with signature for generic type</column>
            <column name="description">public aspect OuterAspect {

  private pointcut isSetter() : execution(void set*(..));

  public static aspect InnerAspect pertarget(isSetter()) {

  }

}


java.lang.IllegalStateException
at org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseFieldTypeSignature(GenericSignatureParser.java:163)
at org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseTypeArgument(GenericSignatureParser.java:253)
at org.aspectj.apache.bcel.classfile.GenericSignatureParser.maybeParseTypeArguments(GenericSignatureParser.java:261)
at org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseClassTypeSignature(GenericSignatureParser.java:208)
at org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseAsClassSignature(GenericSignatureParser.java:56)
at org.aspectj.apache.bcel.classfile.Signature.asClassSignature(Signature.java:315)
at org.aspectj.apache.bcel.classfile.JavaClass.getGenericClassTypeSignature(JavaClass.java:973)
at org.aspectj.weaver.bcel.BcelObjectType.initializeFromJavaclass(BcelObjectType.java:164)
at org.aspectj.weaver.bcel.BcelObjectType.&lt;init&gt;(BcelObjectType.java:131)
at org.aspectj.weaver.bcel.BcelWorld.buildBcelDelegate(BcelWorld.java:337)
at org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType(BcelWorld.java:395)
at org.aspectj.weaver.bcel.BcelWeaver.addIfAspect(BcelWeaver.java:263)
at org.aspectj.weaver.bcel.BcelWeaver.addAspectsFromDirectory(BcelWeaver.java:255)
at org.aspectj.weaver.bcel.BcelWeaver.addLibraryJarFile(BcelWeaver.java:205)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWorld(AjBuildManager.java:698)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:223)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:199)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:170)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

IllegalStateException thrown: Expecting [,L, or T, but found Pjava while unpacking Ljava/util/AbstractSet&lt;Pjava/util/Map$Entry&lt;TK;TV;&gt;;&gt;;</column>
            <column name="report_time">2006-08-14 21:28:08</column>
            <column name="report_timestamp">1155610000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">70ae0f8</column>
            <column name="commit_timestamp">1158230000</column>
            <column name="files">tests/bugs153/pr153845/Aspect.java
tests/bugs153/pr153845/Aspect2.java
tests/bugs153/pr153845/GenericType.java
tests/bugs153/pr153845/Interface.java
tests/bugs153/pr153845/Nothing.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
weaver/src/org/aspectj/weaver/ReferenceType.java</column>
            <column name="result">5:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
142:weaver/src/org/aspectj/weaver/ReferenceType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">175</column>
            <column name="bug_id">155972</column>
            <column name="summary">Bug 155972  NullPointerException in ConstructorSignature.getConstructor()</column>
            <column name="description">AspectJ version: 1.5.3.200608290814

When advising a constructor, we can do the following to obtain the constructor as a java.lang.reflect.Member:

		Member cons = ((ConstructorSignature) thisJoinPointStaticPart
				.getSignature()).getConstructor();

however that sometimes fails, and returns null.</column>
            <column name="report_time">2006-09-01 08:45:05</column>
            <column name="report_timestamp">1157110000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">090de7e</column>
            <column name="commit_timestamp">1157380000</column>
            <column name="files">runtime/src/org/aspectj/runtime/reflect/ConstructorSignatureImpl.java
runtime/src/org/aspectj/runtime/reflect/FieldSignatureImpl.java
runtime/src/org/aspectj/runtime/reflect/InitializerSignatureImpl.java
tests/bugs153/pr155972/ConstructorTest.java
tests/bugs153/pr155972/FieldTest.java
tests/bugs153/pr155972/InitializerTest.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</column>
            <column name="result">38:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
62:runtime/src/org/aspectj/runtime/reflect/ConstructorSignatureImpl.java
223:runtime/src/org/aspectj/runtime/reflect/InitializerSignatureImpl.java
552:runtime/src/org/aspectj/runtime/reflect/FieldSignatureImpl.java</column>
        </table>
        <table name="aspectj">
            <column name="id">176</column>
            <column name="bug_id">155238</column>
            <column name="summary">Bug 155238  Trace should use System.identityHashCode, not hashCode</column>
            <column name="description">The tracing module uses obj.hashCode() to identify untrusted objects when formatting. I think it would be a little safer and more accurate to use
System.identityHashCode(obj). This way the tracing code wouldn't call any application-defined code, and would give a value that can't change if the loader state changes.</column>
            <column name="report_time">2006-08-25 11:46:46</column>
            <column name="report_timestamp">1156520000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">14e8b7d</column>
            <column name="commit_timestamp">1156930000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java
weaver/src/org/aspectj/weaver/tools/AbstractTrace.java</column>
            <column name="result">5:loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java
6:weaver/src/org/aspectj/weaver/tools/AbstractTrace.java</column>
        </table>
        <table name="aspectj">
            <column name="id">177</column>
            <column name="bug_id">155148</column>
            <column name="summary">Bug 155148  jdk14 trace deadlock in oc4j</column>
            <column name="description">I turned on tracing for the Aj class inside of Oracle's OC4J server. In one test (not always) it deadlocked. It looks like the threads are each trying to lock each other's loader. Notice that one of the threads is in the toString method of the Oracle ClassLoader (perhaps another reason to prefer tracing argument class names and system identity hashcodes).

Here's a thread dump from Ctrl+BREAK:

Found one Java-level deadlock:
=============================
&quot;WorkExecutorWorkerThread-1&quot;:
  waiting to lock monitor 0x003384ec (object 0x05239e48, a oracle.classloader.Po
licyClassLoader),
  which is held by &quot;OC4J Launcher&quot;
&quot;OC4J Launcher&quot;:
  waiting to lock monitor 0x0033848c (object 0x0554f0e8, a oracle.classloader.Po
licyClassLoader),
  which is held by &quot;WorkExecutorWorkerThread-1&quot;

Java stack information for the threads listed above:
===================================================
&quot;WorkExecutorWorkerThread-1&quot;:
        at oracle.classloader.SearchPolicy.loadClass(SearchPolicy.java:641)
        - waiting to lock &lt;0x05239e48&gt; (a oracle.classloader.PolicyClassLoader)
        at oracle.classloader.PolicyClassLoader.askParentForClass(PolicyClassLoa
der.java:1284)
        at oracle.classloader.SearchPolicy$AskParent.getClass(SearchPolicy.java:
69)
        at oracle.classloader.SearchSequence.getClass(SearchSequence.java:119)
        at oracle.classloader.SearchPolicy.loadClass(SearchPolicy.java:642)
        - locked &lt;0x0554f0e8&gt; (a oracle.classloader.PolicyClassLoader)
        at oracle.classloader.PolicyClassLoader.askParentForClass(PolicyClassLoa
der.java:1284)
        at oracle.classloader.SearchPolicy$AskParent.getClass(SearchPolicy.java:
69)
        at oracle.classloader.SearchSequence.getClass(SearchSequence.java:119)
        at oracle.classloader.PolicyClassLoader.internalLoadClass(PolicyClassLoa
der.java:1660)
        - locked &lt;0x056a9ed0&gt; (a oracle.classloader.PolicyClassLoader)
        at oracle.classloader.PolicyClassLoader.loadClass(PolicyClassLoader.java
:1621)
        at oracle.classloader.PolicyClassLoader.loadClass(PolicyClassLoader.java
:1606)
        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)
        - locked &lt;0x056a9ed0&gt; (a oracle.classloader.PolicyClassLoader)
        at oracle.j2ee.ra.jms.generic.WorkConsumer.doReceive(WorkConsumer.java:9
87)
        at oracle.j2ee.ra.jms.generic.WorkConsumer.run(WorkConsumer.java:215)
        - locked &lt;0x05de2718&gt; (a oracle.j2ee.ra.jms.generic.WorkConsumer)
        at oracle.j2ee.connector.work.WorkWrapper.runTargetWork(WorkWrapper.java
:242)
        at oracle.j2ee.connector.work.WorkWrapper.doWork(WorkWrapper.java:215)
        at oracle.j2ee.connector.work.WorkWrapper.run(WorkWrapper.java:190)
        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExec
utor.java:814)
        at java.lang.Thread.run(Thread.java:595)
&quot;OC4J Launcher&quot;:
        at oracle.classloader.PolicyClassLoader.toString(PolicyClassLoader.java:
1846)
        - waiting to lock &lt;0x0554f0e8&gt; (a oracle.classloader.PolicyClassLoader)
        at java.text.MessageFormat.subformat(MessageFormat.java:1237)
        at java.text.MessageFormat.format(MessageFormat.java:828)
        at java.text.Format.format(Format.java:133)
        at java.text.MessageFormat.format(MessageFormat.java:804)
        at java.util.logging.Formatter.formatMessage(Formatter.java:130)
        - locked &lt;0x0514e920&gt; (a java.util.logging.SimpleFormatter)
        at java.util.logging.SimpleFormatter.format(SimpleFormatter.java:63)
        - locked &lt;0x0514e920&gt; (a java.util.logging.SimpleFormatter)
        at java.util.logging.StreamHandler.publish(StreamHandler.java:179)
        - locked &lt;0x0514a0a8&gt; (a java.util.logging.FileHandler)
        at java.util.logging.FileHandler.publish(FileHandler.java:555)
        - locked &lt;0x0514a0a8&gt; (a java.util.logging.FileHandler)
        at java.util.logging.Logger.log(Logger.java:428)
        at java.util.logging.Logger.doLog(Logger.java:450)
        at java.util.logging.Logger.logp(Logger.java:619)
        at java.util.logging.Logger.entering(Logger.java:870)
        at org.aspectj.weaver.tools.Jdk14Trace.enter(Jdk14Trace.java:32)
        at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:67)
        at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(C
lassPreProcessorAgentAdapter.java:55)
        at sun.instrument.TransformerManager.transform(TransformerManager.java:1
22)
        at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java
:155)
        at java.lang.ClassLoader.defineClass1(Native Method)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:620)
        at oracle.classloader.PolicyClassLoader.defineClass(PolicyClassLoader.ja
va:2224)
        at oracle.classloader.PolicyClassLoader.findLocalClass(PolicyClassLoader
.java:1457)
        at oracle.classloader.SearchPolicy$FindLocal.getClass(SearchPolicy.java:
167)
        at oracle.classloader.SearchSequence.getClass(SearchSequence.java:119)
        at oracle.classloader.PolicyClassLoader.internalLoadClass(PolicyClassLoa
der.java:1660)
        - locked &lt;0x05239e48&gt; (a oracle.classloader.PolicyClassLoader)
        at oracle.classloader.PolicyClassLoader.loadClass(PolicyClassLoader.java
:1621)
        at oracle.classloader.PolicyClassLoader.loadClass(PolicyClassLoader.java
:1606)
        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)
        - locked &lt;0x05239e48&gt; (a oracle.classloader.PolicyClassLoader)
        at com.evermind.server.http.HttpRequestHandler.&lt;init&gt;(HttpRequestHandler
.java:97)
        at com.evermind.server.http.HttpConnectionListener$HttpNIOAcceptHandler.
getReadHandler(HttpConnectionListener.java:116)
        at oracle.oc4j.network.ReadHandlerPool.getContextFromBackend(ReadHandler
Pool.java:63)
        at com.evermind.util.BBPool.startPool(BBPool.java:42)
        at oracle.oc4j.network.ReadHandlerPool.register(ReadHandlerPool.java:25)

        - locked &lt;0x05ec9290&gt; (a java.util.ArrayList)
        at oracle.oc4j.network.ServerSocketAcceptHandler.setPoolOptions(ServerSo
cketAcceptHandler.java:140)
        at com.evermind.server.http.HttpConnectionListener.setRequestHandlerPool
(HttpConnectionListener.java:232)
        at com.evermind.server.http.HttpConnectionListener.initHandlers(HttpConn
ectionListener.java:226)
        at com.evermind.server.http.HttpConnectionListener.&lt;init&gt;(HttpConnection
Listener.java:174)
        at com.evermind.server.http.HttpServer.getListener(HttpServer.java:481)
        - locked &lt;0x05ec4f88&gt; (a com.evermind.server.http.HttpServer)
        at com.evermind.server.http.HttpServer.setSites(HttpServer.java:267)
        - locked &lt;0x05ec4f88&gt; (a com.evermind.server.http.HttpServer)
        at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:180)
        at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServe
r.java:2296)
        at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.jav
a:944)
        at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLa
uncher.java:113)
        - locked &lt;0x0530eb20&gt; (a java.lang.Object)
        at java.lang.Thread.run(Thread.java:595)

Found 1 deadlock.</column>
            <column name="report_time">2006-08-24 20:59:00</column>
            <column name="report_timestamp">1156470000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6be7097</column>
            <column name="commit_timestamp">1156520000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java
weaver/src/org/aspectj/weaver/tools/AbstractTrace.java
weaver/testsrc/org/aspectj/weaver/AbstractTraceTest.java
weaver5/java5-src/org/aspectj/weaver/tools/Jdk14Trace.java</column>
            <column name="result">80:weaver5/java5-src/org/aspectj/weaver/tools/Jdk14Trace.java
113:loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java
174:weaver/testsrc/org/aspectj/weaver/AbstractTraceTest.java
278:weaver/src/org/aspectj/weaver/tools/AbstractTrace.java</column>
        </table>
        <table name="aspectj">
            <column name="id">178</column>
            <column name="bug_id">155213</column>
            <column name="summary">Bug 155213  [ltw] can get into a state with the Version static initializer</column>
            <column name="description">The static initializer in Version that parses the time_text string and turns it into a long field seems to sometimes get loadtime weaving into a state - touching DateFormatters early on is always a pain, so I'm moving it to be processed on first reference.  I could take it a step further ... if WeaverStateInfo didn't write out the time (it doesnt read it back in!!) it would never be used at all in normal processing - potentially saving us from loading a bunch of underpinning junk to do the formatting...</column>
            <column name="report_time">2006-08-25 08:34:30</column>
            <column name="report_timestamp">1156510000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">40cf610</column>
            <column name="commit_timestamp">1156510000</column>
            <column name="files">ajde/src/org/aspectj/ajde/ui/swing/OptionsFrame.java
bridge/src/org/aspectj/bridge/Version.java
bridge/testsrc/org/aspectj/bridge/VersionTest.java
weaver/src/org/aspectj/weaver/AjAttribute.java</column>
            <column name="result">46:bridge/src/org/aspectj/bridge/Version.java
126:bridge/testsrc/org/aspectj/bridge/VersionTest.java
133:weaver/src/org/aspectj/weaver/AjAttribute.java
323:ajde/src/org/aspectj/ajde/ui/swing/OptionsFrame.java</column>
        </table>
        <table name="aspectj">
            <column name="id">179</column>
            <column name="bug_id">129525</column>
            <column name="summary">Bug 129525  Don't Dump Bytecodes to Syserr in LTW</column>
            <column name="description">The load-time weaving system can produce truly massive quantities of output when there's a weaving error, since the system dumps the bytecode to syserr. It would be much better to produce an ajcore file and just point to it, or use some other log.</column>
            <column name="report_time">2006-02-27 03:18:33</column>
            <column name="report_timestamp">1141030000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">04fa1dc</column>
            <column name="commit_timestamp">1156440000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java
3:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
12:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
51:loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java</column>
        </table>
        <table name="aspectj">
            <column name="id">180</column>
            <column name="bug_id">150271</column>
            <column name="summary">Bug 150271  Allow multiple levels of LTW information</column>
            <column name="description">It would be nice if basic information about load-time weaving (what version of AspectJ is being used, what loaders are doing weaving and what configuration is being used) was available without all of the -verbose information listing of all classes woven or not woven.

It's also unfortunate that the flags for weaving level are 2 quite different ones:
-Daj.weaving.verbose -Dorg.aspectj.weaver.showWeaveInfo

Why not something like -Dorg.aspectj.weaver.level=[none|summary|info|verbose]

summary: just what configuration is used
info: list affected join points etc. (like showWeaveInfo)
verbose: all (like verbose now)</column>
            <column name="report_time">2006-07-11 11:31:28</column>
            <column name="report_timestamp">1152630000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">8549d86</column>
            <column name="commit_timestamp">1156330000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
loadtime/src/org/aspectj/weaver/loadtime/DefaultMessageHandler.java
loadtime/src/org/aspectj/weaver/loadtime/Options.java
tests/java5/ataspectj/ataspectj/TestHelper.java
weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java
4:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
5:loadtime/src/org/aspectj/weaver/loadtime/Options.java
61:loadtime/src/org/aspectj/weaver/loadtime/DefaultMessageHandler.java
774:tests/java5/ataspectj/ataspectj/TestHelper.java</column>
        </table>
        <table name="aspectj">
            <column name="id">181</column>
            <column name="bug_id">149560</column>
            <column name="summary">Bug 149560  [@AspectJ] Incorrect weaving of static initialization join point</column>
            <column name="description">This error occurs if static initialization of one aspect class is woven with an advice from another aspect. It worked fine in version 1.5.0 - see the decompiled code snippet:

    static 
    {
        Object obj = new Factory(&quot;ItoMonitoringAspect.java&quot;, Class.forName(&quot;cz.kb.usermanagement.ito.ItoMonitoringAspect&quot;));
        ajc$tjp_0 = ((Factory) (obj)).makeSJP(&quot;staticinitialization&quot;, ((Factory) (obj)).makeInitializerSig(&quot;8&quot;, &quot;cz.kb.usermanagement.ito.ItoMonitoringAspect&quot;), 0);
        obj = Factory.makeJP(ajc$tjp_0, null, null);
        
        
        // the static initialization of this aspect class is deliberately woven using
        // advice from another aspect defined elsewhere.
        
        try
        {
            UserManagementLogAspect.aspectOf().beforeClassInit(((org.aspectj.lang.JoinPoint) (obj)));
        }
        catch(Throwable throwable)
        {
            if(throwable instanceof ExceptionInInitializerError)
            {
                throw (ExceptionInInitializerError)throwable;
            } else
            {
                UserManagementLogAspect.aspectOf().afterClassInit();
                throw throwable;
            }
        }
        UserManagementLogAspect.aspectOf().afterClassInit();
        
        // this line below was there when compiling using AspectJ 1.5.0 
        // but is missing in when using AJC 1.5.2. (Note: the line is, however, present if the static
        // initialization of this aspect class is NOT woven by advice from the other aspect).
        ajc$postClinit();

   }


As a result of the missing call to ajc$postClinit() the aspect instance is not created and it's method .aspectOf() throws org.aspectj.lang.NoAspectBoundException.</column>
            <column name="report_time">2006-07-04 07:47:44</column>
            <column name="report_timestamp">1152010000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">945a257</column>
            <column name="commit_timestamp">1156260000</column>
            <column name="files">tests/bugs153/pr149560/AnnStyle.java
tests/bugs153/pr149560/CodeStyle.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
weaver/src/org/aspectj/weaver/bcel/BcelPerClauseAspectAdder.java
weaver/src/org/aspectj/weaver/patterns/PerSingleton.java</column>
            <column name="result">7:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
19:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
78:weaver/src/org/aspectj/weaver/bcel/BcelPerClauseAspectAdder.java
83:weaver/src/org/aspectj/weaver/patterns/PerSingleton.java</column>
        </table>
        <table name="aspectj">
            <column name="id">182</column>
            <column name="bug_id">154332</column>
            <column name="summary">Bug 154332  [annotations] Incorrect handling of java.lang annotations when matching</column>
            <column name="description">As raised by Mr Bodkin on the list:
Can anyone tell me why this compiling this program produces warnings for marker but not for deprecated (in a recent dev build of AJDT)? Is this just a bug? Both have runtime retention, so I would expect equivalent behavior.

 

@Deprecated @Marker

public aspect Annot {

 

    pointcut test() : within(@Marker *);// *);

   

    declare warning: staticinitialization(@Deprecated *): &quot;deprecated&quot;;   

    declare warning: staticinitialization(@Marker *): &quot;marker&quot;;   

   

    public static void main(String argz[]) {

        new Baz().foo();

    }

}

 

@Deprecated @Marker

class Baz {

    public void foo() {}

}

 

@Retention(RetentionPolicy.RUNTIME)

public @interface Marker {

 

}</column>
            <column name="report_time">2006-08-18 03:49:03</column>
            <column name="report_timestamp">1155890000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">59123b0</column>
            <column name="commit_timestamp">1155890000</column>
            <column name="files">tests/bugs153/pr154332/Annot.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</column>
            <column name="result">7:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
19:weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">183</column>
            <column name="bug_id">153535</column>
            <column name="summary">Bug 153535  Bug in reflection delegate signature for array of object type</column>
            <column name="description">The following problem is interesting because the advice weaves correctly with Java 1.5 LTW and also using Java 1.4 with build-time weaving. However, the following call pointcut isn't matching the expected call site in Java 1.4 load-time weaving (*).

Pointcut:
    private pointcut inExecQuery() : 
        (within(uk.ltd.getahead.dwr.impl.ExecuteQuery) || within(uk.ltd.getahead.dwr.ExecuteQuery));
    
    public pointcut dwrQuery(Method method, Object receiver, Object[] params) : 
        inExecQuery() &amp;&amp; withincode(* execute(..)) &amp;&amp; 
        call(* Method.invoke(..)) &amp;&amp; args(receiver, params) &amp;&amp; target(method);

    protected pointcut monitorEnd() : dwrQuery(*, *, *);

Matching call site:
                Object reply = method.invoke(object, params);

I've tracked it down to failing to find the method in ResolvedType.matches. On line 405:

&quot;m1.getSignature()&quot;= &quot;(Ljava/lang/Object;[Ljava.lang.Object;)Ljava/lang/Object;&quot;	
&quot;m2.getSignature()&quot;= &quot;(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;&quot;	

Note the difference between . and /            ^    ^

It looks to me like the signature for array types in the reflection delegate is erroneously using . instead of /. I have attached a patch to the ReflectionBasedReferenceTypeDelegateTest that isolates this unexpected signature return. Hopefully you agree that this is not correct. If not, some more information follows.

Here's the stack trace where the match fails:

ResolvedType.matches(Member, Member) line: 405	
ReferenceType(ResolvedType).lookupMember(Member, Iterator) line: 347	
ReferenceType(ResolvedType).lookupMethod(Member) line: 326	
LTWWorld(World).resolve(Member) line: 504	
MemberImpl.resolve(World) line: 93	
JoinPointSignatureIterator.addSignaturesUpToFirstDefiningMember() line: 109	
JoinPointSignatureIterator.&lt;init&gt;(Member, World) line: 51	
MemberImpl.getJoinPointSignatures(World) line: 943	
SignaturePattern.matches(Member, World, boolean) line: 286	
KindedPointcut.matchInternal(Shadow) line: 106	
KindedPointcut(Pointcut).match(Shadow) line: 146	
AndPointcut.matchInternal(Shadow) line: 53	
AndPointcut(Pointcut).match(Shadow) line: 146	
AndPointcut.matchInternal(Shadow) line: 51	
AndPointcut(Pointcut).match(Shadow) line: 146	
AndPointcut.matchInternal(Shadow) line: 51	
AndPointcut(Pointcut).match(Shadow) line: 146	
AndPointcut.matchInternal(Shadow) line: 51	
AndPointcut(Pointcut).match(Shadow) line: 146	
OrPointcut.matchInternal(Shadow) line: 50	
OrPointcut(Pointcut).match(Shadow) line: 146	
BcelAdvice(ShadowMunger).match(Shadow, World) line: 71	
BcelAdvice(Advice).match(Shadow, World) line: 112	
BcelAdvice.match(Shadow, World) line: 107	
BcelClassWeaver.match(BcelShadow, List) line: 2806	
BcelClassWeaver.matchInvokeInstruction(LazyMethodGen, InstructionHandle, InvokeInstruction, BcelShadow, List) line: 2768	
BcelClassWeaver.match(LazyMethodGen, InstructionHandle, BcelShadow, List) line: 2506	
BcelClassWeaver.match(LazyMethodGen) line: 2332	
BcelClassWeaver.weave() line: 494	
BcelClassWeaver.weave(BcelWorld, LazyClassGen, List, List, List) line: 119	
BcelWeaver.weave(UnwovenClassFile, BcelObjectType, boolean) line: 1613	
BcelWeaver.weaveWithoutDump(UnwovenClassFile, BcelObjectType) line: 1564	
BcelWeaver.weaveAndNotify(UnwovenClassFile, BcelObjectType, IWeaveRequestor) line: 1341	
BcelWeaver.weave(IClassFileProvider) line: 1163	
ClassLoaderWeavingAdaptor(WeavingAdaptor).getWovenBytes(String, byte[]) line: 319	
ClassLoaderWeavingAdaptor(WeavingAdaptor).weaveClass(String, byte[]) line: 225	
Aj.preProcess(String, byte[], ClassLoader) line: 77	
ClassPreProcessorAdapter.preProcess(String, byte[], ClassLoader) line: 67	
ClassPreProcessorHelper.defineClass0Pre(ClassLoader, String, byte[], int, int, ProtectionDomain) line: 107	
WebappClassLoader(ClassLoader).defineClass(String, byte[], int, int, ProtectionDomain) line: 539	
WebappClassLoader(SecureClassLoader).defineClass(String, byte[], int, int, CodeSource) line: 123	
WebappClassLoader.findClassInternal(String) line: 1786	
WebappClassLoader.findClass(String) line: 1048	
WebappClassLoader.loadClass(String, boolean) line: 1506	
WebappClassLoader.loadClass(String) line: 1385	
WebappClassLoader(ClassLoader).loadClassInternal(String) line: 302	
Class.forName0(String, boolean, ClassLoader) line: not available [native method]	
Class.forName(String) line: 141	
InitializeLog.setWarnLogging(String) line: 121	
InitializeLog.initializeLogging() line: 96	
ContextLoaderServlet.init() line: 13	
ContextLoaderServlet(GenericServlet).init(ServletConfig) line: 212	
StandardWrapper.loadServlet() line: 879	
StandardWrapper.load() line: 767	
StandardContext.loadOnStartup(Container[]) line: 3483	
StandardContext.start() line: 3709	
StandardHost(ContainerBase).addChildInternal(Container) line: 776	
StandardHost(ContainerBase).addChild(Container) line: 759	
StandardHost.addChild(Container) line: 537	
StandardHostDeployer.install(String, URL) line: 260	
StandardHost.install(String, URL) line: 730	
HostConfig.deployWARs(File, String[]) line: 558	
HostConfig.deployApps() line: 373	
HostConfig.start() line: 784	
HostConfig.lifecycleEvent(LifecycleEvent) line: 330	
LifecycleSupport.fireLifecycleEvent(String, Object) line: 119	
StandardHost(ContainerBase).start() line: 1155	
StandardHost.start() line: 696	
StandardEngine(ContainerBase).start() line: 1147	
StandardEngine.start() line: 310	
StandardService.start() line: 449	
StandardServer.start() line: 2212	
Catalina.start() line: 458	
Catalina.execute() line: 345	
Catalina.process(String[]) line: 129	
NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39	
DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	
Method.invoke(Object, Object[]) line: 324	
Bootstrap.main(String[]) line: 150	

I'm using a modified version of Alex Vasseur's LTW plugin for a Java 1.4 VM although I haven't tested on the JRockIt plugin for a 1.4 VM: my guess is that this would fail there too.</column>
            <column name="report_time">2006-08-11 03:34:59</column>
            <column name="report_timestamp">1155280000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">82e3e13</column>
            <column name="commit_timestamp">1155640000</column>
            <column name="files">weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java
weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java
weaver5/java5-testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java</column>
            <column name="result">31:weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java
66:weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java
200:weaver5/java5-testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java</column>
        </table>
        <table name="aspectj">
            <column name="id">184</column>
            <column name="bug_id">148219</column>
            <column name="summary">Bug 148219  Wrong warning is reported</column>
            <column name="description">I used ajdt_1.3.1_for_eclipse_3.1.zip on Eclipse 3.1.2.
Below is my aspectj code.

public aspect MyMessages {
    pointcut getResourceString(String key): args(key, ..) &amp;&amp;
    call (* CommonPlugin.getResourceString(String, ..));

    String around(String key):getResourceString(key) {
    	return key;
    }
}

The warning message is
The parameter key is never read. 
See my screenshot.</column>
            <column name="report_time">2006-06-22 10:05:18</column>
            <column name="report_timestamp">1150990000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">07c2189</column>
            <column name="commit_timestamp">1155050000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java
tests/bugs153/PR148219/MyMessages.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</column>
            <column name="result">20:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java
97:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">185</column>
            <column name="bug_id">152161</column>
            <column name="summary">Bug 152161  Contribution: Support -Xset in Load-Time Weaving Configuration</column>
            <column name="description">I needed this to try out a setting in the pipelined compilation (-Xset:runMinimalMemory=true) ... I was able to verify that it parsed and set an option correctly in the debugger. I also have included a test that sets all the currently available options.</column>
            <column name="report_time">2006-07-28 11:51:55</column>
            <column name="report_timestamp">1154100000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">039be68</column>
            <column name="commit_timestamp">1155050000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
loadtime/src/org/aspectj/weaver/loadtime/Options.java
tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java</column>
            <column name="result">7:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
42:tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java
176:loadtime/src/org/aspectj/weaver/loadtime/Options.java</column>
        </table>
        <table name="aspectj">
            <column name="id">186</column>
            <column name="bug_id">152388</column>
            <column name="summary">Bug 152388  NPE in MessageUtil.addExtraSourceLocations</column>
            <column name="description">I get this message from an error in a recent dev build of AspectJ with load-time weaving. I don't know how there is a null source location associated with this message, but either it shouldn't be there or MessageUtil line 806 should use this patch:

Index: src/org/aspectj/bridge/MessageUtil.java
===================================================================
RCS file: /home/technology/org.aspectj/modules/bridge/src/org/aspectj/bridge/MessageUtil.java,v
retrieving revision 1.11
diff -u -r1.11 MessageUtil.java
--- src/org/aspectj/bridge/MessageUtil.java	1 Jun 2006 09:36:37 -0000	1.11
+++ src/org/aspectj/bridge/MessageUtil.java	31 Jul 2006 22:32:16 -0000
@@ -803,7 +803,7 @@
 		writer.println(baseMessage);
 		for (Iterator iter = message.getExtraSourceLocations().iterator(); iter.hasNext();) {
 		    ISourceLocation element = (ISourceLocation) iter.next();
-		    writer.print(&quot;\tsee also: &quot; + element.toString());
+		    writer.print(&quot;\tsee also: &quot; + element);
 		    if (iter.hasNext()) {
 		        writer.println();
 		    }

NPE follows:

java.lang.NullPointerException
	at org.aspectj.bridge.MessageUtil.addExtraSourceLocations(MessageUtil.java:806)
	at org.aspectj.bridge.MessageUtil.renderMessage(MessageUtil.java:793)
	at org.aspectj.bridge.Message.toString(Message.java:177)
	at org.aspectj.bridge.MessageWriter.render(MessageWriter.java:73)
	at org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.render(WeavingAdaptor.java:471)
	at org.aspectj.bridge.MessageWriter.handleMessage(MessageWriter.java:41)
	at org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage(WeavingAdaptor.java:425)
	at org.aspectj.weaver.bcel.BcelTypeMunger.error(BcelTypeMunger.java:378)
	at org.aspectj.weaver.bcel.BcelTypeMunger.enforceDecpRule1_abstractMethodsImplemented(BcelTypeMunger.java:273)
	at org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewParent(BcelTypeMunger.java:194)
	at org.aspectj.weaver.bcel.BcelTypeMunger.munge(BcelTypeMunger.java:106)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:450)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:115)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1613)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1564)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1341)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1163)
	at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:288)
	at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:214)
	at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:76)
	at org.aspectj.ext.ltw13.ClassPreProcessorAdapter.preProcess(ClassPreProcessorAdapter.java:65)
	at org.codehaus.aspectwerkz.hook.impl.ClassPreProcessorHelper.defineClass0Pre(ClassPreProcessorHelper.java:107)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:539)
...

NOTE: I'm using Alex Vasseur's adaptor to invoke AspectJ LTW from a 1.4 VM, but with recursion protection added. I don't think that should change the expected behavior of Aj.</column>
            <column name="report_time">2006-07-31 18:31:46</column>
            <column name="report_timestamp">1154390000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a38edd3</column>
            <column name="commit_timestamp">1155040000</column>
            <column name="files">bridge/src/org/aspectj/bridge/MessageUtil.java</column>
            <column name="result">5:bridge/src/org/aspectj/bridge/MessageUtil.java</column>
        </table>
        <table name="aspectj">
            <column name="id">187</column>
            <column name="bug_id">152979</column>
            <column name="summary">Bug 152979  Optimization: Reference Use and URL Caching in ClassLoader Repository</column>
            <column name="description">I have found that a lot of memory can get pinned by the BCEL ClassLoaderRepository. For example, on a test configuration of Glassbox with WebLogic over 40 megabytes were pinned in memory due to this loader. (*)

I also notice that some of the time spent with loading and parsing redundant classes for shared weaving configuration could be reduced by having a global cache of bytes for URL's instead, i.e., the ClassLoaderRepository is local to a loader, so even if the same class on disk is resolved multiple times in different loaders, it isn't read from cache. This latter issue will be reduced if loading types from a parent loader use reflection delegates instead but BCEL still has to be used for aspects on &lt;1.5 VM's... 

The attached patch has some metrics in it to measure what's happening and it also uses SoftReferences to cache without pinning the reference types and uses a two-step look up process to maintain a global URL cache. When I run this on WebLogic 9.2 with Glassbox and view their admin console and some smaller apps I get this output:

BCEL repository total load time: 7733 ms, in url: 6029 ms for 1427 url cache hits = 1683 missEvicted = 0 missUrlEvicted= 0 all misses = 1427, loader hits = 0

On Tomcat 5.5 with some different sample apps:
BCEL repository total load time: 4945 ms, in url: 4319 ms for 636 url cache hits = 548 missEvicted = 0 missUrlEvicted= 190 all misses= 446, loader hits = 3

So at least in my configuration the URL-based cache is quite effective (with almost a 50% hit rate) whereas the loader-based cache provides little value. From what I've seen, it's worth considering not even using the loader-based BCEL cache at all but others may have configurations where it helps.

(*) This test was on a development build of AspectJ which I had modified so that the LTWWorld evicts classes after loading</column>
            <column name="report_time">2006-08-07 11:04:12</column>
            <column name="report_timestamp">1154960000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">387c3ac</column>
            <column name="commit_timestamp">1155040000</column>
            <column name="files">bcel-builder/src/org/aspectj/apache/bcel/util/ClassLoaderRepository.java
bcel-builder/testsrc/org/aspectj/apache/bcel/classfile/tests/AllTests.java
bcel-builder/testsrc/org/aspectj/apache/bcel/classfile/tests/ClassloaderRepositoryTest.java</column>
            <column name="result">26:bcel-builder/src/org/aspectj/apache/bcel/util/ClassLoaderRepository.java
1726:bcel-builder/testsrc/org/aspectj/apache/bcel/classfile/tests/AllTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">188</column>
            <column name="bug_id">152873</column>
            <column name="summary">Bug 152873  Optimize shouldWeaveAnnotationStyleAspect with Patch</column>
            <column name="description"></column>
            <column name="report_time">2006-08-04 15:21:07</column>
            <column name="report_timestamp">1154720000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f239f2a</column>
            <column name="commit_timestamp">1155020000</column>
            <column name="files">testing/newsrc/org/aspectj/testing/AntSpec.java
tests/java5/ataspectj/ataspectj/bugs/NotAspect.java
tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java
weaver/src/org/aspectj/weaver/World.java
weaver/src/org/aspectj/weaver/tools/IsAtAspectAnnotationVisitor.java
weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java
18:weaver/src/org/aspectj/weaver/World.java
125:tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">189</column>
            <column name="bug_id">152835</column>
            <column name="summary">Bug 152835  ArrayIndexOutOfBoundsException in EclipseAdapterUtils.makeLocationContext</column>
            <column name="description">Got the following exception during startup of Eclipse

java.lang.ArrayIndexOutOfBoundsException
at org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeLocationContext(EclipseAdapterUtils.java:65)
at org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeSourceLocation(EclipseAdapterUtils.java:121)
at org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeMessage(EclipseAdapterUtils.java:130)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager$4.acceptResult(AjBuildManager.java:959)
at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.acceptResult(AjPipeliningCompilerAdapter.java:402)
at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:375)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:98)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:533)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:891)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:246)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:165)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

ArrayIndexOutOfBoundsException thrown: -2</column>
            <column name="report_time">2006-08-04 06:00:33</column>
            <column name="report_timestamp">1154690000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">908b405</column>
            <column name="commit_timestamp">1154690000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</column>
        </table>
        <table name="aspectj">
            <column name="id">190</column>
            <column name="bug_id">152631</column>
            <column name="summary">Bug 152631  Problem with decp on an aspect using cflow</column>
            <column name="description">This occurs in the AspectJ build in AJDT from August 1 but not from July 31:

java.lang.NullPointerException
at org.aspectj.weaver.bcel.BcelTypeMunger.enforceDecpRule1_abstractMethodsImplemented(BcelTypeMunger.java:250)
at org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewParent(BcelTypeMunger.java:194)
at org.aspectj.weaver.bcel.BcelTypeMunger.munge(BcelTypeMunger.java:106)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:454)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:119)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1597)
at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1548)
at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1328)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1124)
at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:451)
at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:389)
at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:377)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:98)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:533)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:891)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:246)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:165)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

trouble in:public class glassbox.agent.ErrorContainmentTest$ErrorMockAspect extends java.lang.Object implements glassbox.agent.api.NotSerializable:
private static Throwable ajc$initFailureCause [Synthetic]
public static final glassbox.agent.ErrorContainmentTest$ErrorMockAspect ajc$perSingletonInstance [Synthetic]
static void &lt;clinit&gt;():
catch java.lang.Throwable -&gt; E0
|               INVOKESTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$postClinit ()V   (line 60)
catch java.lang.Throwable -&gt; E0
GOTO L0
E0: ASTORE_0
ALOAD_0
PUTSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$initFailureCause Ljava/lang/Throwable;
L0: RETURN
end static void &lt;clinit&gt;()
void &lt;init&gt;():
ALOAD_0     // Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; this   (line 60)
INVOKESPECIAL java.lang.Object.&lt;init&gt; ()V
RETURN
end void &lt;init&gt;()
public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$1$9589fc()    AdviceAttribute(before, (scope() &amp;&amp; call(* hook1())), 0, 1670)
:
NEW java.lang.RuntimeException   (line 64)
DUP
LDC &quot;rte&quot;
INVOKESPECIAL java.lang.RuntimeException.&lt;init&gt; (Ljava/lang/String;)V
ATHROW
end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$1$9589fc()
public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$2$f75db3e2()    AdviceAttribute(before, execution(* glassbox.agent.ErrorContainmentTest.hook5()), 0, 1764)
:
NEW java.lang.RuntimeException   (line 67)
DUP
LDC &quot;rte&quot;
INVOKESPECIAL java.lang.RuntimeException.&lt;init&gt; (Ljava/lang/String;)V
ATHROW
end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$2$f75db3e2()
public void ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17d(org.aspectj.runtime.internal.AroundClosure)    AdviceAttribute(around, (scope() &amp;&amp; call(* hook2())), 1, 1913)
:
NEW java.lang.Error   (line 71)
DUP
LDC &quot;foo&quot;
INVOKESPECIAL java.lang.Error.&lt;init&gt; (Ljava/lang/String;)V
ATHROW
end public void ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17d(org.aspectj.runtime.internal.AroundClosure)
static void ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17dproceed(org.aspectj.runtime.internal.AroundClosure) throws java.lang.Throwable    org.aspectj.weaver.AjAttribute$AjSynthetic@19a01f9
:
ALOAD_0     // Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; this   (line 1)
ICONST_0
ANEWARRAY java.lang.Object
INVOKEVIRTUAL org.aspectj.runtime.internal.AroundClosure.run ([Ljava/lang/Object;)Ljava/lang/Object;
INVOKESTATIC org.aspectj.runtime.internal.Conversions.voidValue (Ljava/lang/Object;)Ljava/lang/Object;
RETURN
end static void ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17dproceed(org.aspectj.runtime.internal.AroundClosure) throws java.lang.Throwable
public void ajc$after$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$4$bfd07f()    AdviceAttribute(after, (scope() &amp;&amp; call(* hook4())), 0, 1991)
:
NEW org.aspectj.lang.SoftException   (line 74)
DUP
ACONST_NULL
INVOKESPECIAL org.aspectj.lang.SoftException.&lt;init&gt; (Ljava/lang/Throwable;)V
ATHROW
end public void ajc$after$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$4$bfd07f()
public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$5$e5bddfdc()    AdviceAttribute(before, logErrorInTest(), 0, 2446)
:
GETSTATIC glassbox.agent.ErrorContainmentTest.logCount I   (line 84)
ICONST_1
IADD
PUTSTATIC glassbox.agent.ErrorContainmentTest.logCount I
RETURN   (line 85)
end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$5$e5bddfdc()
public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$6$16ecfe62()    AdviceAttribute(before, (adviceexecution(* *) &amp;&amp; (within(glassbox.util.logging.api.LogManagement) &amp;&amp; (cflow(logError()) &amp;&amp; cflow((execution(* testLoggingError(..)) &amp;&amp; within(glassbox.agent.ErrorContainmentTest)))))), 0, 2506)
:
GETSTATIC java.lang.System.err Ljava/io/PrintStream;   (line 87)
LDC &quot;match&quot;
INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V
RETURN   (line 88)
end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$6$16ecfe62()
public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$7$e9ae8482()    AdviceAttribute(before, (adviceexecution(* *) &amp;&amp; (within(glassbox.util.logging.api.LogManagement) &amp;&amp; cflow((execution(* testLoggingError(..)) &amp;&amp; within(glassbox.agent.ErrorContainmentTest))))), 0, 2721)
:
GETSTATIC java.lang.System.err Ljava/io/PrintStream;   (line 90)
LDC &quot;match in test&quot;
INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V
RETURN   (line 91)
end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$7$e9ae8482()
public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$8$c6ac5351()    AdviceAttribute(before, (adviceexecution(* *) &amp;&amp; (within(glassbox.util.logging.api.LogManagement) &amp;&amp; cflow(logError()))), 0, 2923)
:
GETSTATIC java.lang.System.err Ljava/io/PrintStream;   (line 93)
LDC &quot;match in log&quot;
INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V
RETURN   (line 94)
end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$8$c6ac5351()
public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$9$16ecfe62()    AdviceAttribute(before, (adviceexecution(* *) &amp;&amp; (within(glassbox.util.logging.api.LogManagement) &amp;&amp; (cflow(logError()) &amp;&amp; cflow((execution(* testLoggingError(..)) &amp;&amp; within(glassbox.agent.ErrorContainmentTest)))))), 0, 3069)
:
GETSTATIC glassbox.agent.ErrorContainmentTest.recursiveThrows I   (line 96)
ICONST_1
IADD
PUTSTATIC glassbox.agent.ErrorContainmentTest.recursiveThrows I
GETSTATIC glassbox.agent.ErrorContainmentTest.recursiveThrows I   (line 97)
ICONST_2
IF_ICMPGE L0
NEW java.lang.RuntimeException   (line 98)
DUP
LDC &quot;recursive logging failure&quot;
INVOKESPECIAL java.lang.RuntimeException.&lt;init&gt; (Ljava/lang/String;)V
ATHROW
L0: RETURN   (line 100)
end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$9$16ecfe62()
public static glassbox.agent.ErrorContainmentTest$ErrorMockAspect aspectOf()    org.aspectj.weaver.AjAttribute$AjSynthetic@3cd8fe
:
GETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect;   (line 1)
IFNONNULL L0
NEW org.aspectj.lang.NoAspectBoundException
DUP
LDC &quot;glassbox_agent_ErrorContainmentTest$ErrorMockAspect&quot;
GETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$initFailureCause Ljava/lang/Throwable;
INVOKESPECIAL org.aspectj.lang.NoAspectBoundException.&lt;init&gt; (Ljava/lang/String;Ljava/lang/Throwable;)V
ATHROW
L0: GETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect;
ARETURN
end public static glassbox.agent.ErrorContainmentTest$ErrorMockAspect aspectOf()
public static boolean hasAspect()    org.aspectj.weaver.AjAttribute$AjSynthetic@1bd4f6
:
GETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect;   (line 1)
IFNULL L0
ICONST_1
IRETURN
L0: ICONST_0
IRETURN
end public static boolean hasAspect()
private static void ajc$postClinit()    org.aspectj.weaver.AjAttribute$AjSynthetic@1febf91
:
NEW glassbox.agent.ErrorContainmentTest$ErrorMockAspect   (line 1)
DUP
INVOKESPECIAL glassbox.agent.ErrorContainmentTest$ErrorMockAspect.&lt;init&gt; ()V
PUTSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect;
RETURN
end private static void ajc$postClinit()
end public class glassbox.agent.ErrorContainmentTest$ErrorMockAspect
when type munging with (BcelTypeMunger ResolvedTypeMunger(Parent, null))
when weaving aspects
when weaving
when batch building BuildConfig[C:\devel\glassbox\.metadata\.plugins\org.eclipse.ajdt.core\glassboxMonitor.generated.lst] #Files=107

The source is:

public class ErrorContainmentTest extends TestCase {
...
	static aspect ErrorMockAspect implements NotSerializable {
...

I will try to narrow this down if the problem isn't obvious.</column>
            <column name="report_time">2006-08-02 13:26:23</column>
            <column name="report_timestamp">1154540000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ff2377a</column>
            <column name="commit_timestamp">1154690000</column>
            <column name="files">tests/bugs153/pr152631/EMA.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
            <column name="result">11:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java
26:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">191</column>
            <column name="bug_id">151991</column>
            <column name="summary">Bug 151991  Missing copyright/license in recently added modules</column>
            <column name="description">BuildModuleTests does not test for licenses in ajdoc, loadtime, loadtime5, weaver5. When I added the necessary logic there were a couple of failures. Could the owners please step forward ...

epl-cpl-ibm|parc|xerox|others   LICENSE FAIL: C:\workspaces\org.aspectj-Restructure\weaver5\java5-src\org\aspectj\weaver\reflect\DeferredResolvedPointcutDefinition.java
epl-cpl-ibm|parc|xerox|others COPYRIGHT FAIL: C:\workspaces\org.aspectj-Restructure\weaver5\java5-src\org\aspectj\weaver\reflect\DeferredResolvedPointcutDefinition.java
epl-cpl-ibm|parc|xerox|others   LICENSE FAIL: C:\workspaces\org.aspectj-Restructure\weaver5\java5-src\org\aspectj\weaver\reflect\InternalUseOnlyPointcutParser.java
epl-cpl-ibm|parc|xerox|others COPYRIGHT FAIL: C:\workspaces\org.aspectj-Restructure\weaver5\java5-src\org\aspectj\weaver\reflect\InternalUseOnlyPointcutParser.java
Total passed: 7 failed: 2


I also noticed the following messages. Does anyone know what they mean?

BuildModuleTest: Define &quot;run.build.tests&quot; as a system property to run tests to build run-all-junit-tests (this is the only warning)
class org.aspectj.internal.build.BuildModuleTest.testNoDuplicates() incomplete
error building module weaver
	at org.aspectj.internal.tools.ant.taskdefs.BuildModule.build(BuildModule.java:145)
	at org.aspectj.internal.tools.ant.taskdefs.BuildModule.execute(BuildModule.java:117)
	at org.aspectj.internal.build.BuildModuleTest.doTask(BuildModuleTest.java:445)
	at org.aspectj.internal.build.BuildModuleTest.testNoDuplicates(BuildModuleTest.java:178)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)Module 	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)</column>
            <column name="report_time">2006-07-27 08:58:44</column>
            <column name="report_timestamp">1154010000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7aa6cfe</column>
            <column name="commit_timestamp">1154620000</column>
            <column name="files">build/testsrc/org/aspectj/build/BuildModuleTests.java</column>
            <column name="result">21:build/testsrc/org/aspectj/build/BuildModuleTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">192</column>
            <column name="bug_id">152589</column>
            <column name="summary">Bug 152589  [pipeline] adding a whitespace results in adviceDidNotMatch warning</column>
            <column name="description"></column>
            <column name="report_time">2006-08-02 09:33:47</column>
            <column name="report_timestamp">1154530000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9664058</column>
            <column name="commit_timestamp">1154590000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java
tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
15:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java</column>
        </table>
        <table name="aspectj">
            <column name="id">193</column>
            <column name="bug_id">151938</column>
            <column name="summary">Bug 151938  Handle Duplicate -javaagent entries more gracefully</column>
            <column name="description">If you start a java 5 VM with AspectJ's load-time weaver specified more than once using the -javaagent flag, if there is an aop.xml file defined, it chokes badly: it tries to reweave the woven AspectJ code and emits massive amounts of bytecode. It would be better if AspectJ detected that it was specified more than once and gave a warning then disabled all but one of the agents. Failing that, it would be better to fail and give an error message than emit the bytecode.

This issue came up for our automated installer, which adds a -javaagent flag to VM startup commands. If the script is wrapped twice, it can generate a duplicate. We are making our scripts more intelligent to avoid this issue, but we are probably not the only people who will hit this issue (e.g., if someone manually edits both setclasspath.bat and catalina.bat to add the flag for a Tomcat instance...)</column>
            <column name="report_time">2006-07-26 19:33:29</column>
            <column name="report_timestamp">1153960000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">bebb364</column>
            <column name="commit_timestamp">1154460000</column>
            <column name="files">loadtime5/java5-src/org/aspectj/weaver/loadtime/Agent.java
tests/java5/ataspectj/HelloWorld.java
tests/java5/ataspectj/MessageHandler.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</column>
            <column name="result">24:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
71:loadtime5/java5-src/org/aspectj/weaver/loadtime/Agent.java</column>
        </table>
        <table name="aspectj">
            <column name="id">194</column>
            <column name="bug_id">151978</column>
            <column name="summary">Bug 151978  [3.2compiler] Generics program fails to compile</column>
            <column name="description">generics problem, reported on newsgroup by Thomas Darimont

//package de.tutorials.aspectj;

public interface IMessage {
  void publish();
}


interface IErrorMessage extends IMessage{
  StackTraceElement[] getStackTrace();
}

interface IObjectFactory&lt;E&gt; {
  public &lt;T extends E&gt; T create(Class&lt;T&gt; theObjectType, Object[] theParameters);
}

class MessageFactory implements IObjectFactory&lt;IMessage&gt;{
  public &lt;T extends IMessage&gt; T create(Class&lt;T&gt; theObjectType, Object[] theParameters) {
    return null;
  }
}

class Main {
  public static void main(String[] args) {
    IErrorMessage message = new MessageFactory().create(IErrorMessage.class, new Object[]{&quot;Foo&quot;,&quot;Bar&quot;});
  }
}</column>
            <column name="report_time">2006-07-27 07:15:06</column>
            <column name="report_timestamp">1154000000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">68c36e3</column>
            <column name="commit_timestamp">1154090000</column>
            <column name="files">tests/bugs153/pr151978/IMessage.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</column>
            <column name="result">35:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">195</column>
            <column name="bug_id">151673</column>
            <column name="summary">Bug 151673  Incorrect weaving of after returning when 'input' bytecode is of a strange form</column>
            <column name="description">We have had a user report a problem where after advice being woven into a particular method is producing code that does not verify.  The problem occurs if the bytecode being input to the weaving process includes a subroutine that contains the return from the method.

Here is the problematic snippet produced by some unknown compiler:
   200:	invokespecial	#17; //Method com/MyException.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V
   203:	athrow
   204:	aload_3
   205:	astore	6
   207:	jsr	234
   210:	aload	6
   212:	areturn
   213:	astore	4
   215:	aload	4
   217:	invokevirtual	#79; //Method java/lang/Throwable.printStackTrace:()V
   220:	jsr	234
   223:	goto	238
   226:	astore	7
   228:	jsr	234
   231:	aload	7
   233:	athrow
   234:	astore	8
   236:	aload_3
   237:	areturn
   238:	return
  Exception table:
   from   to  target type
     2   213   213   Class javax/ejb/FinderException

     2   226   226   any

see the jsr's jump to 234, but before the subroutine return at 238 there is an areturn out of the method (this method returns a String).

After weaving we get something like this:

   200:	invokespecial	#17; //Method com/MyException.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V
   203:	athrow
   204:	aload_3
   205:	astore	6
   207:	jsr	238
   210:	aload	6
   212:	astore	9
   214:	goto	248
   217:	astore	4
   219:	aload	4
   221:	invokevirtual	#79; //Method java/lang/Throwable.printStackTrace:()V
   224:	jsr	238
   227:	goto	246
   230:	astore	7
   232:	jsr	238
   235:	aload	7
   237:	athrow
   238:	astore	8
   240:	aload_3
   241:	astore	9
   243:	goto	248
   246:	astore	9
   248:	invokestatic	#299; //Method After.aspectOf:()LAfter;
   251:	invokevirtual	#302; //Method After.ajc$afterReturning$After$1$26d6d4a7:()V
   254:	aload	9
   256:	return

see how the areturn has been lost - this code will blow up with a verify error (the string is on the stack, we just ignore it and 'return' normally)</column>
            <column name="report_time">2006-07-25 05:45:06</column>
            <column name="report_timestamp">1153820000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">e4ab0ae</column>
            <column name="commit_timestamp">1153990000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result">3:weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
        </table>
        <table name="aspectj">
            <column name="id">196</column>
            <column name="bug_id">151845</column>
            <column name="summary">Bug 151845  NPE while building</column>
            <column name="description">Building of a large project fails while weaving. 
NPE in EclipseSourceContext.removeUnnecessaryProblems(..)

The project was just migrated to Eclipse 3.2
Eclipse newly installed with Eclipse SDK and via Update manager with
AJDT, CDT, Web/J2EE tools, SubClipse, SpringIDE.

Same Project workes in Eclipse 3.1.
Simple Test AspectJ-Project workes OK
Building with Ant/AspectJ compiler (as external Tools Launch in Eclipse)
works.

I tried the following, but got the error anyway:
 - Checked out as a new AspectJ Project
 - upgraded to the developement Version of AJDT</column>
            <column name="report_time">2006-07-26 09:44:50</column>
            <column name="report_timestamp">1153920000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">54f7bb4</column>
            <column name="commit_timestamp">1153990000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseSourceContext.java</column>
            <column name="result">18:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseSourceContext.java</column>
        </table>
        <table name="aspectj">
            <column name="id">197</column>
            <column name="bug_id">151182</column>
            <column name="summary">Bug 151182  NPE in BcelWeaver using LTW</column>
            <column name="description">Hi,

I created a logging aspect for our application some time ago using 1.5.0 of AspectJ. I enabled this from time to time using Load Time Weaving.

I have recently recompiled the aspect using 1.5.2 and tried to run it also using the 1.5.2 weaver jar, but it fails with a NullPointerException.

This is part of one of the many stacktraces:

20 jul 2006 07:42:49,046 - java.lang.NullPointerException
20 jul 2006 07:42:49,062 - 	at org.aspectj.weaver.bcel.BcelWeaver.weaveParentTypeMungers(BcelWeaver.java:1367)
20 jul 2006 07:42:49,062 - 	at org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor(BcelWeaver.java:1237)
20 jul 2006 07:42:49,062 - 	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1072)
20 jul 2006 07:42:49,062 - 	at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:284)
20 jul 2006 07:42:49,062 - 	at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:212)
20 jul 2006 07:42:49,062 - 	at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65)
20 jul 2006 07:42:49,062 - 	at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:55)
20 jul 2006 07:42:49,062 - 	at sun.instrument.TransformerManager.transform(Unknown Source)
20 jul 2006 07:42:49,062 - 	at sun.instrument.InstrumentationImpl.transform(Unknown Source)
20 jul 2006 07:42:49,062 - 	at java.lang.ClassLoader.defineClass1(Native Method)
20 jul 2006 07:42:49,062 - 	at java.lang.ClassLoader.defineClass(Unknown Source)

I then tried with the 1.5.0 weaver jar (although the aspect was compiled using 1.5.2) and this ran without problems.</column>
            <column name="report_time">2006-07-20 02:50:53</column>
            <column name="report_timestamp">1153380000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">397a19d</column>
            <column name="commit_timestamp">1153990000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/Aj.java</column>
            <column name="result">2:loadtime/src/org/aspectj/weaver/loadtime/Aj.java</column>
        </table>
        <table name="aspectj">
            <column name="id">198</column>
            <column name="bug_id">150671</column>
            <column name="summary">Bug 150671  declare error on set of volatile field does not work</column>
            <column name="description">When an aspect has a declare error statement involving a pointcut that captures the setting of a volatile field, a compilation error is not produced.  

This bug can be reproduced as follows.  Consider the following class:

class A {
   private volatile int state;

   public void foo() {
      state = 0;
   }
}

Now consider this aspect:

aspect FSM {
   declare error: set(* A.state): &quot;Changing state&quot;;
}

The setting of the state field in method foo() does not result in a compilation error as expected.  

I originally noticed this bug when using AJDT 1.4 with Eclipse 3.2.  However this has been reproduced and confirmed with the aspectj 1.5.2 compiler.</column>
            <column name="report_time">2006-07-14 12:19:01</column>
            <column name="report_timestamp">1152890000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">357bbe9</column>
            <column name="commit_timestamp">1153810000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</column>
            <column name="result">43:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
136:weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</column>
        </table>
        <table name="aspectj">
            <column name="id">199</column>
            <column name="bug_id">148409</column>
            <column name="summary">Bug 148409  [generics] ClassCastException in UnresolvedType.java:348</column>
            <column name="description">I am using AspectJ load time weaving with Spring 2.0 RC1 to inject my entities, and I am getting the following exception:

java.lang.ClassCastException: org.aspectj.apache.bcel.classfile.Signature$TypeVariableSignature
	at org.aspectj.weaver.UnresolvedType.forGenericTypeSignature(UnresolvedType.java:348)
	at org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType(BcelWorld.java:385)
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.accept(ClassLoaderWeavingAdaptor.java:492)
	at org.aspectj.weaver.tools.WeavingAdaptor.shouldWeave(WeavingAdaptor.java:230)
	at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:210)
	at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65)
	at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:55)
	at sun.instrument.TransformerManager.transform(TransformerManager.java:122)
	at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155)
	at java.lang.ClassLoader.defineClass1(Native Method)

.
.
.

Having examined the call stack under the debugger, this seems to happening when the weaver is attempting to determine whether a particular class should be weaved. The exception is thrown in the following method, at the cast highlighted below.


    public static UnresolvedType forGenericTypeSignature(String sig,String declaredGenericSig) {
    	UnresolvedType ret = UnresolvedType.forSignature(sig);
    	ret.typeKind=TypeKind.GENERIC;
    	
    	ClassSignature csig = new GenericSignatureParser().parseAsClassSignature(declaredGenericSig);
    	
    	Signature.FormalTypeParameter[] ftps = csig.formalTypeParameters;
    	ret.typeVariables = new TypeVariable[ftps.length];
    	for (int i = 0; i &lt; ftps.length; i++) {
			Signature.FormalTypeParameter parameter = ftps[i];
			Signature.ClassTypeSignature cts = (Signature.ClassTypeSignature)parameter.classBound; // EXCEPTION HERE!
			ret.typeVariables[i]=new TypeVariable(ftps[i].identifier,UnresolvedType.forSignature(cts.outerType.identifier+&quot;;&quot;));
		}
    	ret.signatureErasure = sig;
    	ret.signature = ret.signatureErasure;
    	return ret;
    }


The class in question (which is not one that requires weaving), has the following signature:

public class HibernateEntityDAO&lt;interfaceT extends SecurityEntity, concreteT extends interfaceT&gt; extends HibernateDaoSupport
        implements EntityDAO&lt;interfaceT&gt;
 
The exception is happening because the parameter.classBound member is not of type Signature.ClassTypeSignature, but an instance of Signature.TypeVariableSignature.

The loop variable i is 1, and parameter.identifier is concreteT, so it looks like it's the signature of the second type parameter (concreteT) that is tripping up the weaver.</column>
            <column name="report_time">2006-06-23 12:29:03</column>
            <column name="report_timestamp">1151080000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">369de87</column>
            <column name="commit_timestamp">1152190000</column>
            <column name="files">tests/bugs153/pr148409/Blurgh.java
tests/bugs153/pr148409/X.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
weaver/src/org/aspectj/weaver/UnresolvedType.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/UnresolvedType.java
67:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">200</column>
            <column name="bug_id">148693</column>
            <column name="summary">Bug 148693  woven class does not pass org.apache.bcel.verifier.statics.Pass2Verifier</column>
            <column name="description"></column>
            <column name="report_time">2006-06-26 13:29:29</column>
            <column name="report_timestamp">1151340000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">82f217f</column>
            <column name="commit_timestamp">1152090000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
tests/src/org/aspectj/testing/Utils.java</column>
            <column name="result">20:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java
71:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</column>
        </table>
        <table name="aspectj">
            <column name="id">201</column>
            <column name="bug_id">148737</column>
            <column name="summary">Bug 148737  IllegalStateException for non-generic type</column>
            <column name="description">I believe this is similar to 112880.  The message and stack trace I am getting are

 -- (IllegalStateException) Can't ask to parameterize a member of non-generic type: com...object  kind(raw)
Can't ask to parameterize a member of non-generic type: com...object  kind(raw)
java.lang.IllegalStateException: Can't ask to parameterize a member of non-generic type: com....object  kind(raw)
	at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:612)
	at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:597)
	at org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:508)
	at org.aspectj.weaver.ResolvedType$4.get(ResolvedType.java:225)
	at org.aspectj.weaver.Iterators$3$1.hasNext(Iterators.java:118)
	at org.aspectj.weaver.Iterators$5.hasNext(Iterators.java:171)
	at org.aspectj.weaver.Iterators$3.hasNext(Iterators.java:128)
	at org.aspectj.weaver.ResolvedType.lookupMember(ResolvedType.java:345)
	at org.aspectj.weaver.ResolvedType.lookupMethod(ResolvedType.java:326)
.
.
.

The same code was able to be weaved under 1.5.0.  The reason why this is a major issue is 1.5.0 suffers from a StackOverflowException.</column>
            <column name="report_time">2006-06-26 20:09:45</column>
            <column name="report_timestamp">1151370000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f6834c7</column>
            <column name="commit_timestamp">1151930000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
tests/bugs153/pr148737/A.java
tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</column>
            <column name="result">112:org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
2054:tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">202</column>
            <column name="bug_id">148972</column>
            <column name="summary">Bug 148972  problems with binary weaving declare parents in mixed environment.</column>
            <column name="description">These have been reported to me on a large system doing some intricate weaving where some classes are 1.2, some 1.4, some 1.5 and the VM is 1.5.  Binary weaving declare parents sometimes refuses to allow the modification of the hierarchy because it sees a clash between two methods when there is none.  The two cases I'm fixing are:
  1. sometimes the signatures of the return types differ with the '.' or '/' problem (fix == be consistent)
  2. sometimes the syntheticness of the methods in the relationship isn't determined correctly</column>
            <column name="report_time">2006-06-28 07:24:43</column>
            <column name="report_timestamp">1151490000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2f2f568</column>
            <column name="commit_timestamp">1151500000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
            <column name="result">2:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
29:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">203</column>
            <column name="bug_id">148727</column>
            <column name="summary">Bug 148727  Can't call synthetic aspectOf method on aspect in library jar</column>
            <column name="description">Separate compilation of the following program breaks on 1.5.2rc1 because of the recent change to marking aspect methods as synthetic:

public aspect Asp {
}

public class Client {
    public static void main(String argz[]) {
        System.out.println(&quot;Can call aspectOf? &quot;+Asp.aspectOf());
    }
}

C:\devel\scratch\synthetic&gt;ajc -classpath asp.jar;%CLASSPATH% Client.java
C:\devel\scratch\synthetic\Client.java:3 [error] The method aspectOf() is undefi
ned for the type Asp
System.out.println(&quot;Can call aspectOf? &quot;+Asp.aspectOf());


1 error

C:\devel\scratch\synthetic&gt;javac -classpath asp.jar;%CLASSPATH% Client.java
Client.java:3: cannot find symbol
symbol  : method aspectOf()
location: class Asp
        System.out.println(&quot;Can call aspectOf? &quot;+Asp.aspectOf());
                                                    ^
1 error

Clearly it's vital that external users of a library be able to call API methods like aspectOf on library aspects.

This works:

C:\devel\scratch\synthetic&gt;ajc *.aj Client.java

C:\devel\scratch\synthetic&gt;java Client
Can call aspectOf? Asp@b89838

Patch with test integrated into CVS tree to follow...</column>
            <column name="report_time">2006-06-26 16:46:03</column>
            <column name="report_timestamp">1151350000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">21e06a6</column>
            <column name="commit_timestamp">1151490000</column>
            <column name="files">tests/bugs152/pr148727/Client.java
tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
weaver/src/org/aspectj/weaver/NameMangler.java</column>
            <column name="result">4:weaver/src/org/aspectj/weaver/NameMangler.java
14:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">204</column>
            <column name="bug_id">148911</column>
            <column name="summary">Bug 148911  NPR compiling Spring</column>
            <column name="description">The Spring 2.0 RC1 project contains two directories with aspects. Since the eclipse project does not compile cleanly with just the java nature, I decided to try adding the aspectj nature and giving the aspectj builder a shot. 

I don't have any idea what might be the trigger to the problem, but simply checking out Spring 2.0 RC1 and adding the aspectj nature should be able to reproduce. If I learn more I will add to this bug.

----

java.lang.NullPointerException
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding(SingleTypeReference.java:39)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:132)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:123)
at org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.setParameters(AsmElementFormatter.java:311)
at org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.genLabelAndKind(AsmElementFormatter.java:258)
at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit(AsmHierarchyBuilder.java:392)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:185)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1250)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse(QualifiedAllocationExpression.java:392)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.traverse(LocalDeclaration.java:242)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:212)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1195)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:339)
at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild(AsmHierarchyBuilder.java:145)
at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit(AsmHierarchyBuilder.java:87)
at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit(EclipseFactory.java:941)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(AjCompilerAdapter.java:210)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184(CompilerAdapter.aj:91)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:533)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:887)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:244)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:163)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

NullPointerException thrown: null</column>
            <column name="report_time">2006-06-27 19:29:58</column>
            <column name="report_timestamp">1151450000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b59b036</column>
            <column name="commit_timestamp">1151480000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</column>
            <column name="result">5:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</column>
        </table>
        <table name="aspectj">
            <column name="id">205</column>
            <column name="bug_id">148388</column>
            <column name="summary">Bug 148388  LTW weaver produces a debug message at the begining</column>
            <column name="description"></column>
            <column name="report_time">2006-06-23 09:55:32</column>
            <column name="report_timestamp">1151070000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">99d1c18</column>
            <column name="commit_timestamp">1151430000</column>
            <column name="files">weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</column>
            <column name="result">43:weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</column>
        </table>
        <table name="aspectj">
            <column name="id">206</column>
            <column name="bug_id">148786</column>
            <column name="summary">Bug 148786  new array construction join point can fail for freaky array constructors</column>
            <column name="description">Took me a while to discover how to recreate this problem, but this class:

public class A {
  public static void main(String []argv) {
    byte[][] bytes = new byte[][]{{0},{1}};
  }
}

causes this bytecode:

0:   iconst_2
1:   anewarray       #18; //class &quot;[B&quot;

and this causes the newarray joinpoint code to go bang.
(eg. before(): call(*[].new(..)) {})

java.lang.NullPointerException
        at org.aspectj.weaver.bcel.BcelWorld.fromBcel(BcelWorld.java:236)
        at org.aspectj.weaver.bcel.BcelWorld.makeJoinPointSignatureForArrayConstruction(BcelWorld.java:483)
        at org.aspectj.weaver.bcel.BcelShadow.makeArrayConstructorCall(BcelShadow.java:801)
        at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2510)
        at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2325)
        at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:490)
        at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:115)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1574)
        at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1525)
        at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1305)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1127)</column>
            <column name="report_time">2006-06-27 05:42:49</column>
            <column name="report_timestamp">1151400000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">792d1df</column>
            <column name="commit_timestamp">1151410000</column>
            <column name="files">tests/bugs152/pr148786/A.java
tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</column>
            <column name="result">4:weaver/src/org/aspectj/weaver/bcel/BcelWorld.java
16:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">207</column>
            <column name="bug_id">147711</column>
            <column name="summary">Bug 147711  Add an option to generate aj-synthetics with true synthetic flag</column>
            <column name="description">In a number of cases tools are getting confused over generated aj members that are  &quot;aj-synthetic&quot; but not marked with the synthetic attribute (because in the past, this has upset other tools). The most recent example was a JAXB posting on the list - by having a perthis() clause in an aspect that matched a type with JAXB 2 annotations the user was no longer able to use JAXB. This is a serious issue, and will prevent the usage of JAXB 2 with any type into which we introduce properties as aj-synthetic members. The JAXB 2 solution to ignore such fields is to annotate them with @XmlTransient, but since the field does not exist in the user program they can't even do this!</column>
            <column name="report_time">2006-06-19 08:15:25</column>
            <column name="report_timestamp">1150720000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">c9f311a</column>
            <column name="commit_timestamp">1151150000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/DeclareDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
weaver/src/org/aspectj/weaver/NameMangler.java
weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java
weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</column>
            <column name="result">14:weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java
20:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
33:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/DeclareDeclaration.java
46:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
79:weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java
118:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java
315:weaver/src/org/aspectj/weaver/NameMangler.java
396:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java</column>
        </table>
        <table name="aspectj">
            <column name="id">208</column>
            <column name="bug_id">148007</column>
            <column name="summary">Bug 148007  boolean methods with after advice return incorrect result on JRockit under WLS</column>
            <column name="description"></column>
            <column name="report_time">2006-06-21 05:27:01</column>
            <column name="report_timestamp">1150880000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">426cbdc</column>
            <column name="commit_timestamp">1150950000</column>
            <column name="files">tests/bugs152/pr148007/purejava/test/BooleanUnitTest.java
tests/bugs152/pr148007/purejava/test/LoggingAspect.java
tests/bugs152/pr148007/test/BooleanUnitTest.java
tests/bugs152/pr148007/test/TestServlet.java
tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
weaver/src/org/aspectj/weaver/bcel/Utility.java</column>
            <column name="result">6:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
16:weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
364:weaver/src/org/aspectj/weaver/bcel/Utility.java</column>
        </table>
        <table name="aspectj">
            <column name="id">209</column>
            <column name="bug_id">147801</column>
            <column name="summary">Bug 147801  java.lang.ClassFormatError: Repetitive method name/signature</column>
            <column name="description">I get a ClassFormatError trying to perform runtime-weaving on a DB2 class.
The class being woven is COM.ibm.db2.jdbc.app.DB2PreparedStatement.  
The full message exception is: java.lang.ClassFormatError: Repetitive method name/signature in class file COM/ibm/db2/jdbc/app/DB2PreparedStatement.

In examining the post-weave class file, it looks as if Aspectj is defining
a duplicate method within the class called getParameterMetaData().  

Here are the messages from the weaver:
04:21:13,640 INFO  [STDOUT] info weaving 'COM.ibm.db2.jdbc.app.DB2CallableStatement'
04:21:13,640 INFO  [STDOUT] info weaver operating in reweavable mode.  Need to verify any required types exist.
04:21:13,671 INFO  [STDOUT] info weaving 'COM.ibm.db2.jdbc.app.DB2PreparedStatement'
04:21:13,671 INFO  [STDOUT] info weaver operating in reweavable mode.  Need to verify any required types exist.
04:21:13,703 INFO  [STDOUT] weaveinfo Join point 'method-execution(java.sql.ResultSet COM.ibm.db2.jdbc.app.DB2PreparedStatement.executeQuery())' in Type 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' (DB2PreparedStatement.java:1679) advised by before advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement' (CaptureSQLStatement.aj:747) [with runtime test]
04:21:13,703 INFO  [STDOUT] weaveinfo Join point 'method-execution(java.sql.ResultSet COM.ibm.db2.jdbc.app.DB2PreparedStatement.executeQuery())' in Type 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' (DB2PreparedStatement.java:1679) advised by afterReturning advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement' (CaptureSQLStatement.aj:946) [with runtime test]
04:21:13,718 INFO  [STDOUT] weaveinfo Join point 'method-execution(java.sql.ResultSet COM.ibm.db2.jdbc.app.DB2PreparedStatement.executeQuery())' in Type 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' (DB2PreparedStatement.java:1679) advised by afterThrowing advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement' (CaptureSQLStatement.aj:971) [with runtime test]
04:21:13,718 INFO  [STDOUT] weaveinfo Join point 'method-execution(boolean COM.ibm.db2.jdbc.app.DB2PreparedStatement.execute())' in Type 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' (DB2PreparedStatement.java:3971) advised by before advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement' (CaptureSQLStatement.aj:833) [with runtime test]
04:21:13,718 INFO  [STDOUT] weaveinfo Join point 'method-execution(boolean COM.ibm.db2.jdbc.app.DB2PreparedStatement.execute())' in Type 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' (DB2PreparedStatement.java:3971) advised by afterReturning advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement' (CaptureSQLStatement.aj:946) [with runtime test]</column>
            <column name="report_time">2006-06-19 18:07:26</column>
            <column name="report_timestamp">1150750000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">13dde4e</column>
            <column name="commit_timestamp">1150890000</column>
            <column name="files">tests/bugs152/pr147801/Foo.java
tests/bugs152/pr147801/PreparedStatement.java
tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
weaver/src/org/aspectj/weaver/World.java
weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</column>
            <column name="result">8:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
18:weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
60:weaver/src/org/aspectj/weaver/World.java</column>
        </table>
        <table name="aspectj">
            <column name="id">210</column>
            <column name="bug_id">147845</column>
            <column name="summary">Bug 147845  Generic abstract aspect hierarchies 3 deep or higher can fail when type parameters have bounds</column>
            <column name="description">The program below should compile happily, but fails with:

[error] Type B does not meet the specification for type parameter 1 (A extends MyBase) in generic type Base
abstract aspect Middle&lt;B extends MyBase&gt; extends Base&lt;B&gt; {}
                ^^^^^                                      


The test program:
------------------

interface MyBase {};
interface MyMarker extends MyBase {}

abstract aspect Base&lt;A extends MyBase&gt; {}

abstract aspect Middle&lt;B extends MyBase&gt; extends Base&lt;B&gt; {}

aspect Sub extends Middle&lt;MyMarker&gt; {}</column>
            <column name="report_time">2006-06-20 06:16:42</column>
            <column name="report_timestamp">1150800000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">791f8a7</column>
            <column name="commit_timestamp">1150800000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
weaver/src/org/aspectj/weaver/TypeVariable.java</column>
            <column name="result">13:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
196:weaver/src/org/aspectj/weaver/TypeVariable.java</column>
        </table>
        <table name="aspectj">
            <column name="id">211</column>
            <column name="bug_id">136707</column>
            <column name="summary">Bug 136707  iajc should print summary like javac</column>
            <column name="description">The iajc ant task should produce a summary of what it is doing, like the javac task does:

[javac] Compiling 189 source files to C:\project\classes</column>
            <column name="report_time">2006-04-13 14:23:22</column>
            <column name="report_timestamp">1144950000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">008efca</column>
            <column name="commit_timestamp">1150230000</column>
            <column name="files">taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java
taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java</column>
            <column name="result">2:taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java
19:taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java</column>
        </table>
        <table name="aspectj">
            <column name="id">212</column>
            <column name="bug_id">146546</column>
            <column name="summary">Bug 146546  Remove hard coded dependency on &quot;|&quot; in getFileName(..) methods</column>
            <column name="description"></column>
            <column name="report_time">2006-06-12 07:59:26</column>
            <column name="report_timestamp">1150110000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">38cc0dd</column>
            <column name="commit_timestamp">1150120000</column>
            <column name="files">asm/src/org/aspectj/asm/AsmManager.java
asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</column>
            <column name="result">24:asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java
33:asm/src/org/aspectj/asm/AsmManager.java</column>
        </table>
        <table name="aspectj">
            <column name="id">213</column>
            <column name="bug_id">122580</column>
            <column name="summary">Bug 122580  Fix &amp; Bug: Circularity Failure for Verbose Loading on JRockit 1.4.2_08 Agent</column>
            <column name="description">Here is a stack trace I am getting when I try to use AspectJ 1.5.0 final release's load-time weaving with JRockIt 1.4.2_08 using -Xmanagement:class=org.aspectj.weaver.loadtime.JRockitAgent to load Weblogic Server 8.1 SP2. I debugged the code in Eclipse and discovered that the weaver was being initialized while loading IMessage$Kind, so the JRockIt VM simply hasn't run staticinitialization yet, making IMessage.INFO null.

I was able to fix this stack trace by hoisting the check for loading AspectJ code up BEFORE initializing a weaving adaptor i.e., changing line 55 of Aj.java to be
        if (loader == null || className == null || className.startsWith(&quot;org/aspectj/&quot;)) {

I then commented out line 251 of WeavingAdaptor to avoid a duplicate check:
	private boolean shouldWeaveName (String name) {
		return !((/*(name.startsWith(&quot;org.apache.bcel.&quot;)||//FIXME AV why ? bcel is wrapped in org.aspectj.
                name.startsWith(&quot;org.aspectj.&quot;)||*/ // now checked earlier, to avoid circularity issues in initialization 
                name.startsWith(&quot;java.&quot;)
                || name.startsWith(&quot;javax.&quot;))
                //|| name.startsWith(&quot;$Proxy&quot;)//JDK proxies//FIXME AV is that 1.3 proxy ? fe. ataspect.$Proxy0 is a java5 proxy...
                || name.startsWith(&quot;sun.reflect.&quot;));//JDK reflect
	}

Note that this bug does NOT occur when using a JRockIt 1.5.0 VM, even with the -Xmanagement command line argument.

Stack Trace:
java.lang.IllegalArgumentException: null kind
	at org.aspectj.bridge.Message.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;ZIII)V(Message.java:89)
	at org.aspectj.bridge.Message.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;)V(Message.java:67)
	at org.aspectj.bridge.Message.&lt;init&gt;(Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Ljava/lang/Throwable;Lorg/aspectj/bridge/ISourceLocation;)V(Message.java:110)
	at org.aspectj.bridge.MessageUtil.info(Ljava/lang/String;)Lorg/aspectj/bridge/IMessage;(MessageUtil.java:211)
	at org.aspectj.bridge.MessageUtil.info(Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String;)Z(MessageUtil.java:98)
	at org.aspectj.weaver.tools.WeavingAdaptor.info(Ljava/lang/String;)Z(WeavingAdaptor.java:343)
	at org.aspectj.weaver.tools.WeavingAdaptor.createMessageHandler()V(WeavingAdaptor.java:168)
	at org.aspectj.weaver.tools.WeavingAdaptor.&lt;init&gt;()V(WeavingAdaptor.java:80)
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.&lt;init&gt;(Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext;)V(ClassLoaderWeavingAdaptor.java:70)
	at org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver(Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext;)Lorg/aspectj/weaver/tools/WeavingAdaptor;(Aj.java:94)
	at org.aspectj.weaver.loadtime.Aj.preProcess(Ljava/lang/String;[BLjava/lang/ClassLoader;)[B(Aj.java:61)
	at org.aspectj.weaver.loadtime.JRockitAgent.preProcess(Ljava/lang/ClassLoader;Ljava/lang/String;[B)[B(JRockitAgent.java:74)
	at jrockit.vm.ClassPreProcessorManager.notifyClassPreProcessor(ILjava/lang/String;[B)[B(Unknown Source)
	at jrockit.vm.Classes.defineClass0(ILjava/lang/String;[BII)I(Unknown Source)
	at jrockit.vm.Classes.defineClass(Ljava/lang/ClassLoader;Ljava/lang/String;[BII)Ljava/lang/Class;(Unknown Source)
	at java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;(Unknown Source)
	at java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class;(SecureClassLoader.java:123)
	at java.net.URLClassLoader.defineClass(Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;(URLClassLoader.java:251)
	at java.net.URLClassLoader.access$100(Ljava/net/URLClassLoader;Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;(URLClassLoader.java:55)
	at java.net.URLClassLoader$1.run()Ljava/lang/Object;(URLClassLoader.java:194)
	at jrockit.vm.AccessController.do_privileged_exc(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;I)Ljava/lang/Object;(Unknown Source)
	at jrockit.vm.AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;(Unknown Source)
	at java.net.URLClassLoader.findClass(Ljava/lang/String;)Ljava/lang/Class;(URLClassLoader.java:187)
	at java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;(Unknown Source)
	at sun.misc.Launcher$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;(Launcher.java:274)
	at java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class;(Unknown Source)
	at java.lang.ClassLoader.loadClassFromNative(II)Ljava/lang/Class;(Unknown Source)
	at jrockit.vm.RNI.getRunnableCode(I)I(Unknown Source)
	at jrockit.vm.RNI.trampoline()V(Unknown Source)
	at org.aspectj.bridge.MessageUtil.info(Ljava/lang/String;)Lorg/aspectj/bridge/IMessage;(MessageUtil.java:???)
	at org.aspectj.bridge.MessageUtil.info(Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String;)Z(MessageUtil.java:98)
	at org.aspectj.weaver.tools.WeavingAdaptor.info(Ljava/lang/String;)Z(WeavingAdaptor.java:343)
java.lang.IllegalArgumentException: null kind
	at org.aspectj.bridge.Message.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;ZIII)V(Message.java:89)
	at org.aspectj.bridge.Message.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;)V(Message.java:67)
	at org.aspectj.bridge.Message.&lt;init&gt;(Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Ljava/lang/Throwable;Lorg/aspectj/bridge/ISourceLocation;)V(Message.java:110)
	at org.aspectj.bridge.MessageUtil.info(Ljava/lang/String;)Lorg/aspectj/bridge/IMessage;(MessageUtil.java:211)
	at org.aspectj.bridge.MessageUtil.info(Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String;)Z(MessageUtil.java:98)
	at org.aspectj.weaver.tools.WeavingAdaptor.info(Ljava/lang/String;)Z(WeavingAdaptor.java:343)
	at org.aspectj.weaver.tools.WeavingAdaptor.createMessageHandler()V(WeavingAdaptor.java:168)
	at org.aspectj.weaver.tools.WeavingAdaptor.&lt;init&gt;()V(WeavingAdaptor.java:80)
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.&lt;init&gt;(Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext;)V(ClassLoaderWeavingAdaptor.java:70)
	at org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver(Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext;)Lorg/aspectj/weaver/tools/WeavingAdaptor;(Aj.java:94)
	at org.aspectj.weaver.loadtime.Aj.preProcess(Ljava/lang/String;[BLjava/lang/ClassLoader;)[B(Aj.java:61)
	at org.aspectj.weaver.loadtime.JRockitAgent.preProcess(Ljava/lang/ClassLoader;Ljava/lang/String;[B)[B(JRockitAgent.java:74)
	at jrockit.vm.ClassPreProcessorManager.notifyClassPreProcessor(ILjava/lang/String;[B)[B(Unknown Source)
	at jrockit.vm.Classes.defineClass0(ILjava/lang/String;[BII)I(Unknown Source)
	at jrockit.vm.Classes.defineClass(Ljava/lang/ClassLoader;Ljava/lang/String;[BII)Ljava/lang/Class;(Unknown Source)
	at java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;(Unknown Source)
	at java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class;(SecureClassLoader.java:123)
	at java.net.URLClassLoader.defineClass(Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;(URLClassLoader.java:251)
	at java.net.URLClassLoader.access$100(Ljava/net/URLClassLoader;Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;(URLClassLoader.java:55)
	at java.net.URLClassLoader$1.run()Ljava/lang/Object;(URLClassLoader.java:194)
	at jrockit.vm.AccessController.do_privileged_exc(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;I)Ljava/lang/Object;(Unknown Source)
	at jrockit.vm.AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;(Unknown Source)
	at java.net.URLClassLoader.findClass(Ljava/lang/String;)Ljava/lang/Class;(URLClassLoader.java:187)
	at java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;(Unknown Source)
	at sun.misc.Launcher$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;(Launcher.java:274)
	at java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class;(Unknown Source)
	at java.lang.ClassLoader.loadClassFromNative(II)Ljava/lang/Class;(Unknown Source)
	at jrockit.vm.RNI.getRunnableCode(I)I(Unknown Source)
	at jrockit.vm.RNI.trampoline()V(Unknown Source)
	at org.aspectj.bridge.MessageUtil.info(Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String;)Z(MessageUtil.java:???)
	at org.aspectj.weaver.tools.WeavingAdaptor.info(Ljava/lang/String;)Z(WeavingAdaptor.java:343)
	at org.aspectj.weaver.tools.WeavingAdaptor.createMessageHandler()V(WeavingAdaptor.java:168)</column>
            <column name="report_time">2006-01-03 20:19:46</column>
            <column name="report_timestamp">1136340000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">75afb31</column>
            <column name="commit_timestamp">1149850000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/Aj.java
loadtime/src/org/aspectj/weaver/loadtime/JRockitAgent.java
loadtime/testsrc/LoadtimeModuleTests.java
loadtime/testsrc/org/aspectj/bea/jvm/ClassLibraryImpl.java
loadtime/testsrc/org/aspectj/bea/jvm/JVMImpl.java
loadtime/testsrc/org/aspectj/weaver/loadtime/JRockitAgentTest.java</column>
            <column name="result">2:loadtime/src/org/aspectj/weaver/loadtime/Aj.java
12:loadtime/src/org/aspectj/weaver/loadtime/JRockitAgent.java</column>
        </table>
        <table name="aspectj">
            <column name="id">214</column>
            <column name="bug_id">145322</column>
            <column name="summary">Bug 145322  Failure of testCompareSubclassDelegates() on J9 1.5.0 SR1</column>
            <column name="description"></column>
            <column name="report_time">2006-06-05 08:12:02</column>
            <column name="report_timestamp">1149510000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3e0650d</column>
            <column name="commit_timestamp">1149580000</column>
            <column name="files">weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java</column>
            <column name="result">2:weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java</column>
        </table>
        <table name="aspectj">
            <column name="id">215</column>
            <column name="bug_id">145086</column>
            <column name="summary">Bug 145086  NPE when weak reference set in signature</column>
            <column name="description">Simon ran into the same problem in setting the values. I will attach a patch to fix this, with test cases to properly verify it works in both cases.

java.lang.NullPointerException
	at org.aspectj.runtime.reflect.SignatureImpl$CacheImpl.set(SignatureImpl.java:224)
	at org.aspectj.runtime.reflect.SignatureImpl.toString(SignatureImpl.java:57)
	at org.aspectj.runtime.reflect.SignatureImpl.toString(SignatureImpl.java:62)</column>
            <column name="report_time">2006-06-02 11:35:11</column>
            <column name="report_timestamp">1149260000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f821ca3</column>
            <column name="commit_timestamp">1149320000</column>
            <column name="files">runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java
runtime/testsrc/org/aspectj/runtime/reflect/JoinPointImplTest.java
runtime/testsrc/org/aspectj/runtime/reflect/SignatureTest.java</column>
            <column name="result">1:runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java
56:runtime/testsrc/org/aspectj/runtime/reflect/SignatureTest.java
300:runtime/testsrc/org/aspectj/runtime/reflect/JoinPointImplTest.java</column>
        </table>
        <table name="aspectj">
            <column name="id">216</column>
            <column name="bug_id">132591</column>
            <column name="summary">Bug 132591  Duplicate exception with aop.xml file on aspectpath</column>
            <column name="description"></column>
            <column name="report_time">2006-03-20 15:51:21</column>
            <column name="report_timestamp">1142890000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">319a0d1</column>
            <column name="commit_timestamp">1149250000</column>
            <column name="files">ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java
ajde/testsrc/org/aspectj/ajde/OutxmlTest.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
            <column name="result">23:ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java
32:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
126:ajde/testsrc/org/aspectj/ajde/OutxmlTest.java</column>
        </table>
        <table name="aspectj">
            <column name="id">217</column>
            <column name="bug_id">120739</column>
            <column name="summary">Bug 120739  LTW Optimization: Disable World if it has No Aspects</column>
            <column name="description">This optimization disables weaving for a ClassLoader where there are no aspects defined. This is actually useful if you have aspect exclusions that exclude all the aspects defined in a parent class loader. It is also helpful in the trivial/rare case where there is an aop.xml definition with no aspect definitions.</column>
            <column name="report_time">2005-12-13 16:10:55</column>
            <column name="report_timestamp">1134510000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">4513e92</column>
            <column name="commit_timestamp">1149180000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
tests/java5/ataspectj/ataspectj/ltwreweavable/EmptyAtAspect.java
tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</column>
            <column name="result">1:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
18:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">218</column>
            <column name="bug_id">144717</column>
            <column name="summary">Bug 144717  org.aspectj.weaver.BCException: Do not call nameToSignature with something that looks like a signature (descriptor): '[Ljava.lang.String;'</column>
            <column name="description">The exception below is produced when parsing a pointcut that uses an array type in args using the reflection world pointcut parser support.

org.aspectj.weaver.BCException: Do not call nameToSignature with something that looks like a signature (descriptor): '[Ljava.lang.String;'

	at org.aspectj.weaver.UnresolvedType.nameToSignature(UnresolvedType.java:741)
	at org.aspectj.weaver.UnresolvedType.forName(UnresolvedType.java:311)
	at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getDeclaredPointcuts(Java15ReflectionBasedReferenceTypeDelegate.java:260)
	at org.aspectj.weaver.ReferenceType.getDeclaredPointcuts(ReferenceType.java:526)
	at org.aspectj.weaver.ResolvedType$7.get(ResolvedType.java:468)
	at org.aspectj.weaver.Iterators$6.hasNext(Iterators.java:118)
	at org.aspectj.weaver.Iterators$5.hasNext(Iterators.java:128)
	at org.aspectj.weaver.ResolvedType.findPointcut(ResolvedType.java:479)
	at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings(ReferencePointcut.java:151)
	at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:194)
	at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression(PointcutParser.java:330)
	at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:308)
	at org.aspectj.weaver.tools.Java15PointcutExpressionTest.testArrayTypeInArgs(Java15PointcutExpressionTest.java:304)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)</column>
            <column name="report_time">2006-05-31 12:43:19</column>
            <column name="report_timestamp">1149090000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">97cd71a</column>
            <column name="commit_timestamp">1149100000</column>
            <column name="files">weaver/src/org/aspectj/weaver/tools/PointcutParser.java
weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java
weaver5/java5-testsrc/org/aspectj/weaver/tools/Java15PointcutExpressionTest.java</column>
            <column name="result">1:weaver5/java5-testsrc/org/aspectj/weaver/tools/Java15PointcutExpressionTest.java
2:weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java
3:weaver/src/org/aspectj/weaver/tools/PointcutParser.java</column>
        </table>
        <table name="aspectj">
            <column name="id">219</column>
            <column name="bug_id">143930</column>
            <column name="summary">Bug 143930  create constructor ipe in same was as method ipes</column>
            <column name="description"></column>
            <column name="report_time">2006-05-26 07:12:00</column>
            <column name="report_timestamp">1148640000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">26a8a86</column>
            <column name="commit_timestamp">1148980000</column>
            <column name="files">ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java</column>
            <column name="result">7:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
16:weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java
45:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
58:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java
96:ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java
384:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</column>
        </table>
        <table name="aspectj">
            <column name="id">220</column>
            <column name="bug_id">142466</column>
            <column name="summary">Bug 142466  [ltw] Fail at runtime if abstract methods are not implemented in a hierarchy that finishes with an XML aspect</column>
            <column name="description">see pr125480 - copying the test for that will be a good basis for a test for this bug.  We don't check that when defining a concrete aspect there are no unimplemented abstract methods in the aspect we are concretizing.</column>
            <column name="report_time">2006-05-18 07:32:08</column>
            <column name="report_timestamp">1147950000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">69e24e9</column>
            <column name="commit_timestamp">1148370000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java
tests/bugs152/pr142466/AtAspectTestConcreteMethods.java
tests/bugs152/pr142466/HelloWorld.java
tests/bugs152/pr142466/case2/AtAspectTestConcreteMethods.java
tests/bugs152/pr142466/case2/HelloWorld.java
tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
12:loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java</column>
        </table>
        <table name="aspectj">
            <column name="id">221</column>
            <column name="bug_id">138223</column>
            <column name="summary">Bug 138223  Compiler crash on two binding @xxx pcds in one compound expression</column>
            <column name="description">junit.framework.AssertionFailedError: test &quot;Double at annotation matching (no binding)&quot; failed
test &quot;Double at annotation matching (no binding)&quot; failed
Unexpected warning messages:
	warning at before() : transactionalOperation() {
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:20:0::0 advice defined in DoubleAnnotationMatching has not been applied [Xlint:adviceDidNotMatch]
Unexpected fail messages:
	abort trouble in: 
 class Foo extends java.lang.Object:
  void &lt;init&gt;():
                    ALOAD_0     // LFoo; this   (line 26)
                    INVOKESPECIAL java.lang.Object.&lt;init&gt; ()V
    constructor-execution(void Foo.&lt;init&gt;())
    |               RETURN
    constructor-execution(void Foo.&lt;init&gt;())
  end void &lt;init&gt;()

  public void foo()    org.aspectj.weaver.MethodDeclarationLineNumber: 28:533
:
    method-execution(void Foo.foo())
    |               RETURN   (line 28)
    method-execution(void Foo.foo())
  end public void foo()

  public void bar()    org.aspectj.weaver.MethodDeclarationLineNumber: 30:563
:
    method-execution(void Foo.bar())
    |               RETURN   (line 30)
    method-execution(void Foo.bar())
  end public void bar()

end  class Foo
 -- (BCException) Impossible! annotation=[Tx]  shadow=[method-execution(void Foo.foo()) at /private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:28::533]    pointcut is at [/private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:15::316]
when implementing on shadow method-execution(void Foo.foo())
when weaving type Foo
when weaving classes 
when weaving 
when batch building BuildConfig[null] #Files=1

Impossible! annotation=[Tx]  shadow=[method-execution(void Foo.foo()) at /private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:28::533]    pointcut is at [/private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:15::316]
when implementing on shadow method-execution(void Foo.foo())
when weaving type Foo
when weaving classes 
when weaving 
when batch building BuildConfig[null] #Files=1

org.aspectj.weaver.BCException: Impossible! annotation=[Tx]  shadow=[method-execution(void Foo.foo()) at /private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:28::533]    pointcut is at [/private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:15::316]
when implementing on shadow method-execution(void Foo.foo())
when weaving type Foo
when weaving classes 
when weaving 
when batch building BuildConfig[null] #Files=1

	at org.aspectj.weaver.patterns.AnnotationPointcut.findResidueInternal(AnnotationPointcut.java:201)
	at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)
	at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:93)
	at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)
	at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:93)
	at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)
	at org.aspectj.weaver.patterns.IfPointcut.findResidueInternal(IfPointcut.java:173)
	at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)
	at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:93)
	at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)
	at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:93)
	at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)
	at org.aspectj.weaver.patterns.OrPointcut.findResidueInternal(OrPointcut.java:96)
	at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)
	at org.aspectj.weaver.bcel.BcelAdvice.specializeOn(BcelAdvice.java:132)
	at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers(BcelShadow.java:325)
	at org.aspectj.weaver.Shadow.implement(Shadow.java:455)
	at org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2236)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:491)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:109)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1560)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1511)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1291)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1113)
	at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:311)
	at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:183)
	at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:242)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161)
	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:114)
	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)
	at org.aspectj.tools.ajc.Main.run(Main.java:367)
	at org.aspectj.tools.ajc.Main.runMain(Main.java:246)
	at org.aspectj.tools.ajc.Ajc.compile(Ajc.java:199)
	at org.aspectj.tools.ajc.Ajc.compile(Ajc.java:163)
	at org.aspectj.tools.ajc.AjcTestCase.ajc(AjcTestCase.java:510)
	at org.aspectj.testing.CompileSpec.execute(CompileSpec.java:53)
	at org.aspectj.testing.AjcTest.runTest(AjcTest.java:68)
	at org.aspectj.testing.XMLBasedAjcTestCase.runTest(XMLBasedAjcTestCase.java:111)
	at org.aspectj.systemtest.ajc152.Ajc152Tests.testDoubleAnnotationMatching_pr138221(Ajc152Tests.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)


command was: ajc -classpath /Users/adrian/projects/aspectjdev/lib/test/aspectjrt.jar:../testing-client/bin:../runtime/bin:../aspectj5rt/bin:../lib/junit/junit.jar:../bridge/bin:../loadtime/bin:../weaver/bin:../weaver5/bin:../aj-build/jars/bridge.jar:../aj-build/jars/util.jar:../aj-build/jars/loadtime.jar:../aj-build/jars/weaver.jar:../aj-build/jars/weaver5.jar:../aj-build/jars/asm.jar:../lib/test/testing-client.jar:../lib/test/aspectjrt.jar:/tmp/ajcSandbox/ajcTest18924.tmp -1.5 /tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj -d /tmp/ajcSandbox/ajcTest18924.tmp
	at junit.framework.Assert.fail(Assert.java:47)
	at org.aspectj.tools.ajc.AjcTestCase.assertMessages(AjcTestCase.java:452)
	at org.aspectj.testing.CompileSpec.execute(CompileSpec.java:56)
	at org.aspectj.testing.AjcTest.runTest(AjcTest.java:68)
	at org.aspectj.testing.XMLBasedAjcTestCase.runTest(XMLBasedAjcTestCase.java:111)
	at org.aspectj.systemtest.ajc152.Ajc152Tests.testDoubleAnnotationMatching_pr138221(Ajc152Tests.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)</column>
            <column name="report_time">2006-04-24 13:17:07</column>
            <column name="report_timestamp">1145900000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6b2d9ae</column>
            <column name="commit_timestamp">1147880000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
29:weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java</column>
        </table>
        <table name="aspectj">
            <column name="id">222</column>
            <column name="bug_id">141956</column>
            <column name="summary">Bug 141956  Null Pointer Exception when trying to skip Parent Mungers.</column>
            <column name="description">I don't know much about the internal workings of aspectJ but this bug keeps popping up so I went through the trouble of checking of trying to debug it so that I could hopefully provide enough information to get it fixed.

This happens while using eclipse AJDT. It never happens if I fully do a clean before rebuild. It only seems to happen when doing incrmental builds (using  the project-&gt;build automatically setting). 

The error happens in the iterator that recursively builds a list of methods
to return for matching. The error is triggered here:


    // we need to know if it is an interface from Parent kind munger
            // as those are used for @AJ ITD and we precisely want to skip those
            boolean shouldSkip = false;
            for (int j = 0; j &lt; rtx.interTypeMungers.size(); j++) {
                ConcreteTypeMunger munger = (ConcreteTypeMunger) rtx.interTypeMungers.get(j);
                if (munger.getMunger().getKind() == ResolvedTypeMunger.Parent) {
                    shouldSkip = true;
                    break;
                }
            }

munger.getMunger() returns null because the munger instance is a BcelPerClauseAspectAdder. My naive fix would be to check munger.getMunger() == null or check munger.getKind(). I'm assuming that BcelPerClausAspectAdder is one that should be skipped since it is related to @AJ ??? 

Again, I don't know very much about the internal architecture of the weaver magic so I hope this is enough information. 

I would appreciate it if someone who knows more of the internals could speculate as to why this bug would never pop up on a clean build but only on incremental builds? Also it's not on all incremental builds and I haven't been able to isolate what kind of changes or compiles it triggers this, although it seems that  once I got the exception once, I keep getting it on every build until I do a clean. 

java.lang.NullPointerException
at org.aspectj.weaver.ResolvedType.addAndRecurse(ResolvedType.java:288)
at org.aspectj.weaver.ResolvedType.getMethodsWithoutIterator(ResolvedType.java:257)
at org.aspectj.weaver.ResolvedType.lookupResolvedMember(ResolvedType.java:378)
at org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:178)
at org.aspectj.weaver.JoinPointSignatureIterator.hasNext(JoinPointSignatureIterator.java:69)
at org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:287)
at org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:103)
at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:144)
at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:51)
at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:144)
at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:64)
at org.aspectj.weaver.Advice.match(Advice.java:109)
at org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:104)
at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2210)
at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1752)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:479)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:109)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1574)
at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1525)
at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1305)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1127)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:321)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:192)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:269)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:168)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)</column>
            <column name="report_time">2006-05-16 05:12:06</column>
            <column name="report_timestamp">1147770000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5f6a6b1</column>
            <column name="commit_timestamp">1147870000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
tests/multiIncremental/PR141956/base/A.java
tests/multiIncremental/PR141956/base/C.java
tests/multiIncremental/PR141956/inc1/C.java
tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
weaver/src/org/aspectj/weaver/ResolvedType.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/ResolvedType.java
8:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
12:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">223</column>
            <column name="bug_id">130722</column>
            <column name="summary">Bug 130722  poincut references in percflow instantiation model aspects can not be resolved</column>
            <column name="description">Take these two aspects and this litte class:

// source1
package test1;

import test.Test;
public aspect PointcutProvider {

	public pointcut test(): execution(* Test.*(..));
}


// source2
package test;

import test1.PointcutProvider;

public aspect PointcutConsumer percflow(flow()) {

        // compiler issues the following line with
        // can not find pointcut test on test.PointcutConsumer
	pointcut mytest(): PointcutProvider.test();
        // this also does not work with the same error message
        pointcut mytest(): test1.PointcutProvider.test();
	
	pointcut flow(): mytest();
}
// source3
package test;


public class Test {

	public void foo() {
		
	}
}


Changing the consumer aspect to singleton instantiation model works.</column>
            <column name="report_time">2006-03-07 05:53:19</column>
            <column name="report_timestamp">1141730000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b166a7e</column>
            <column name="commit_timestamp">1147790000</column>
            <column name="files">tests/bugs152/pr130722/test/Test.java
tests/src/org/aspectj/systemtest/ajc150/GenericITDsDesign.java
tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
weaver/src/org/aspectj/weaver/CrosscuttingMembers.java
weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java
weaver/src/org/aspectj/weaver/ResolvedType.java
weaver/testsrc/org/aspectj/weaver/bcel/NonstaticWeaveTestCase.java
weaver/testsrc/org/aspectj/weaver/bcel/PointcutResidueTestCase.java
weaver/testsrc/org/aspectj/weaver/bcel/WeaveOrderTestCase.java</column>
            <column name="result">25:weaver/src/org/aspectj/weaver/ResolvedType.java
63:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
188:weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java
195:weaver/src/org/aspectj/weaver/CrosscuttingMembers.java
252:weaver/testsrc/org/aspectj/weaver/bcel/PointcutResidueTestCase.java
519:weaver/testsrc/org/aspectj/weaver/bcel/NonstaticWeaveTestCase.java
571:weaver/testsrc/org/aspectj/weaver/bcel/WeaveOrderTestCase.java
1313:tests/src/org/aspectj/systemtest/ajc150/GenericITDsDesign.java</column>
        </table>
        <table name="aspectj">
            <column name="id">224</column>
            <column name="bug_id">141945</column>
            <column name="summary">Bug 141945  Compiler issues message concerning aop.xml even when not doing LTW</column>
            <column name="description">From the mailing list:

=============

I am executing the command as below,
 
COMMAND: ajc -inpath woven_hello1.jar -aspectpath aspect2.jar -outjar woven_hello2.jar
 
I am getting same old error,
woven_hello1.jar [error] aspect 'aspect1' woven into 'Hello' must be declared in an aop.xml file.
(no source information available)
I have placed both aspect1.class and aspect2.class in CLASSPATH system variable.

==============

We shouldn't be putting out messages about aop.xml when we are not doing LTW - this message points the user to a solution that will not work in this case!</column>
            <column name="report_time">2006-05-16 04:10:25</column>
            <column name="report_timestamp">1147770000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">fc7db25</column>
            <column name="commit_timestamp">1147780000</column>
            <column name="files">tests/java5/ataspectj/ataspectj/ltwreweavable/MainReweavableLogging.java</column>
            <column name="result">29:tests/java5/ataspectj/ataspectj/ltwreweavable/MainReweavableLogging.java</column>
        </table>
        <table name="aspectj">
            <column name="id">225</column>
            <column name="bug_id">135068</column>
            <column name="summary">Bug 135068  VerifyError with LTW and @AJ style aspects</column>
            <column name="description">I get &quot;VerifyError: Incompatible object argument for function call&quot; error when using LTW with @Aspect stype aspects. Interestingly enough, LTW works as expected with equivalent .aj style aspect. Compile time weaving works with both aspect styles. Tested on Linux with AspectJ 1.5.0, 1.5.1 and DEVELOPMENT-20060404163823 and SUN 1.5.0_06 and IBM 1.5.0SR1 JVMs. I will attach example project shortly.</column>
            <column name="report_time">2006-04-05 12:15:45</column>
            <column name="report_timestamp">1144250000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9ffc63b</column>
            <column name="commit_timestamp">1147770000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java
tests/bugs152/pr135068/A.java
tests/bugs152/pr135068/Ajava.java
tests/bugs152/pr135068/Ajava2.java
tests/bugs152/pr135068/C.java
tests/bugs152/pr135068/C2.java
tests/bugs152/pr135068/t/Ajava.java
tests/bugs152/pr135068/t/Ajava2.java
tests/bugs152/pr135068/t/C.java
tests/bugs152/pr135068/t/C2.java
tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</column>
            <column name="result">4:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
34:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java
43:weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</column>
        </table>
        <table name="aspectj">
            <column name="id">226</column>
            <column name="bug_id">133117</column>
            <column name="summary">Bug 133117  Lots of warnings with noGuardForLazyTjp</column>
            <column name="description">When the noGuardForLazyTjp compiler option is set to warning or error and a piece of advice causes this warning to show up, you get one warning for every join point matched by the advice.  I think just one would probably be enough...</column>
            <column name="report_time">2006-03-24 04:47:58</column>
            <column name="report_timestamp">1143190000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3fa4d24</column>
            <column name="commit_timestamp">1147450000</column>
            <column name="files">tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
weaver/src/org/aspectj/weaver/Lint.java
weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</column>
            <column name="result">4:weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
6:weaver/src/org/aspectj/weaver/Lint.java
15:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">227</column>
            <column name="bug_id">129704</column>
            <column name="summary">Bug 129704  BCException</column>
            <column name="description">org.aspectj.weaver.BCException
at org.aspectj.weaver.bcel.BcelShadow.initializeKindedAnnotationVars(BcelShadow.java:1553)
at org.aspectj.weaver.bcel.BcelShadow.getKindedAnnotationVar(BcelShadow.java:995)
at org.aspectj.weaver.patterns.AnnotationPointcut.findResidueInternal(AnnotationPointcut.java:196)
at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268)
at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:97)
at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268)
at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:97)
at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268)
at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:97)
at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268)
at org.aspectj.weaver.bcel.BcelAdvice.specializeOn(BcelAdvice.java:132)
at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers(BcelShadow.java:313)
at org.aspectj.weaver.Shadow.implement(Shadow.java:404)
at org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2146)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:467)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543)
at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)
at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

trouble in: 
public class com.ytg.bilette.client.core.providers.DomainContentProvider extends java.lang.Object implements com.ytg.bilette.client.core.providers.IRefreshableStructuredContentProvider:
  private java.util.HashSet listeners [Signature(Ljava/util/HashSet&lt;Lcom/ytg/bilette/client/core/providers/IDomainObjectChangeListener&lt;TT;&gt;;&gt;;)]
  private com.ytg.bilette.client.core.providers.DomainContentProvider$State state [Signature(Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;)]
  private Class clazz [Signature(Ljava/lang/Class&lt;+Lcom/ytg/bilette/model/GenericDomainObject;&gt;;)]
  private boolean deletable
  private java.util.List summaries [Signature(Ljava/util/List&lt;TT;&gt;;)]
  static Class class$0
  public void &lt;init&gt;(Class)    org.aspectj.weaver.MethodDeclarationLineNumber: 47:1136
:
                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 47)
                    &amp;#304;NVOKESPEC&amp;#304;AL java.lang.Object.&lt;init&gt; ()V
    constructor-execution(void com.ytg.bilette.client.core.providers.DomainContentProvider.&lt;init&gt;(java.lang.Class))
    |               ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 34)
    |               NEW java.util.HashSet
    |               DUP
    |               &amp;#304;NVOKESPEC&amp;#304;AL java.util.HashSet.&lt;init&gt; ()V
    |               PUTF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet;
    |               ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 36)
    |               GETSTAT&amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.NOT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;
    |               PUTF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;
    |               ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 40)
    |               &amp;#304;CONST_0
    |               PUTF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z
    |               ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 48)
    |               ALOAD_1     // java.lang.Class clazz
    |               PUTF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.clazz Ljava/lang/Class;
    |               ALOAD_1     // java.lang.Class clazz   (line 50)
    |               &amp;#304;NVOKEV&amp;#304;RTUAL java.lang.Class.getInterfaces ()[Ljava/lang/Class;
    |               ASTORE_2
    |               &amp;#304;CONST_0   (line 51)
    |               &amp;#304;STORE_3
    |               GOTO L2
    |           L0: ALOAD_2     // java.lang.Class[] interfaces   (line 52)
    |               &amp;#304;LOAD_3     // int i
    |               AALOAD
    |               LDC com.ytg.bilette.model.Deletable
    |               &amp;#304;NVOKEV&amp;#304;RTUAL java.lang.Object.equals (Ljava/lang/Object;)Z
    |               &amp;#304;FEQ L1
    |               ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 53)
    |               &amp;#304;CONST_1
    |               PUTF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z
    |               GOTO L3   (line 54)
    |           L1: &amp;#304;&amp;#304;NC 3 1     // int i   (line 51)
    |           L2: &amp;#304;LOAD_3     // int i
    |               ALOAD_2     // java.lang.Class[] interfaces
    |               ARRAYLENGTH
    |               &amp;#304;F_&amp;#304;CMPLT L0
    |           L3: RETURN   (line 57)
    constructor-execution(void com.ytg.bilette.client.core.providers.DomainContentProvider.&lt;init&gt;(java.lang.Class))
  end public void &lt;init&gt;(Class)

  public Object[] getElements(Object)    org.aspectj.weaver.MethodDeclarationLineNumber: 65:1611
:
                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 66)
                    ALOAD_1     // java.lang.Object input
                    &amp;#304;NVOKESPEC&amp;#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.checkInput (Ljava/lang/Object;)Z
                    &amp;#304;STORE_2
                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 68)
                    &amp;#304;LOAD_2     // boolean includeDeleted
                    &amp;#304;NVOKEV&amp;#304;RTUAL com.ytg.bilette.client.core.providers.DomainContentProvider.getSummaries (Z)Ljava/util/List;
                    &amp;#304;NVOKE&amp;#304;NTERFACE java.util.List.toArray ()[Ljava/lang/Object;
                    ARETURN
  end public Object[] getElements(Object)

  private void checkInitialized(boolean)    org.aspectj.weaver.MethodDeclarationLineNumber: 71:1759
:
                    GETSTAT&amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.NOT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;   (line 72)
                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this
                    GETF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;
                    &amp;#304;NVOKEV&amp;#304;RTUAL com.ytg.bilette.client.core.providers.DomainContentProvider$State.equals (Ljava/lang/Object;)Z
                    &amp;#304;FNE L0
                    GETSTAT&amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.LIGHT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;   (line 73)
                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this
                    GETF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;
                    &amp;#304;NVOKEV&amp;#304;RTUAL com.ytg.bilette.client.core.providers.DomainContentProvider$State.equals (Ljava/lang/Object;)Z
                    &amp;#304;FEQ L1
                    &amp;#304;LOAD_1     // boolean includeDeleted
                    &amp;#304;FEQ L1
                L0: ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 74)
                    ACONST_NULL
                    ACONST_NULL
                    &amp;#304;LOAD_1     // boolean includeDeleted
                    &amp;#304;NVOKESPEC&amp;#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.getData (Lcom/ytg/bilette/dao/SummaryDAO;Lorg/eclipse/core/runtime/IProgressMonitor;Z)V
                L1: RETURN   (line 75)
  end private void checkInitialized(boolean)

  private boolean checkInput(Object)    org.aspectj.weaver.MethodDeclarationLineNumber: 83:2060
:
                    ALOAD_1     // java.lang.Object input   (line 84)
                    &amp;#304;NSTANCEOF java.lang.Boolean
                    LDC &quot;Input for generic content provider must be Boolean value&quot;   (line 85)
                    &amp;#304;NVOKESTAT&amp;#304;C org.eclipse.jface.util.Assert.isTrue (ZLjava/lang/String;)Z   (line 84)
                    POP
                    ALOAD_1     // java.lang.Object input   (line 86)
                    CHECKCAST java.lang.Boolean
                    &amp;#304;NVOKEV&amp;#304;RTUAL java.lang.Boolean.booleanValue ()Z
                    &amp;#304;STORE_2
                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 87)
                    GETF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z
                    &amp;#304;FNE L1
                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 88)
                    GETF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z
                    &amp;#304;FNE L0
                    &amp;#304;LOAD_2     // boolean includeDeleted
                    &amp;#304;FEQ L1
                L0: &amp;#304;CONST_0
                    GOTO L2
                L1: &amp;#304;CONST_1
                L2: LDC &quot;Nondeletable object yet deleted flag!&quot;   (line 89)
                    &amp;#304;NVOKESTAT&amp;#304;C org.eclipse.jface.util.Assert.isLegal (ZLjava/lang/String;)Z   (line 87)
                    POP
                    &amp;#304;LOAD_2     // boolean includeDeleted   (line 91)
                    &amp;#304;RETURN
  end private boolean checkInput(Object)

  public void dispose()    org.aspectj.weaver.MethodDeclarationLineNumber: 99:2522
:
                    RETURN   (line 101)
  end public void dispose()

  public void inputChanged(org.eclipse.jface.viewers.Viewer, Object, Object)    org.aspectj.weaver.MethodDeclarationLineNumber: 109:2747
:
                    RETURN   (line 111)
  end public void inputChanged(org.eclipse.jface.viewers.Viewer, Object, Object)

  private void getData(com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean)    org.aspectj.weaver.MethodDeclarationLineNumber: 115:2954
:
                    ALOAD_1
                    ASTORE 4
                    ALOAD_2
                    ASTORE 5
                    &amp;#304;LOAD_3
                    &amp;#304;STORE 6
    method-execution(void com.ytg.bilette.client.core.providers.DomainContentProvider.getData(com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean))
    |               ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 117)
    |               ALOAD_1     // com.ytg.bilette.dao.SummaryDAO dao
    |               ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this
    |               GETF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.clazz Ljava/lang/Class;
    |               &amp;#304;LOAD_3     // boolean includeDeleted
    |               &amp;#304;NVOKE&amp;#304;NTERFACE com.ytg.bilette.dao.SummaryDAO.getSummaries (Ljava/lang/Class;Z)Ljava/util/List;
    |               PUTF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.summaries Ljava/util/List;
    |               &amp;#304;LOAD_3     // boolean includeDeleted   (line 118)
    |               &amp;#304;FEQ L0
    |               ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 119)
    |               GETSTAT&amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.FULL_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;
    |               PUTF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;
    |               GOTO L1
    |           L0: ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 121)
    |               GETSTAT&amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.LIGHT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;
    |               PUTF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;
    |           L1: RETURN   (line 122)
    method-execution(void com.ytg.bilette.client.core.providers.DomainContentProvider.getData(com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean))
  end private void getData(com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean)

  public java.util.List getSummaries(boolean)    org.aspectj.weaver.MethodDeclarationLineNumber: 128:3308
:
                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 129)
                    &amp;#304;LOAD_1     // boolean includeDeleted
                    &amp;#304;NVOKESPEC&amp;#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.checkInitialized (Z)V
                    &amp;#304;LOAD_1     // boolean includeDeleted   (line 131)
                    &amp;#304;FNE L0
                    GETSTAT&amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.LIGHT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;
                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this
                    GETF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;
                    &amp;#304;NVOKEV&amp;#304;RTUAL com.ytg.bilette.client.core.providers.DomainContentProvider$State.equals (Ljava/lang/Object;)Z
                    &amp;#304;FEQ L1
                L0: ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 132)
                    GETF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.summaries Ljava/util/List;
                    ARETURN
                L1: ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 134)
                    GETF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.summaries Ljava/util/List;
                    &amp;#304;NVOKE&amp;#304;NTERFACE java.util.List.iterator ()Ljava/util/Iterator;
                    ASTORE_2
                    NEW java.util.ArrayList   (line 135)
                    DUP
                    &amp;#304;NVOKESPEC&amp;#304;AL java.util.ArrayList.&lt;init&gt; ()V
                    ASTORE_3
                    GOTO L3   (line 136)
                L2: ALOAD_2     // java.util.Iterator i   (line 137)
                    &amp;#304;NVOKE&amp;#304;NTERFACE java.util.Iterator.next ()Ljava/lang/Object;
                    CHECKCAST com.ytg.bilette.model.Deletable
                    CHECKCAST com.ytg.bilette.model.Deletable
                    ASTORE 4
                    ALOAD 4     // com.ytg.bilette.model.Deletable object   (line 138)
                    &amp;#304;NVOKE&amp;#304;NTERFACE com.ytg.bilette.model.Deletable.isDeleted ()Z
                    &amp;#304;FNE L3
                    ALOAD_3     // java.util.ArrayList list   (line 139)
                    ALOAD 4     // com.ytg.bilette.model.Deletable object
                    CHECKCAST com.ytg.bilette.model.GenericDomainObject
                    &amp;#304;NVOKEV&amp;#304;RTUAL java.util.ArrayList.add (Ljava/lang/Object;)Z
                    POP
                L3: ALOAD_2     // java.util.Iterator i   (line 136)
                    &amp;#304;NVOKE&amp;#304;NTERFACE java.util.Iterator.hasNext ()Z
                    &amp;#304;FNE L2
                    ALOAD_3     // java.util.ArrayList list   (line 142)
                    ARETURN
  end public java.util.List getSummaries(boolean)

  public synchronized void refresh()    org.aspectj.weaver.MethodDeclarationLineNumber: 148:3783
:
                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 149)
                    GETSTAT&amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.NOT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;
                    PUTF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;
                    &amp;#304;CONST_0   (line 150)
                    &amp;#304;STORE_1
                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 152)
                    GETF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z
                    &amp;#304;FEQ L2
                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 153)
                    GETF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet;
                    &amp;#304;NVOKEV&amp;#304;RTUAL java.util.HashSet.iterator ()Ljava/util/Iterator;
                    ASTORE_2
                    GOTO L1   (line 154)
                L0: ALOAD_2     // java.util.Iterator i   (line 155)
                    &amp;#304;NVOKE&amp;#304;NTERFACE java.util.Iterator.next ()Ljava/lang/Object;
                    CHECKCAST com.ytg.bilette.client.core.providers.IDomainObjectChangeListener
                    ASTORE_3
                    ALOAD_3     // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener   (line 156)
                    &amp;#304;NVOKE&amp;#304;NTERFACE com.ytg.bilette.client.core.providers.IDomainObjectChangeListener.isIncludeDeleted ()Z
                    &amp;#304;FEQ L1
                    &amp;#304;CONST_1   (line 157)
                    &amp;#304;STORE_1     // boolean includeDeleted
                    GOTO L2   (line 158)
                L1: ALOAD_2     // java.util.Iterator i   (line 154)
                    &amp;#304;NVOKE&amp;#304;NTERFACE java.util.Iterator.hasNext ()Z
                    &amp;#304;FNE L0
                L2: ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 163)
                    ACONST_NULL
                    ACONST_NULL
                    &amp;#304;LOAD_1     // boolean includeDeleted
                    &amp;#304;NVOKESPEC&amp;#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.getData (Lcom/ytg/bilette/dao/SummaryDAO;Lorg/eclipse/core/runtime/IProgressMonitor;Z)V
                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 165)
                    ACONST_NULL
                    ACONST_NULL
                    &amp;#304;NVOKESPEC&amp;#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.notifyAllListeners (Lcom/ytg/bilette/model/GenericDomainObject;Lcom/ytg/bilette/model/GenericDomainObject;)V
                    RETURN   (line 166)
  end public synchronized void refresh()

  private synchronized void notifyAllListeners(com.ytg.bilette.model.GenericDomainObject, com.ytg.bilette.model.GenericDomainObject)    org.aspectj.weaver.MethodDeclarationLineNumber: 174:4356
:
                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 175)
                    GETF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet;
                    &amp;#304;NVOKEV&amp;#304;RTUAL java.util.HashSet.iterator ()Ljava/util/Iterator;
                    ASTORE_3
                    GOTO L2   (line 176)
                L0: ALOAD_3     // java.util.Iterator i   (line 177)
                    &amp;#304;NVOKE&amp;#304;NTERFACE java.util.Iterator.next ()Ljava/lang/Object;
                    CHECKCAST com.ytg.bilette.client.core.providers.IDomainObjectChangeListener
                    ASTORE 4
                    ALOAD_1     // com.ytg.bilette.model.GenericDomainObject oldObj   (line 178)
                    &amp;#304;FNONNULL L1
                    ALOAD_2     // com.ytg.bilette.model.GenericDomainObject newObj
                    &amp;#304;FNONNULL L1
                    ALOAD 4     // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener   (line 179)
                    &amp;#304;NVOKE&amp;#304;NTERFACE com.ytg.bilette.client.core.providers.IDomainObjectChangeListener.fullRefresh ()V
                    GOTO L2
                L1: ALOAD 4     // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener   (line 181)
                    ALOAD_1     // com.ytg.bilette.model.GenericDomainObject oldObj
                    ALOAD_2     // com.ytg.bilette.model.GenericDomainObject newObj
                    &amp;#304;NVOKE&amp;#304;NTERFACE com.ytg.bilette.client.core.providers.IDomainObjectChangeListener.concessionChanged (Lcom/ytg/bilette/model/GenericDomainObject;Lcom/ytg/bilette/model/GenericDomainObject;)V
                L2: ALOAD_3     // java.util.Iterator i   (line 176)
                    &amp;#304;NVOKE&amp;#304;NTERFACE java.util.Iterator.hasNext ()Z
                    &amp;#304;FNE L0
                    RETURN   (line 183)
  end private synchronized void notifyAllListeners(com.ytg.bilette.model.GenericDomainObject, com.ytg.bilette.model.GenericDomainObject)

  public synchronized void addListener(com.ytg.bilette.client.core.providers.IDomainObjectChangeListener)    org.aspectj.weaver.MethodDeclarationLineNumber: 185:4715
:
                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 186)
                    GETF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet;
                    ALOAD_1     // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener
                    &amp;#304;NVOKEV&amp;#304;RTUAL java.util.HashSet.add (Ljava/lang/Object;)Z
                    POP
                    RETURN   (line 187)
  end public synchronized void addListener(com.ytg.bilette.client.core.providers.IDomainObjectChangeListener)

  public synchronized void removeListener(com.ytg.bilette.client.core.providers.IDomainObjectChangeListener)    org.aspectj.weaver.MethodDeclarationLineNumber: 189:4831
:
                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 190)
                    GETF&amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet;
                    ALOAD_1     // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener
                    &amp;#304;NVOKEV&amp;#304;RTUAL java.util.HashSet.remove (Ljava/lang/Object;)Z
                    POP
                    RETURN   (line 191)
  end public synchronized void removeListener(com.ytg.bilette.client.core.providers.IDomainObjectChangeListener)

end public class com.ytg.bilette.client.core.providers.DomainContentProvider

when implementing on shadow method-execution(void com.ytg.bilette.client.core.providers.DomainContentProvider.getData(com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean))
when weaving type com.ytg.bilette.client.core.providers.DomainContentProvider
when weaving classes 
when weaving 
when batch building BuildConfig[F:\java\Bilette\.metadata\.plugins\org.eclipse.ajdt.core\com.ytg.bilette.client.core.generated.lst] #Files=22</column>
            <column name="report_time">2006-02-27 20:32:19</column>
            <column name="report_timestamp">1141090000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3ca976f</column>
            <column name="commit_timestamp">1147430000</column>
            <column name="files">tests/bugs152/pr129704/A.java
tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result">2:weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
21:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">228</column>
            <column name="bug_id">138384</column>
            <column name="summary">Bug 138384  java.lang.ClassFormatError: Invalid method Code length  83071 in class file org/eclipse/jdt/internal/compiler/impl/Constant</column>
            <column name="description"></column>
            <column name="report_time">2006-04-25 10:58:41</column>
            <column name="report_timestamp">1145980000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5d2b5b8</column>
            <column name="commit_timestamp">1147420000</column>
            <column name="files">bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionList.java
tests/bugs152/pr138384/BigMethod.java
tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</column>
            <column name="result">80:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
628:bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionList.java</column>
        </table>
        <table name="aspectj">
            <column name="id">229</column>
            <column name="bug_id">140357</column>
            <column name="summary">Bug 140357  NPE or StackOverflow when resolving reference pointcut in ReflectionWorld</column>
            <column name="description">Given a type such as :

private static class NamedPointcutResolution {
		
  @Pointcut(&quot;execution(* *(..))&quot;)
  public void a() {}
		
		  
  @Pointcut(&quot;this(org.aspectj.weaver.tools.Java15PointcutExpressionTest.A)&quot;)
  public void b() {}
		
  @Pointcut(&quot;a() &amp;&amp; b()&quot;)
  public void c() {}

}

The reflection based delegate is unable to resolve the pointcut c() failing
with either (1) an NPE, or (2) a StackOverflow, depending on the order of the
pointcut definitions in the type.

The problem occurs because in resolving &quot;c()&quot; we get all the pointcuts in the
type, which gets a(), b(), and c(), and tries to resolve them...</column>
            <column name="report_time">2006-05-05 09:43:03</column>
            <column name="report_timestamp">1146840000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b954b26</column>
            <column name="commit_timestamp">1146840000</column>
            <column name="files">weaver/src/org/aspectj/weaver/tools/PointcutParser.java
weaver5/java5-src/org/aspectj/weaver/reflect/DeferredResolvedPointcutDefinition.java
weaver5/java5-src/org/aspectj/weaver/reflect/InternalUseOnlyPointcutParser.java
weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java
weaver5/java5-testsrc/org/aspectj/weaver/tools/Java15PointcutExpressionTest.java</column>
            <column name="result">1:weaver5/java5-testsrc/org/aspectj/weaver/tools/Java15PointcutExpressionTest.java
2:weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java
8:weaver/src/org/aspectj/weaver/tools/PointcutParser.java</column>
        </table>
        <table name="aspectj">
            <column name="id">230</column>
            <column name="bug_id">134371</column>
            <column name="summary">Bug 134371  ClassCastException in AjState.recordClassFile()</column>
            <column name="description">I got this exception while working on a static inner aspect. A full rebuild avoided the problem. 

java.lang.ClassCastException: org.aspectj.weaver.MissingResolvedTypeWithKnownSignature
	at org.aspectj.ajdt.internal.core.builder.AjState.recordClassFile(AjState.java:774)
	at org.aspectj.ajdt.internal.core.builder.AjState.noteResult(AjState.java:627)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult(AjBuildManager.java:867)
	at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(AjCompilerAdapter.java:206)
	at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184(CompilerAdapter.aj:90)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:528)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:845)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:266)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:168)
	at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
	at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)</column>
            <column name="report_time">2006-04-01 12:05:56</column>
            <column name="report_timestamp">1143910000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">299c3a4</column>
            <column name="commit_timestamp">1146820000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java
tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
            <column name="result">3:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java
7:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
8:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
67:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</column>
        </table>
        <table name="aspectj">
            <column name="id">231</column>
            <column name="bug_id">135780</column>
            <column name="summary">Bug 135780  Java 1.2 dependency in aspectjrt.jar bug with fix</column>
            <column name="description"></column>
            <column name="report_time">2006-04-09 22:27:37</column>
            <column name="report_timestamp">1144640000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">cb5dfe7</column>
            <column name="commit_timestamp">1146670000</column>
            <column name="files">runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java</column>
            <column name="result">373:runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java</column>
        </table>
        <table name="aspectj">
            <column name="id">232</column>
            <column name="bug_id">138798</column>
            <column name="summary">Bug 138798  BCException on invalid annotation match</column>
            <column name="description">This unfortunately invalid code:

before(Throwable throwable, NormalException normalException) : handler(*) &amp;&amp; args(throwable) &amp;&amp; @withincode(normalException) {
...

Generates this exception in AJDT with post-1.5.1a AspectJ

org.aspectj.weaver.BCException
at org.aspectj.weaver.bcel.BcelRenderer.visit(BcelRenderer.java:237)
at org.aspectj.weaver.ast.Literal.accept(Literal.java:29)
at org.aspectj.weaver.bcel.BcelRenderer.recur(BcelRenderer.java:153)
at org.aspectj.weaver.bcel.BcelRenderer.renderTest(BcelRenderer.java:119)
at org.aspectj.weaver.bcel.BcelAdvice.getTestInstructions(BcelAdvice.java:537)
at org.aspectj.weaver.bcel.BcelAdvice.getAdviceInstructions(BcelAdvice.java:376)
at org.aspectj.weaver.bcel.BcelShadow.weaveBefore(BcelShadow.java:1690)
at org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:208)
at org.aspectj.weaver.Shadow.implementMungers(Shadow.java:639)
at org.aspectj.weaver.Shadow.implement(Shadow.java:456)
at org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2236)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:491)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:109)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1560)
at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1511)
at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1291)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1113)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:311)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:183)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:242)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

trouble in: 
public class glassbox.client.ConnectionManager extends java.lang.Object:
  public static String propnameNum
  public static String propnameDefault
  public static String propnameViewed
  public static String propnameNickPrefix
  public static String propnameUrlPrefix
  public static String propnameViewedPrefix
  private static String propFilename
  private static String localhostNickname
  public static String localhostURL
  private java.util.List connectionList [Signature(Ljava/util/List&lt;Lglassbox/client/ConnectionManager$AgentConnection;&gt;;)]
  private int defaultConnectionIndex
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0
  static void &lt;clinit&gt;():
    staticinitialization(void glassbox.client.ConnectionManager.&lt;clinit&gt;())
    |               LDC &quot;glassbox.connections.num&quot;   (line 13)
    |               PUTSTATIC glassbox.client.ConnectionManager.propnameNum Ljava/lang/String;
    |               LDC &quot;glassbox.connections.default&quot;   (line 14)
    |               PUTSTATIC glassbox.client.ConnectionManager.propnameDefault Ljava/lang/String;
    |               LDC &quot;glassbox.connections.viewed&quot;   (line 15)
    |               PUTSTATIC glassbox.client.ConnectionManager.propnameViewed Ljava/lang/String;
    |               LDC &quot;glassbox.connections.nickname_&quot;   (line 16)
    |               PUTSTATIC glassbox.client.ConnectionManager.propnameNickPrefix Ljava/lang/String;
    |               LDC &quot;glassbox.connections.url_&quot;   (line 17)
    |               PUTSTATIC glassbox.client.ConnectionManager.propnameUrlPrefix Ljava/lang/String;
    |               LDC &quot;glassbox.connections.viewed_&quot;   (line 18)
    |               PUTSTATIC glassbox.client.ConnectionManager.propnameViewedPrefix Ljava/lang/String;
    |               LDC &quot;connection.properties&quot;   (line 20)
    |               PUTSTATIC glassbox.client.ConnectionManager.propFilename Ljava/lang/String;
    |               LDC &quot;localhost&quot;   (line 21)
    |               PUTSTATIC glassbox.client.ConnectionManager.localhostNickname Ljava/lang/String;
    |               LDC &quot;service:jmx:rmi://localhost:7131/jndi/rmi://localhost:7132/GlassboxTroubleshooter&quot;   (line 22)
    |               PUTSTATIC glassbox.client.ConnectionManager.localhostURL Ljava/lang/String;
    |               RETURN   (line 11)
    staticinitialization(void glassbox.client.ConnectionManager.&lt;clinit&gt;())
  end static void &lt;clinit&gt;()

  public void &lt;init&gt;()    org.aspectj.weaver.MethodDeclarationLineNumber: 23:966
:
                    ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 23)
                    INVOKESPECIAL java.lang.Object.&lt;init&gt; ()V
    constructor-execution(void glassbox.client.ConnectionManager.&lt;init&gt;())
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 24)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager.init ()V
    |               RETURN   (line 25)
    constructor-execution(void glassbox.client.ConnectionManager.&lt;init&gt;())
  end public void &lt;init&gt;()

  public void init()    org.aspectj.weaver.MethodDeclarationLineNumber: 67:1992
:
    method-execution(void glassbox.client.ConnectionManager.init())
    | catch java.lang.RuntimeException -&gt; E0
    | |             ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 69)
    | |             INVOKEVIRTUAL glassbox.client.ConnectionManager.readFromFile ()V
    | |             GOTO L0
    | catch java.lang.RuntimeException -&gt; E0
    |           E0: ASTORE_2
    | exception-handler(void glassbox.client.ConnectionManager.&lt;catch&gt;(java.lang.RuntimeException))
    | |             ALOAD_2
    | exception-handler(void glassbox.client.ConnectionManager.&lt;catch&gt;(java.lang.RuntimeException))
    |               ASTORE_1   (line 70)
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 71)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager.createDefaultList ()V
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 72)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager.writeToFile ()V
    |           L0: RETURN   (line 74)
    method-execution(void glassbox.client.ConnectionManager.init())
  end public void init()

  public void createDefaultList()    org.aspectj.weaver.MethodDeclarationLineNumber: 76:2134
:
    method-execution(void glassbox.client.ConnectionManager.createDefaultList())
    |               NEW glassbox.client.ConnectionManager$AgentConnection   (line 77)
    |               DUP
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this
    |               GETSTATIC glassbox.client.ConnectionManager.localhostNickname Ljava/lang/String;
    |               GETSTATIC glassbox.client.ConnectionManager.localhostURL Ljava/lang/String;
    |               ICONST_1
    |               INVOKESPECIAL glassbox.client.ConnectionManager$AgentConnection.&lt;init&gt; (Lglassbox/client/ConnectionManager;Ljava/lang/String;Ljava/lang/String;Z)V
    |               ASTORE_1
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 78)
    |               NEW java.util.ArrayList
    |               DUP
    |               INVOKESPECIAL java.util.ArrayList.&lt;init&gt; ()V
    |               PUTFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 79)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               ALOAD_1     // Lglassbox/client/ConnectionManager$AgentConnection; localhost
    |               INVOKEINTERFACE java.util.List.add (Ljava/lang/Object;)Z
    |               POP
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 80)
    |               ICONST_0
    |               PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I
    |               RETURN   (line 81)
    method-execution(void glassbox.client.ConnectionManager.createDefaultList())
  end public void createDefaultList()

  public void writeToFile()    org.aspectj.weaver.MethodDeclarationLineNumber: 84:2433
:
    method-execution(void glassbox.client.ConnectionManager.writeToFile())
    |               NEW java.util.Properties   (line 85)
    |               DUP
    |               INVOKESPECIAL java.util.Properties.&lt;init&gt; ()V
    |               ASTORE_1
    |               ALOAD_1     // Ljava/util/Properties; properties   (line 86)
    |               GETSTATIC glassbox.client.ConnectionManager.propnameNum Ljava/lang/String;
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               INVOKEINTERFACE java.util.List.size ()I
    |               INVOKESTATIC java.lang.String.valueOf (I)Ljava/lang/String;
    |               INVOKEVIRTUAL java.util.Properties.setProperty (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
    |               POP
    |               ALOAD_1     // Ljava/util/Properties; properties   (line 87)
    |               GETSTATIC glassbox.client.ConnectionManager.propnameDefault Ljava/lang/String;
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this
    |               GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I
    |               INVOKEINTERFACE java.util.List.get (I)Ljava/lang/Object;
    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;
    |               INVOKEVIRTUAL java.util.Properties.setProperty (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
    |               POP
    |               ICONST_0   (line 88)
    |               ISTORE_2
    |               GOTO L1
    |           L0: ALOAD_1     // Ljava/util/Properties; properties   (line 89)
    |               NEW java.lang.StringBuilder
    |               DUP
    |               GETSTATIC glassbox.client.ConnectionManager.propnameNickPrefix Ljava/lang/String;
    |               INVOKESTATIC java.lang.String.valueOf (Ljava/lang/Object;)Ljava/lang/String;
    |               INVOKESPECIAL java.lang.StringBuilder.&lt;init&gt; (Ljava/lang/String;)V
    |               ILOAD_2     // I i
    |               INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;
    |               INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               ILOAD_2     // I i
    |               INVOKEINTERFACE java.util.List.get (I)Ljava/lang/Object;
    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;
    |               INVOKEVIRTUAL java.util.Properties.setProperty (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
    |               POP
    |               ALOAD_1     // Ljava/util/Properties; properties   (line 90)
    |               NEW java.lang.StringBuilder
    |               DUP
    |               GETSTATIC glassbox.client.ConnectionManager.propnameUrlPrefix Ljava/lang/String;
    |               INVOKESTATIC java.lang.String.valueOf (Ljava/lang/Object;)Ljava/lang/String;
    |               INVOKESPECIAL java.lang.StringBuilder.&lt;init&gt; (Ljava/lang/String;)V
    |               ILOAD_2     // I i
    |               INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;
    |               INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               ILOAD_2     // I i
    |               INVOKEINTERFACE java.util.List.get (I)Ljava/lang/Object;
    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl ()Ljava/lang/String;
    |               INVOKEVIRTUAL java.util.Properties.setProperty (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
    |               POP
    |               ALOAD_1     // Ljava/util/Properties; properties   (line 91)
    |               NEW java.lang.StringBuilder
    |               DUP
    |               GETSTATIC glassbox.client.ConnectionManager.propnameViewedPrefix Ljava/lang/String;
    |               INVOKESTATIC java.lang.String.valueOf (Ljava/lang/Object;)Ljava/lang/String;
    |               INVOKESPECIAL java.lang.StringBuilder.&lt;init&gt; (Ljava/lang/String;)V
    |               ILOAD_2     // I i
    |               INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;
    |               INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               ILOAD_2     // I i
    |               INVOKEINTERFACE java.util.List.get (I)Ljava/lang/Object;
    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.isViewed ()Z
    |               INVOKESTATIC java.lang.String.valueOf (Z)Ljava/lang/String;
    |               INVOKEVIRTUAL java.util.Properties.setProperty (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
    |               POP
    |               IINC 2 1     // I i   (line 88)
    |           L1: ILOAD_2     // I i
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               INVOKEINTERFACE java.util.List.size ()I
    |               IF_ICMPLT L0
    | catch java.io.IOException -&gt; E0
    | |             NEW java.io.File   (line 94)
    | |             DUP
    | |             GETSTATIC glassbox.client.ConnectionManager.propFilename Ljava/lang/String;
    | |             INVOKESPECIAL java.io.File.&lt;init&gt; (Ljava/lang/String;)V
    | |             ASTORE_2
    | |             NEW java.io.FileOutputStream   (line 95)
    | |             DUP
    | |             ALOAD_2     // Ljava/io/File; f
    | |             ICONST_0
    | |             INVOKESPECIAL java.io.FileOutputStream.&lt;init&gt; (Ljava/io/File;Z)V
    | |             ASTORE_3
    | |             ALOAD_1     // Ljava/util/Properties; properties   (line 96)
    | |             ALOAD_3     // Ljava/io/FileOutputStream; fos
    | |             ACONST_NULL
    | |             INVOKEVIRTUAL java.util.Properties.store (Ljava/io/OutputStream;Ljava/lang/String;)V
    | |             ALOAD_3     // Ljava/io/FileOutputStream; fos   (line 97)
    | |             INVOKEVIRTUAL java.io.FileOutputStream.close ()V
    | |             GOTO L2
    | catch java.io.IOException -&gt; E0
    |           E0: ASTORE_2   (line 98)
    |               GETSTATIC java.lang.System.err Ljava/io/PrintStream;   (line 99)
    |               LDC &quot;Failed to write connection.properties file&quot;
    |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V
    |               GETSTATIC java.lang.System.err Ljava/io/PrintStream;   (line 100)
    |               ALOAD_2     // Ljava/io/IOException; e
    |               INVOKEVIRTUAL java.io.IOException.toString ()Ljava/lang/String;
    |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V
    |           L2: RETURN   (line 102)
    method-execution(void glassbox.client.ConnectionManager.writeToFile())
  end public void writeToFile()

  public void readFromFile()    org.aspectj.weaver.MethodDeclarationLineNumber: 105:3495
:
    method-execution(void glassbox.client.ConnectionManager.readFromFile())
    |               NEW java.util.ArrayList   (line 107)
    |               DUP
    |               INVOKESPECIAL java.util.ArrayList.&lt;init&gt; ()V
    |               ASTORE_1
    |               NEW java.util.Properties   (line 108)
    |               DUP
    |               INVOKESPECIAL java.util.Properties.&lt;init&gt; ()V
    |               ASTORE_2
    |               NEW java.io.File   (line 110)
    |               DUP
    |               GETSTATIC glassbox.client.ConnectionManager.propFilename Ljava/lang/String;
    |               INVOKESPECIAL java.io.File.&lt;init&gt; (Ljava/lang/String;)V
    |               ASTORE 4
    | catch java.io.IOException -&gt; E0
    | |             ALOAD_2     // Ljava/util/Properties; properties   (line 112)
    | |             NEW java.io.FileInputStream
    | |             DUP
    | |             ALOAD 4     // Ljava/io/File; f
    | |             INVOKESPECIAL java.io.FileInputStream.&lt;init&gt; (Ljava/io/File;)V
    | |             INVOKEVIRTUAL java.util.Properties.load (Ljava/io/InputStream;)V
    | |             GOTO L0
    | catch java.io.IOException -&gt; E0
    |           E0: ASTORE 5   (line 113)
    |               NEW java.lang.RuntimeException   (line 116)
    |               DUP
    |               NEW java.lang.StringBuilder
    |               DUP
    |               LDC &quot;Can't open &quot;
    |               INVOKESPECIAL java.lang.StringBuilder.&lt;init&gt; (Ljava/lang/String;)V
    |               ALOAD 4     // Ljava/io/File; f
    |               INVOKEVIRTUAL java.io.File.getAbsolutePath ()Ljava/lang/String;
    |               INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    |               INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;
    |               INVOKESPECIAL java.lang.RuntimeException.&lt;init&gt; (Ljava/lang/String;)V
    |               ATHROW
    | catch java.lang.Exception -&gt; E1
    | |         L0: ALOAD_2     // Ljava/util/Properties; properties   (line 119)
    | |             GETSTATIC glassbox.client.ConnectionManager.propnameNum Ljava/lang/String;
    | |             INVOKEVIRTUAL java.util.Properties.getProperty (Ljava/lang/String;)Ljava/lang/String;
    | |             INVOKESTATIC java.lang.Integer.valueOf (Ljava/lang/String;)Ljava/lang/Integer;
    | |             INVOKEVIRTUAL java.lang.Integer.intValue ()I
    | |             ISTORE 5
    | |             ALOAD_2     // Ljava/util/Properties; properties   (line 120)
    | |             GETSTATIC glassbox.client.ConnectionManager.propnameDefault Ljava/lang/String;
    | |             INVOKEVIRTUAL java.util.Properties.getProperty (Ljava/lang/String;)Ljava/lang/String;
    | |             ASTORE 6
    | |             ALOAD 6     // Ljava/lang/String; defNickname   (line 121)
    | |             IFNONNULL L1
    | |             NEW java.lang.RuntimeException
    | |             DUP
    | |             NEW java.lang.StringBuilder
    | |             DUP
    | |             LDC &quot;missing &quot;
    | |             INVOKESPECIAL java.lang.StringBuilder.&lt;init&gt; (Ljava/lang/String;)V
    | |             GETSTATIC glassbox.client.ConnectionManager.propnameDefault Ljava/lang/String;
    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;
    | |             INVOKESPECIAL java.lang.RuntimeException.&lt;init&gt; (Ljava/lang/String;)V
    | |             ATHROW
    | |         L1: ILOAD 5     // I num   (line 122)
    | |             ICONST_1
    | |             IF_ICMPGE L2
    | |             NEW java.lang.RuntimeException
    | |             DUP
    | |             NEW java.lang.StringBuilder
    | |             DUP
    | |             LDC &quot;Bad &quot;
    | |             INVOKESPECIAL java.lang.StringBuilder.&lt;init&gt; (Ljava/lang/String;)V
    | |             GETSTATIC glassbox.client.ConnectionManager.propnameNum Ljava/lang/String;
    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    | |             LDC &quot;=&quot;
    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    | |             ILOAD 5     // I num
    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;
    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;
    | |             INVOKESPECIAL java.lang.RuntimeException.&lt;init&gt; (Ljava/lang/String;)V
    | |             ATHROW
    | |         L2: ICONST_0   (line 123)
    | |             ISTORE 7
    | |             GOTO L9
    | |         L3: ALOAD_2     // Ljava/util/Properties; properties   (line 124)
    | |             NEW java.lang.StringBuilder
    | |             DUP
    | |             GETSTATIC glassbox.client.ConnectionManager.propnameNickPrefix Ljava/lang/String;
    | |             INVOKESTATIC java.lang.String.valueOf (Ljava/lang/Object;)Ljava/lang/String;
    | |             INVOKESPECIAL java.lang.StringBuilder.&lt;init&gt; (Ljava/lang/String;)V
    | |             ILOAD 7     // I i
    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;
    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;
    | |             INVOKEVIRTUAL java.util.Properties.getProperty (Ljava/lang/String;)Ljava/lang/String;
    | |             ASTORE 8
    | |             ALOAD 8     // Ljava/lang/String; nickname   (line 125)
    | |             IFNONNULL L4
    | |             NEW java.lang.RuntimeException
    | |             DUP
    | |             NEW java.lang.StringBuilder
    | |             DUP
    | |             LDC &quot;missing &quot;
    | |             INVOKESPECIAL java.lang.StringBuilder.&lt;init&gt; (Ljava/lang/String;)V
    | |             GETSTATIC glassbox.client.ConnectionManager.propnameNickPrefix Ljava/lang/String;
    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    | |             ILOAD 7     // I i
    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;
    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;
    | |             INVOKESPECIAL java.lang.RuntimeException.&lt;init&gt; (Ljava/lang/String;)V
    | |             ATHROW
    | |         L4: ALOAD_2     // Ljava/util/Properties; properties   (line 126)
    | |             NEW java.lang.StringBuilder
    | |             DUP
    | |             GETSTATIC glassbox.client.ConnectionManager.propnameUrlPrefix Ljava/lang/String;
    | |             INVOKESTATIC java.lang.String.valueOf (Ljava/lang/Object;)Ljava/lang/String;
    | |             INVOKESPECIAL java.lang.StringBuilder.&lt;init&gt; (Ljava/lang/String;)V
    | |             ILOAD 7     // I i
    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;
    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;
    | |             INVOKEVIRTUAL java.util.Properties.getProperty (Ljava/lang/String;)Ljava/lang/String;
    | |             ASTORE 9
    | |             ALOAD 9     // Ljava/lang/String; url   (line 127)
    | |             IFNONNULL L5
    | |             NEW java.lang.RuntimeException
    | |             DUP
    | |             NEW java.lang.StringBuilder
    | |             DUP
    | |             LDC &quot;missing &quot;
    | |             INVOKESPECIAL java.lang.StringBuilder.&lt;init&gt; (Ljava/lang/String;)V
    | |             GETSTATIC glassbox.client.ConnectionManager.propnameUrlPrefix Ljava/lang/String;
    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    | |             ILOAD 7     // I i
    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;
    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;
    | |             INVOKESPECIAL java.lang.RuntimeException.&lt;init&gt; (Ljava/lang/String;)V
    | |             ATHROW
    | |         L5: ALOAD_2     // Ljava/util/Properties; properties   (line 128)
    | |             NEW java.lang.StringBuilder
    | |             DUP
    | |             GETSTATIC glassbox.client.ConnectionManager.propnameViewedPrefix Ljava/lang/String;
    | |             INVOKESTATIC java.lang.String.valueOf (Ljava/lang/Object;)Ljava/lang/String;
    | |             INVOKESPECIAL java.lang.StringBuilder.&lt;init&gt; (Ljava/lang/String;)V
    | |             ILOAD 7     // I i
    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;
    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;
    | |             INVOKEVIRTUAL java.util.Properties.getProperty (Ljava/lang/String;)Ljava/lang/String;
    | |             ASTORE 10
    | |             ALOAD 10     // Ljava/lang/String; viewedStr   (line 129)
    | |             LDC &quot;true&quot;
    | |             INVOKEVIRTUAL java.lang.String.contentEquals (Ljava/lang/CharSequence;)Z
    | |             IFEQ L6
    | |             ICONST_1
    | |             GOTO L7
    | |         L6: ICONST_0
    | |         L7: ISTORE_3
    | |             ALOAD 9     // Ljava/lang/String; url   (line 130)
    | |             IFNONNULL L8
    | |             NEW java.lang.RuntimeException
    | |             DUP
    | |             NEW java.lang.StringBuilder
    | |             DUP
    | |             LDC &quot;missing &quot;
    | |             INVOKESPECIAL java.lang.StringBuilder.&lt;init&gt; (Ljava/lang/String;)V
    | |             GETSTATIC glassbox.client.ConnectionManager.propnameViewedPrefix Ljava/lang/String;
    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    | |             ILOAD 7     // I i
    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;
    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;
    | |             INVOKESPECIAL java.lang.RuntimeException.&lt;init&gt; (Ljava/lang/String;)V
    | |             ATHROW
    | |         L8: ALOAD_1     // Ljava/util/List; agcon   (line 131)
    | |             NEW glassbox.client.ConnectionManager$AgentConnection
    | |             DUP
    | |             ALOAD_0     // Lglassbox/client/ConnectionManager; this
    | |             ALOAD 8     // Ljava/lang/String; nickname
    | |             ALOAD 9     // Ljava/lang/String; url
    | |             ILOAD_3     // Z viewed
    | |             INVOKESPECIAL glassbox.client.ConnectionManager$AgentConnection.&lt;init&gt; (Lglassbox/client/ConnectionManager;Ljava/lang/String;Ljava/lang/String;Z)V
    | |             INVOKEINTERFACE java.util.List.add (Ljava/lang/Object;)Z
    | |             POP
    | |             IINC 7 1     // I i   (line 123)
    | |         L9: ILOAD 7     // I i
    | |             ILOAD 5     // I num
    | |             IF_ICMPLT L3
    | |             ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 133)
    | |             ICONST_M1
    | |             PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I
    | |             ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 134)
    | |             ALOAD_1     // Ljava/util/List; agcon
    | |             PUTFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    | |             ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 135)
    | |             ALOAD 6     // Ljava/lang/String; defNickname
    | |             INVOKEVIRTUAL glassbox.client.ConnectionManager.setAsDefault (Ljava/lang/String;)V
    | |             ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 136)
    | |             GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I
    | |             ICONST_M1
    | |             IF_ICMPNE L10
    | |             ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 137)
    | |             ICONST_0
    | |             PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I
    | |             GOTO L10
    | catch java.lang.Exception -&gt; E1
    |           E1: ASTORE 5   (line 140)
    |               GETSTATIC java.lang.System.err Ljava/io/PrintStream;   (line 141)
    |               LDC &quot;Failed to read connection.properties file&quot;
    |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V
    |               ALOAD 5     // Ljava/lang/Exception; e2   (line 142)
    |               INVOKEVIRTUAL java.lang.Exception.printStackTrace ()V
    |               NEW java.lang.RuntimeException   (line 143)
    |               DUP
    |               ALOAD 5     // Ljava/lang/Exception; e2
    |               INVOKESPECIAL java.lang.RuntimeException.&lt;init&gt; (Ljava/lang/Throwable;)V
    |               ATHROW
    |          L10: RETURN   (line 145)
    method-execution(void glassbox.client.ConnectionManager.readFromFile())
  end public void readFromFile()

  public void delete(String)    org.aspectj.weaver.MethodDeclarationLineNumber: 147:5452
:
    method-execution(void glassbox.client.ConnectionManager.delete(java.lang.String))
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 148)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               INVOKEINTERFACE java.util.List.size ()I
    |               ICONST_1
    |               IF_ICMPGT L0
    |               RETURN
    |           L0: ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 149)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;
    |               ASTORE_3
    |               GOTO L3
    |           L1: ALOAD_3
    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;
    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection
    |               ASTORE_2
    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 151)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;
    |               ALOAD_1     // Ljava/lang/String; nickname
    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z
    |               IFEQ L3
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 152)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con
    |               INVOKEINTERFACE java.util.List.lastIndexOf (Ljava/lang/Object;)I
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this
    |               GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I
    |               IF_ICMPNE L2
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this
    |               ICONST_0
    |               PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I
    |           L2: ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 154)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con
    |               INVOKEINTERFACE java.util.List.remove (Ljava/lang/Object;)Z
    |               POP
    |               GOTO L4   (line 155)
    |           L3: ALOAD_3   (line 149)
    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z
    |               IFNE L1
    |           L4: RETURN   (line 158)
    method-execution(void glassbox.client.ConnectionManager.delete(java.lang.String))
  end public void delete(String)

  public void setAsDefault(String)    org.aspectj.weaver.MethodDeclarationLineNumber: 160:5880
:
    method-execution(void glassbox.client.ConnectionManager.setAsDefault(java.lang.String))
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 161)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;
    |               ASTORE_3
    |               GOTO L1
    |           L0: ALOAD_3
    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;
    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection
    |               ASTORE_2
    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 162)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;
    |               ALOAD_1     // Ljava/lang/String; nickname
    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z
    |               IFEQ L1
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 163)
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con
    |               INVOKEINTERFACE java.util.List.lastIndexOf (Ljava/lang/Object;)I
    |               PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I
    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 164)
    |               ICONST_1
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.setViewed (Z)V
    |               GOTO L2   (line 165)
    |           L1: ALOAD_3   (line 161)
    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z
    |               IFNE L0
    |           L2: RETURN   (line 168)
    method-execution(void glassbox.client.ConnectionManager.setAsDefault(java.lang.String))
  end public void setAsDefault(String)

  public void setSelectViewed(String, boolean)    org.aspectj.weaver.MethodDeclarationLineNumber: 170:6156
:
    method-execution(void glassbox.client.ConnectionManager.setSelectViewed(java.lang.String, boolean))
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 171)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager.getDefaultNick ()Ljava/lang/String;
    |               ASTORE_3
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 172)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;
    |               ASTORE 5
    |               GOTO L2
    |           L0: ALOAD 5
    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;
    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection
    |               ASTORE 4
    |               ALOAD 4     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 173)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;
    |               ALOAD_1     // Ljava/lang/String; nickname
    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z
    |               IFEQ L2
    |               ILOAD_2     // Z val   (line 174)
    |               IFNE L1
    |               ALOAD_3     // Ljava/lang/String; defNick
    |               ALOAD 4     // Lglassbox/client/ConnectionManager$AgentConnection; con
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;
    |               IF_ACMPEQ L2
    |           L1: ALOAD 4     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 177)
    |               ILOAD_2     // Z val
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.setViewed (Z)V
    |               GOTO L3   (line 178)
    |           L2: ALOAD 5   (line 172)
    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z
    |               IFNE L0
    |           L3: RETURN   (line 182)
    method-execution(void glassbox.client.ConnectionManager.setSelectViewed(java.lang.String, boolean))
  end public void setSelectViewed(String, boolean)

  public boolean getSelectViewed(String)    org.aspectj.weaver.MethodDeclarationLineNumber: 184:6636
:
    method-execution(boolean glassbox.client.ConnectionManager.getSelectViewed(java.lang.String))
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 185)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;
    |               ASTORE_3
    |               GOTO L1
    |           L0: ALOAD_3
    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;
    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection
    |               ASTORE_2
    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 186)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;
    |               ALOAD_1     // Ljava/lang/String; nickname
    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z
    |               IFEQ L1
    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 187)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.isViewed ()Z
    |               IRETURN
    |           L1: ALOAD_3   (line 185)
    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z
    |               IFNE L0
    |               ICONST_0   (line 190)
    |               IRETURN
    method-execution(boolean glassbox.client.ConnectionManager.getSelectViewed(java.lang.String))
  end public boolean getSelectViewed(String)

  public String getNicknameFromURL(String)    org.aspectj.weaver.MethodDeclarationLineNumber: 193:6903
:
    method-execution(java.lang.String glassbox.client.ConnectionManager.getNicknameFromURL(java.lang.String))
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 194)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;
    |               ASTORE_3
    |               GOTO L1
    |           L0: ALOAD_3
    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;
    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection
    |               ASTORE_2
    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 195)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl ()Ljava/lang/String;
    |               ALOAD_1     // Ljava/lang/String; url
    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z
    |               IFEQ L1
    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 196)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;
    |               ARETURN
    |           L1: ALOAD_3   (line 194)
    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z
    |               IFNE L0
    |               LDC_W &quot; &quot;   (line 199)
    |               ARETURN
    method-execution(java.lang.String glassbox.client.ConnectionManager.getNicknameFromURL(java.lang.String))
  end public String getNicknameFromURL(String)

  public glassbox.client.ConnectionManager$AgentConnection getAgentConnectionFromURL(String)    org.aspectj.weaver.MethodDeclarationLineNumber: 202:7168
:
    method-execution(glassbox.client.ConnectionManager$AgentConnection glassbox.client.ConnectionManager.getAgentConnectionFromURL(java.lang.String))
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 203)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;
    |               ASTORE_3
    |               GOTO L1
    |           L0: ALOAD_3
    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;
    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection
    |               ASTORE_2
    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 204)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl ()Ljava/lang/String;
    |               ALOAD_1     // Ljava/lang/String; url
    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z
    |               IFEQ L1
    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 205)
    |               ARETURN
    |           L1: ALOAD_3   (line 203)
    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z
    |               IFNE L0
    |               ACONST_NULL   (line 209)
    |               ARETURN
    method-execution(glassbox.client.ConnectionManager$AgentConnection glassbox.client.ConnectionManager.getAgentConnectionFromURL(java.lang.String))
  end public glassbox.client.ConnectionManager$AgentConnection getAgentConnectionFromURL(String)

  public glassbox.client.ConnectionManager$AgentConnection getAgentConnectionFromNick(String)    org.aspectj.weaver.MethodDeclarationLineNumber: 212:7429
:
    method-execution(glassbox.client.ConnectionManager$AgentConnection glassbox.client.ConnectionManager.getAgentConnectionFromNick(java.lang.String))
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 213)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;
    |               ASTORE_3
    |               GOTO L1
    |           L0: ALOAD_3
    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;
    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection
    |               ASTORE_2
    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 214)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;
    |               ALOAD_1     // Ljava/lang/String; nickname
    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z
    |               IFEQ L1
    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 215)
    |               ARETURN
    |           L1: ALOAD_3   (line 213)
    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z
    |               IFNE L0
    |               ACONST_NULL   (line 218)
    |               ARETURN
    method-execution(glassbox.client.ConnectionManager$AgentConnection glassbox.client.ConnectionManager.getAgentConnectionFromNick(java.lang.String))
  end public glassbox.client.ConnectionManager$AgentConnection getAgentConnectionFromNick(String)

  public String getURLFromNick(String)    org.aspectj.weaver.MethodDeclarationLineNumber: 221:7695
:
    method-execution(java.lang.String glassbox.client.ConnectionManager.getURLFromNick(java.lang.String))
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 222)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;
    |               ASTORE_3
    |               GOTO L1
    |           L0: ALOAD_3
    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;
    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection
    |               ASTORE_2
    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 223)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;
    |               ALOAD_1     // Ljava/lang/String; nick
    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z
    |               IFEQ L1
    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 224)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl ()Ljava/lang/String;
    |               ARETURN
    |           L1: ALOAD_3   (line 222)
    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z
    |               IFNE L0
    |               LDC_W &quot; &quot;   (line 227)
    |               ARETURN
    method-execution(java.lang.String glassbox.client.ConnectionManager.getURLFromNick(java.lang.String))
  end public String getURLFromNick(String)

  public void edit(String, String)    org.aspectj.weaver.MethodDeclarationLineNumber: 231:7947
:
    method-execution(void glassbox.client.ConnectionManager.edit(java.lang.String, java.lang.String))
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 232)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;
    |               ASTORE 4
    |               GOTO L1
    |           L0: ALOAD 4
    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;
    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection
    |               ASTORE_3
    |               ALOAD_3     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 233)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;
    |               ALOAD_1     // Ljava/lang/String; nickname
    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z
    |               IFEQ L1
    |               ALOAD_3     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 234)
    |               ALOAD_2     // Ljava/lang/String; newurl
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.setUrl (Ljava/lang/String;)V
    |               GOTO L2   (line 235)
    |           L1: ALOAD 4   (line 232)
    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z
    |               IFNE L0
    |           L2: RETURN   (line 238)
    method-execution(void glassbox.client.ConnectionManager.edit(java.lang.String, java.lang.String))
  end public void edit(String, String)

  public void add(String, String, boolean, boolean)    org.aspectj.weaver.MethodDeclarationLineNumber: 240:8150
:
    method-execution(void glassbox.client.ConnectionManager.add(java.lang.String, java.lang.String, boolean, boolean))
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 241)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;
    |               ASTORE 6
    |               GOTO L1
    |           L0: ALOAD 6
    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;
    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection
    |               ASTORE 5
    |               ALOAD 5     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 242)
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;
    |               ALOAD_1     // Ljava/lang/String; nickname
    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z
    |               IFEQ L1
    |               RETURN
    |           L1: ALOAD 6   (line 241)
    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z
    |               IFNE L0
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 244)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               NEW glassbox.client.ConnectionManager$AgentConnection
    |               DUP
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this
    |               ALOAD_1     // Ljava/lang/String; nickname
    |               ALOAD_2     // Ljava/lang/String; url
    |               ILOAD_3     // Z viewed
    |               INVOKESPECIAL glassbox.client.ConnectionManager$AgentConnection.&lt;init&gt; (Lglassbox/client/ConnectionManager;Ljava/lang/String;Ljava/lang/String;Z)V
    |               INVOKEINTERFACE java.util.List.add (Ljava/lang/Object;)Z
    |               POP
    |               ILOAD 4     // Z makeDefault   (line 245)
    |               IFEQ L2
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               INVOKEINTERFACE java.util.List.size ()I
    |               ICONST_1
    |               ISUB
    |               PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I
    |           L2: RETURN   (line 246)
    method-execution(void glassbox.client.ConnectionManager.add(java.lang.String, java.lang.String, boolean, boolean))
  end public void add(String, String, boolean, boolean)

  public int getDefaultIndex()    org.aspectj.weaver.MethodDeclarationLineNumber: 248:8519
:
    method-execution(int glassbox.client.ConnectionManager.getDefaultIndex())
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 249)
    |               GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I
    |               IRETURN
    method-execution(int glassbox.client.ConnectionManager.getDefaultIndex())
  end public int getDefaultIndex()

  public java.util.List getConnectionList()    org.aspectj.weaver.MethodDeclarationLineNumber: 252:8611
:
    method-execution(java.util.List glassbox.client.ConnectionManager.getConnectionList())
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 253)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               ARETURN
    method-execution(java.util.List glassbox.client.ConnectionManager.getConnectionList())
  end public java.util.List getConnectionList()

  public String getDefaultURL()    org.aspectj.weaver.MethodDeclarationLineNumber: 256:8683
:
    method-execution(java.lang.String glassbox.client.ConnectionManager.getDefaultURL())
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 257)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this
    |               GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I
    |               INVOKEINTERFACE java.util.List.get (I)Ljava/lang/Object;
    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl ()Ljava/lang/String;
    |               ARETURN
    method-execution(java.lang.String glassbox.client.ConnectionManager.getDefaultURL())
  end public String getDefaultURL()

  public String getDefaultNick()    org.aspectj.weaver.MethodDeclarationLineNumber: 260:8793
:
    method-execution(java.lang.String glassbox.client.ConnectionManager.getDefaultNick())
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 261)
    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;
    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this
    |               GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I
    |               INVOKEINTERFACE java.util.List.get (I)Ljava/lang/Object;
    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection
    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;
    |               ARETURN
    method-execution(java.lang.String glassbox.client.ConnectionManager.getDefaultNick())
  end public String getDefaultNick()
end public class glassbox.client.ConnectionManager

when implementing on shadow exception-handler(void glassbox.client.ConnectionManager.&lt;catch&gt;(java.lang.RuntimeException))
when weaving type glassbox.client.ConnectionManager
when weaving classes 
when weaving 
when batch building BuildConfig[C:\devel\glassbox\.metadata\.plugins\org.eclipse.ajdt.core\crankjClient.generated.lst] #Files=52</column>
            <column name="report_time">2006-04-26 20:53:07</column>
            <column name="report_timestamp">1146100000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">c5c18aa</column>
            <column name="commit_timestamp">1146120000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</column>
            <column name="result">71:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">233</column>
            <column name="bug_id">138286</column>
            <column name="summary">Bug 138286  perthis() causes ClassCastException</column>
            <column name="description">When using perthis() with an aspect, I see the following Internal Compiler 

AJDT 1.3.1 / AspectJ 1.5.1a
Build 20060406092046
Eclipse 3.1.2, Windows XP, JDK 1.5


Error:

java.lang.ClassCastException
at org.aspectj.weaver.patterns.PerThisOrTargetPointcutVisitor.getPerTypePointcut(PerThisOrTargetPointcutVisitor.java:41)
at org.aspectj.weaver.patterns.PerThisOrTargetPointcutVisitor.visit(PerThisOrTargetPointcutVisitor.java:108)
at org.aspectj.weaver.patterns.AndPointcut.accept(AndPointcut.java:119)
at org.aspectj.weaver.patterns.PerThisOrTargetPointcutVisitor.getPerTypePointcut(PerThisOrTargetPointcutVisitor.java:41)
at org.aspectj.weaver.PerObjectInterfaceTypeMunger.getTestTypePattern(PerObjectInterfaceTypeMunger.java:64)
at org.aspectj.weaver.PerObjectInterfaceTypeMunger.matches(PerObjectInterfaceTypeMunger.java:85)
at org.aspectj.weaver.ConcreteTypeMunger.matches(ConcreteTypeMunger.java:65)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:508)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:109)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1560)
at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1511)
at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1291)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1089)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:311)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:183)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:242)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:278)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:168)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

trouble in: 
public abstract class org.apache.tapestry.internal.aspects.AbstractClassTargetting extends java.lang.Object:
  public void &lt;init&gt;():
                    ALOAD_0     // Lorg/apache/tapestry/internal/aspects/AbstractClassTargetting; this   (line 10)
                    INVOKESPECIAL java.lang.Object.&lt;init&gt; ()V
    initialization(void org.apache.tapestry.internal.aspects.AbstractClassTargetting.&lt;init&gt;())
    |               ALOAD_0
    |               INVOKEVIRTUAL java.lang.Object.getClass ()Ljava/lang/Class;
    |               LDC org.apache.tapestry.internal.annotations.Synchronized
    |               INVOKEVIRTUAL java.lang.Class.isAnnotationPresent (Ljava/lang/Class;)Z
    |               IFEQ L0
    |               ALOAD_0
    |               INVOKESTATIC org.apache.tapestry.internal.aspects.InternalSynchronization.ajc$perObjectBind (Ljava/lang/Object;)V
    | constructor-execution(void org.apache.tapestry.internal.aspects.AbstractClassTargetting.&lt;init&gt;())
    | |         L0: ALOAD_0
    | |             INVOKEVIRTUAL java.lang.Object.getClass ()Ljava/lang/Class;
    | |             LDC org.apache.tapestry.internal.annotations.Synchronized
    | |             INVOKEVIRTUAL java.lang.Class.isAnnotationPresent (Ljava/lang/Class;)Z
    | |             IFEQ L1
    | |             ALOAD_0
    | |             INVOKESTATIC org.apache.tapestry.internal.aspects.InternalSynchronization.ajc$perObjectBind (Ljava/lang/Object;)V
    | |         L1: RETURN
    | constructor-execution(void org.apache.tapestry.internal.aspects.AbstractClassTargetting.&lt;init&gt;())
    initialization(void org.apache.tapestry.internal.aspects.AbstractClassTargetting.&lt;init&gt;())
  end public void &lt;init&gt;()

  abstract void ajc$pointcut$$targetClasses$274()    org.aspectj.weaver.MethodDeclarationLineNumber: 16:628
;

end public abstract class org.apache.tapestry.internal.aspects.AbstractClassTargetting

when weaving type org.apache.tapestry.internal.aspects.AbstractClassTargetting
when weaving aspects 
when weaving 
when batch building BuildConfig[C:\workspace\.metadata\.plugins\org.eclipse.ajdt.core\tapestry5.generated.lst] #Files=70



I'll attach the corresponding files.</column>
            <column name="report_time">2006-04-24 18:29:34</column>
            <column name="report_timestamp">1145920000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">c667bcb</column>
            <column name="commit_timestamp">1146070000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
weaver/src/org/aspectj/weaver/patterns/PerThisOrTargetPointcutVisitor.java</column>
            <column name="result">4:weaver/src/org/aspectj/weaver/patterns/PerThisOrTargetPointcutVisitor.java
56:tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">234</column>
            <column name="bug_id">138540</column>
            <column name="summary">Bug 138540  Patch to add support for -Xset: options</column>
            <column name="description">I needed to add X=&quot;set:activateLightweightDelegates=false to my ant build configuration, to troubleshoot the out of memory permgen condition. However, the ant task support doesn't currently support adding the new -Xset style options Andy added.

Here is a small patch to pass any -Xset: options through, that worked for me.</column>
            <column name="report_time">2006-04-25 20:18:31</column>
            <column name="report_timestamp">1146010000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">99882cb</column>
            <column name="commit_timestamp">1146040000</column>
            <column name="files">taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</column>
            <column name="result">7:taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</column>
        </table>
        <table name="aspectj">
            <column name="id">235</column>
            <column name="bug_id">136585</column>
            <column name="summary">Bug 136585  NullPointerException in PerObjectInterfaceTypeMunger.java:33</column>
            <column name="description">AspectJ 1.5.1a + AJDT 1.4.0-dev on Eclipse 3.2M6
Using the Sapcewar example, open Game.java and add:
   public void foo() {}
save and an incremental build will fail with:

java.lang.NullPointerException
at org.aspectj.weaver.PerObjectInterfaceTypeMunger.equals(PerObjectInterfaceTypeMunger.java:33)
at org.aspectj.weaver.bcel.BcelTypeMunger.equals(BcelTypeMunger.java:1672)
at java.util.AbstractList.equals(AbstractList.java:610)
at org.aspectj.weaver.CrosscuttingMembers.replaceWith(CrosscuttingMembers.java:321)
at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:73)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures(AjLookupEnvironment.java:397)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares(AjLookupEnvironment.java:333)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:173)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:269)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:168)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

NullPointerException thrown: null</column>
            <column name="report_time">2006-04-13 05:38:44</column>
            <column name="report_timestamp">1144920000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">1535ee7</column>
            <column name="commit_timestamp">1145450000</column>
            <column name="files">tests/multiIncremental/PR136585/base/Hello.java
tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
weaver/src/org/aspectj/weaver/PerObjectInterfaceTypeMunger.java</column>
            <column name="result">14:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
1907:weaver/src/org/aspectj/weaver/PerObjectInterfaceTypeMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">236</column>
            <column name="bug_id">136665</column>
            <column name="summary">Bug 136665  Bug: ajc fails on missing classpath entries with fix</column>
            <column name="description">[iajc] error at (no source information available)
     [iajc] File.aj:0::0 Internal compiler error
     [iajc] org.aspectj.weaver.BCException: Can't open archive: missingjar

     [iajc] when resolving types defined in compilation unit File.aj
     [iajc] when processing compilation unit File.aj
     [iajc] when batch building BuildConfig[null] #Files=14
     [iajc]
     [iajc]     at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.ensureO
pen(ClassPathManager.java:258)
     [iajc]     at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.find(Cl
assPathManager.java:225)
     [iajc]     at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManage
r.java:92)
     [iajc]     at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.j
ava:287)
     [iajc]     at org.aspectj.weaver.World.resolveToReferenceType(World.java:33
5)
     [iajc]     at org.aspectj.weaver.World.resolve(World.java:251)
     [iajc]     at org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInWorld
(WildTypePattern.java:716)
     [iajc]     at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFr
omFullyQualifiedTypeName(WildTypePattern.java:690)
     [iajc]     at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings(W
ildTypePattern.java:623)
     [iajc]     at org.aspectj.weaver.patterns.SignaturePattern.resolveBindings(
SignaturePattern.java:82)
     [iajc]     at org.aspectj.weaver.patterns.KindedPointcut.resolveBindings(Ki
ndedPointcut.java:259)
     [iajc]     at org.aspectj.weaver.patterns.AndPointcut.resolveBindings(AndPo
intcut.java:74)
     [iajc]     at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:19
4)
     [iajc]     at org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.fin
ishResolveTypes(PointcutDesignator.java:84)
     [iajc]     at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.reso
lveStatements(AdviceDeclaration.java:118)
     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMet
hodDeclaration.resolve(AbstractMethodDeclaration.java:400)
     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara
tion.resolve(TypeDeclaration.java:1088)
     [iajc]     at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.reso
lve(AspectDeclaration.java:116)
     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara
tion.resolve(TypeDeclaration.java:1137)
     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Compilation
UnitDeclaration.resolve(CompilationUnitDeclaration.java:305)
     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.proces
s(Compiler.java:514)
     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compil
e(Compiler.java:329)
     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.perform
Compilation(AjBuildManager.java:845)
     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild
(AjBuildManager.java:241)
     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBu
ild(AjBuildManager.java:161)
     [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:1
12)
     [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:
60)
     [iajc]     at org.aspectj.tools.ajc.Main.run(Main.java:356)
     [iajc]     at org.aspectj.tools.ajc.Main.runMain(Main.java:246)
     [iajc]     at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTas
k.java:1262)
     [iajc]     at org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1
056)
     [iajc]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.ja
va:275)
     [iajc]     at org.apache.tools.ant.Task.perform(Task.java:364)
     [iajc]     at org.apache.tools.ant.Target.execute(Target.java:341)
     [iajc]     at org.apache.tools.ant.Target.performTasks(Target.java:369)
     [iajc]     at org.apache.tools.ant.Project.executeTarget(Project.java:1214)

     [iajc]     at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:386)
     [iajc]     at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.j
ava:106)
     [iajc]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.ja
va:275)
     [iajc]     at org.apache.tools.ant.Task.perform(Task.java:364)
     [iajc]     at org.apache.tools.ant.Target.execute(Target.java:341)
     [iajc]     at org.apache.tools.ant.Target.performTasks(Target.java:369)
     [iajc]     at org.apache.tools.ant.Project.executeTarget(Project.java:1214)

     [iajc]     at org.apache.tools.ant.Project.executeTargets(Project.java:1062
)
     [iajc]     at org.apache.tools.ant.Main.runBuild(Main.java:673)
     [iajc]     at org.apache.tools.ant.Main.startAnt(Main.java:188)
     [iajc]     at org.apache.tools.ant.launch.Launcher.run(Launcher.java:196)
     [iajc]     at org.apache.tools.ant.launch.Launcher.main(Launcher.java:55)
     [iajc] Caused by: java.util.zip.ZipException: error in opening zip file
     [iajc] java.util.zip.ZipException: error in opening zip file
     [iajc]     at java.util.zip.ZipFile.open(Native Method)
     [iajc]     at java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:111)
     [iajc]     at java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:127)
     [iajc]     at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.ensureO
pen(ClassPathManager.java:252)
     [iajc]     at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.find(Cl
assPathManager.java:225)
     [iajc]     at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManage
r.java:92)
     [iajc]     at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.j
ava:287)
     [iajc]     at org.aspectj.weaver.World.resolveToReferenceType(World.java:33
5)
     [iajc]     at org.aspectj.weaver.World.resolve(World.java:251)
     [iajc]     at org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInWorld
(WildTypePattern.java:716)
     [iajc]     at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFr
omFullyQualifiedTypeName(WildTypePattern.java:690)
     [iajc]     at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings(W
ildTypePattern.java:623)
     [iajc]     at org.aspectj.weaver.patterns.SignaturePattern.resolveBindings(
SignaturePattern.java:82)
     [iajc]     at org.aspectj.weaver.patterns.KindedPointcut.resolveBindings(Ki
ndedPointcut.java:259)
     [iajc]     at org.aspectj.weaver.patterns.AndPointcut.resolveBindings(AndPo
intcut.java:74)
     [iajc]     at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:19
4)
     [iajc]     at org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.fin
ishResolveTypes(PointcutDesignator.java:84)
     [iajc]     at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.reso
lveStatements(AdviceDeclaration.java:118)
     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMet
hodDeclaration.resolve(AbstractMethodDeclaration.java:400)
     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara
tion.resolve(TypeDeclaration.java:1088)
     [iajc]     at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.reso
lve(AspectDeclaration.java:116)
     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara
tion.resolve(TypeDeclaration.java:1137)
     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Compilation
UnitDeclaration.resolve(CompilationUnitDeclaration.java:305)
     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.proces
s(Compiler.java:514)
     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compil
e(Compiler.java:329)
     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.perform
Compilation(AjBuildManager.java:845)
     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild
(AjBuildManager.java:241)
     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBu
ild(AjBuildManager.java:161)
     [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:1
12)
     [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:
60)
     [iajc]     at org.aspectj.tools.ajc.Main.run(Main.java:356)
     [iajc]     at org.aspectj.tools.ajc.Main.runMain(Main.java:246)
     [iajc]     at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTas
k.java:1262)
     [iajc]     at org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1
056)
     [iajc]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.ja
va:275)
     [iajc]     at org.apache.tools.ant.Task.perform(Task.java:364)
     [iajc]     at org.apache.tools.ant.Target.execute(Target.java:341)
     [iajc]     at org.apache.tools.ant.Target.performTasks(Target.java:369)
     [iajc]     at org.apache.tools.ant.Project.executeTarget(Project.java:1214)

     [iajc]     at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:386)
     [iajc]     at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.j
ava:106)
     [iajc]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.ja
va:275)
     [iajc]     at org.apache.tools.ant.Task.perform(Task.java:364)
     [iajc]     at org.apache.tools.ant.Target.execute(Target.java:341)
     [iajc]     at org.apache.tools.ant.Target.performTasks(Target.java:369)
     [iajc]     at org.apache.tools.ant.Project.executeTarget(Project.java:1214)

     [iajc]     at org.apache.tools.ant.Project.executeTargets(Project.java:1062
)
     [iajc]     at org.apache.tools.ant.Main.runBuild(Main.java:673)
     [iajc]     at org.apache.tools.ant.Main.startAnt(Main.java:188)
     [iajc]     at org.apache.tools.ant.launch.Launcher.run(Launcher.java:196)
     [iajc]     at org.apache.tools.ant.launch.Launcher.main(Launcher.java:55)
     [iajc] abort ABORT -- (BCException) Can't open archive: wissing.jar
     [iajc] when resolving types defined in compilation unit File.aj
     [iajc] when processing compilation unit File.aj
     [iajc] when batch building BuildConfig[null] #Files=14</column>
            <column name="report_time">2006-04-13 11:34:02</column>
            <column name="report_timestamp">1144940000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d1a252e</column>
            <column name="commit_timestamp">1145360000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java</column>
            <column name="result">9:weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java</column>
        </table>
        <table name="aspectj">
            <column name="id">237</column>
            <column name="bug_id">135001</column>
            <column name="summary">Bug 135001  NPE at at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline</column>
            <column name="description">java.lang.NullPointerException
at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline(BcelShadow.java:2109)
at org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:232)
at org.aspectj.weaver.Shadow.implementMungers(Shadow.java:639)
at org.aspectj.weaver.Shadow.implement(Shadow.java:456)
at org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2236)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:491)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:109)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1560)
at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1511)
at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1291)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1113)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:311)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:183)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:242)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)</column>
            <column name="report_time">2006-04-05 07:10:58</column>
            <column name="report_timestamp">1144240000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">1a6f695</column>
            <column name="commit_timestamp">1144320000</column>
            <column name="files">tests/bugs152/pr135001/AbstractAspect.java
tests/bugs152/pr135001/ConcreteAspect.java
tests/bugs152/pr135001/Foo.java
tests/src/org/aspectj/systemtest/AllTests15.java
tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java
tests/src/org/aspectj/systemtest/ajc152/AllTestsAspectJ152.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
weaver/src/org/aspectj/weaver/bcel/BcelWorld.java
weaver/testsrc/org/aspectj/weaver/bcel/AsmDelegateTests.java</column>
            <column name="result">7:weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
32:weaver/src/org/aspectj/weaver/bcel/BcelWorld.java
493:weaver/testsrc/org/aspectj/weaver/bcel/AsmDelegateTests.java
664:tests/src/org/aspectj/systemtest/AllTests15.java</column>
        </table>
        <table name="aspectj">
            <column name="id">238</column>
            <column name="bug_id">134541</column>
            <column name="summary">Bug 134541  adviceDidNotMatch's line number doesn't keep up with line number of advice</column>
            <column name="description">When advice doesn't match in a 1.5.0 enabled project, there is an adviceDidNotMatch warning against the line number of the advice. If you insert a line before this advice and save then the warning stays associated with the original line and not the new one. Full building puts the warning against the new line. 

This is a regression and didn't happen in AJ 1.5.0.</column>
            <column name="report_time">2006-04-03 12:03:09</column>
            <column name="report_timestamp">1144080000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">94d8b82</column>
            <column name="commit_timestamp">1144320000</column>
            <column name="files">tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
weaver/src/org/aspectj/weaver/CrosscuttingMembers.java
weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java</column>
            <column name="result">10:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
77:weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java
413:weaver/src/org/aspectj/weaver/CrosscuttingMembers.java</column>
        </table>
        <table name="aspectj">
            <column name="id">239</column>
            <column name="bug_id">130837</column>
            <column name="summary">Bug 130837  Exception while trying to edit Annotation based Aspect Class  (normal Java class)</column>
            <column name="description">java.lang.NullPointerException
at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.buildFormalAdviceBindingsFrom(ValidateAtAspectJAnnotationsVisitor.java:417)
at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.resolveAndSetPointcut(ValidateAtAspectJAnnotationsVisitor.java:364)
at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.validateAdvice(ValidateAtAspectJAnnotationsVisitor.java:336)
at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.visit(ValidateAtAspectJAnnotationsVisitor.java:186)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:185)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1195)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:339)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.beforeAnalysing(AjCompilerAdapter.java:154)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$before$org_aspectj_ajdt_internal_compiler_CompilerAdapter$7$db78446d(CompilerAdapter.aj:101)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:517)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:824)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:234)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:189)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:164)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

NullPointerException thrown: null</column>
            <column name="report_time">2006-03-07 19:52:08</column>
            <column name="report_timestamp">1141780000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">41f1f3a</column>
            <column name="commit_timestamp">1143530000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</column>
            <column name="result">2:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</column>
        </table>
        <table name="aspectj">
            <column name="id">240</column>
            <column name="bug_id">132087</column>
            <column name="summary">Bug 132087  NPE from unbound variable in advice</column>
            <column name="description">I get this error from having an unbound reference to a variable in an aspect. See attached AJDT project for an example.

java.lang.NullPointerException
at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit(AsmHierarchyBuilder.java:412)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:185)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1250)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse(QualifiedAllocationExpression.java:392)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.traverse(LocalDeclaration.java:242)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:212)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1195)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:339)
at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild(AsmHierarchyBuilder.java:143)
at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit(AsmHierarchyBuilder.java:82)
at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit(EclipseFactory.java:927)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(AjCompilerAdapter.java:201)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184(CompilerAdapter.aj:90)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:528)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:843)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:243)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:163)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

NullPointerException thrown: null</column>
            <column name="report_time">2006-03-15 23:56:13</column>
            <column name="report_timestamp">1142480000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">fa2ed1b</column>
            <column name="commit_timestamp">1143500000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</column>
            <column name="result">3:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</column>
        </table>
        <table name="aspectj">
            <column name="id">241</column>
            <column name="bug_id">132160</column>
            <column name="summary">Bug 132160  NPE in SingleTypeReference</column>
            <column name="description">I was C&amp;P'ing the guts of another aspect into a new file (from another project that I'm porting over).  There are a number of errors in the aspect (as most of the references point to the other project).  I just changed an object from one type (in the other project) to a type in the project that the file is in.


Eclipse SDK
Version: 3.1.2
Build id: M20060118-1600

Version: 1.3.0
Build id: 20051220093604
AspectJ version: 1.5.0

----------------------------------------------------------------

java.lang.NullPointerException
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding(SingleTypeReference.java:39)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.getTypeBindingPublic(TypeReference.java:98)
at org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.genLabelAndKind(AsmElementFormatter.java:230)
at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit(AsmHierarchyBuilder.java:399)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:185)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1250)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse(QualifiedAllocationExpression.java:392)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.traverse(LocalDeclaration.java:242)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:212)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1195)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:339)
at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild(AsmHierarchyBuilder.java:142)
at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit(AsmHierarchyBuilder.java:82)
at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit(EclipseFactory.java:926)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(AjCompilerAdapter.java:195)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184(CompilerAdapter.aj:89)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:528)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:185)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

NullPointerException thrown: null</column>
            <column name="report_time">2006-03-16 09:52:40</column>
            <column name="report_timestamp">1142520000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">91473b3</column>
            <column name="commit_timestamp">1143490000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</column>
            <column name="result">17:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</column>
        </table>
        <table name="aspectj">
            <column name="id">242</column>
            <column name="bug_id">133307</column>
            <column name="summary">Bug 133307  declare parents implementing generic interface referencing same type</column>
            <column name="description">I have the following construct:

public interface TestIF&lt;T extends TestIF&gt; {}

public class TestClass {}

public aspect TestAspect {

    declare parents: TestClass implements TestIF&lt;TestClass&gt;; 

}



The later aspect does not compile, although 

public class TestClass implements TestIF&lt;TestClass&gt; {

}
is a valid class.</column>
            <column name="report_time">2006-03-26 21:05:35</column>
            <column name="report_timestamp">1143430000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">c9a60e5</column>
            <column name="commit_timestamp">1143470000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java
weaver/src/org/aspectj/weaver/patterns/IVerificationRequired.java
weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</column>
            <column name="result">4:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
95:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java
115:weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java
213:weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</column>
        </table>
        <table name="aspectj">
            <column name="id">243</column>
            <column name="bug_id">132926</column>
            <column name="summary">Bug 132926  Compiler crashes processing annotations</column>
            <column name="description">Just upgraded to latest AJDT (Version: 1.3.1, Build id: 20060322082516
AspectJ version: 1.5.1.20060320075953)
and the compiler crashed while rebulding the project (which used to work fine 
using using the March 16th version). Retrying with 'clean' build produced the
same crash.

java.lang.NullPointerException
at org.aspectj.weaver.AnnotationX.ensureAtTargetInitialized(AnnotationX.java:158)
at org.aspectj.weaver.AnnotationX.specifiesTarget(AnnotationX.java:98)
at org.aspectj.weaver.bcel.BcelWeaver.verifyTargetIsOK(BcelWeaver.java:1450)
at org.aspectj.weaver.bcel.BcelWeaver.applyDeclareAtType(BcelWeaver.java:1417)
at org.aspectj.weaver.bcel.BcelWeaver.weaveParentTypeMungers(BcelWeaver.java:1366)
at org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor(BcelWeaver.java:1223)
at org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor(BcelWeaver.java:1211)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1058)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:311)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:183)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:845)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:241)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

NullPointerException thrown: null</column>
            <column name="report_time">2006-03-22 20:05:02</column>
            <column name="report_timestamp">1143080000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2fb86fe</column>
            <column name="commit_timestamp">1143200000</column>
            <column name="files">tests/bugs151/Deca/DecA.java
tests/bugs151/pr132926/AffectedType.java
tests/bugs151/pr132926/InputAnnotation.java
tests/bugs151/pr132926/InputAnnotation2.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
weaver/src/org/aspectj/weaver/AnnotationX.java</column>
            <column name="result">8:weaver/src/org/aspectj/weaver/AnnotationX.java
9:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">244</column>
            <column name="bug_id">132130</column>
            <column name="summary">Bug 132130  Missing relationship for declare @method when annotating a co-located method</column>
            <column name="description">For this program (when all entered into *one* file) I don't see a marker from the declare to the annotated method.  If the annotated method is in another file, I do... (not sure if fields/ctors/types are also a problem..)

public aspect basic {

        declare @method:
                 * debit(..):
                 @Secured(role=&quot;supervisor&quot;);

}

class BankAccount {
        public void debit(long accId,long amount) {
        }
}

@interface Secured {
        String role();
}</column>
            <column name="report_time">2006-03-16 06:24:40</column>
            <column name="report_timestamp">1142510000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9dca72e</column>
            <column name="commit_timestamp">1142610000</column>
            <column name="files">ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java
ajde/testsrc/org/aspectj/ajde/AsmRelationshipsTest.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java
asm/src/org/aspectj/asm/internal/ProgramElement.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</column>
            <column name="result">12:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
103:ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java
116:ajde/testsrc/org/aspectj/ajde/AsmRelationshipsTest.java
143:asm/src/org/aspectj/asm/internal/ProgramElement.java
289:ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java</column>
        </table>
        <table name="aspectj">
            <column name="id">245</column>
            <column name="bug_id">131932</column>
            <column name="summary">Bug 131932  structure model bug: generic method ITD</column>
            <column name="description">import java.util.List;

public aspect Slide74 {

	public X Bar&lt;X&gt;.getFirst() {
		return lts.get(0);
	}
	
	static class Bar&lt;T&gt; {
		List&lt;T&gt; lts;
	}
}

in AJDT, this program incorrectly shows the relationship from the TYPE to the Bar class rather than from the ITD to the Bar class.</column>
            <column name="report_time">2006-03-15 09:45:01</column>
            <column name="report_timestamp">1142430000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">e2703cf</column>
            <column name="commit_timestamp">1142520000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
weaver/src/org/aspectj/weaver/NewConstructorTypeMunger.java
weaver/src/org/aspectj/weaver/NewFieldTypeMunger.java
weaver/src/org/aspectj/weaver/NewMethodTypeMunger.java</column>
            <column name="result">8:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
129:weaver/src/org/aspectj/weaver/NewConstructorTypeMunger.java
138:weaver/src/org/aspectj/weaver/NewFieldTypeMunger.java
407:weaver/src/org/aspectj/weaver/NewMethodTypeMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">246</column>
            <column name="bug_id">131933</column>
            <column name="summary">Bug 131933  grotty ClassCastException on referring to pointcut in generic type</column>
            <column name="description">import java.util.List;

public aspect Slide71 {
	before(): GenericType&lt;String&gt;.foo() {}
	before(): GenericType&lt;MyList&gt;.foo() {}
	//before(): GenericType.foo() {}
}
	
class GenericType&lt;T&gt; {
	public pointcut foo(): execution(* T.*(..));
}

that programs gives:  (because MyList is not a known type)

java.lang.ClassCastException
at org.aspectj.weaver.patterns.TypePattern.resolveExactType(TypePattern.java:193)
at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings(ReferencePointcut.java:130)
at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:194)
at org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.finishResolveTypes(PointcutDesignator.java:84)
at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveStatements(AdviceDeclaration.java:118)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:400)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1088)
at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve(AspectDeclaration.java:116)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1137)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:305)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:514)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:843)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:268)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:170)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

ClassCastException thrown: org.aspectj.weaver.patterns.WildTypePattern</column>
            <column name="report_time">2006-03-15 09:46:31</column>
            <column name="report_timestamp">1142430000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f2cd94f</column>
            <column name="commit_timestamp">1142510000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
weaver/src/org/aspectj/weaver/patterns/TypePattern.java</column>
            <column name="result">5:weaver/src/org/aspectj/weaver/patterns/TypePattern.java
51:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">247</column>
            <column name="bug_id">131505</column>
            <column name="summary">Bug 131505  Generated aop.xml files contain aspects for all the projects ever built</column>
            <column name="description">Using the -outxml option in AJDT the generated aop.xml files are not correct after the first build and contain all the aspects that have ever been built (including those in different projects and duplicates if an aspect has been built twice).  It seems that there is a global list of aspects (aspectNames in AjBuildManager) that is never cleared.</column>
            <column name="report_time">2006-03-13 05:37:45</column>
            <column name="report_timestamp">1142250000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b3cd01d</column>
            <column name="commit_timestamp">1142430000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java
tests/multiIncremental/PR131505/base/C.java
tests/multiIncremental/PR131505/inc2/C.java
tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
7:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java
16:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">248</column>
            <column name="bug_id">101411</column>
            <column name="summary">Bug 101411  SerialVersionUID handling</column>
            <column name="description">from emails - needs a decision
---------------
Hi Andy

is there a way for the weaver to add to weaved classes the serial ver
uid field based on the pre-weaved bytecode computation.
Right now it issues lint warning when a Serializable class without
serial ver uid is encountered and due to evil #75442 this is very
annoying for LTW.
A first step would be to at least deal with that when we had the
perObbjectTypeMunger (then should not change any kind previous stuff).

Alex

------------
Andy,

Generating the suid sounds like a nice idea but the code the JVM used is
private inside ObjectStreamClass. Also we need to take care with ITD fields
to ensure correct behaviour when sending and receiving from non-woven
classes. Basically the programmer needs to be engaged, it only affects
serializable classes and in 1.5 there is a warning if you don't declare the
field so there is a strong hint to the programmer to solve the problem. For
LTW we should make an enhancement to allow the user to configure Lint and
other things. For example they may or may not be interested in advice not
matching.

Matthew Webster

----------------------


Alex,

We should make a distinction between benign changes to suid and those that
affect members. Generating suid when we add a static initializer (to
support thisJoinPoint or the staticinitialization join point), accessor
methods for privileged aspects or transient per-fields is OK. Doing for
ITDs is more problematic.

Matthew Webster</column>
            <column name="report_time">2005-06-23 03:47:48</column>
            <column name="report_timestamp">1119510000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6e6658a</column>
            <column name="commit_timestamp">1141930000</column>
            <column name="files">bcel-builder/src/org/aspectj/apache/bcel/generic/ClassGen.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java
tests/features151/serialveruid/AnAspect.java
tests/features151/serialveruid/Basic.java
tests/features151/serialveruid/BigHorribleClass.java
tests/src/org/aspectj/systemtest/ajc151/AllTestsAspectJ151.java
tests/src/org/aspectj/systemtest/ajc151/SerialVersionUIDTests.java
weaver/src/org/aspectj/weaver/Lint.java
weaver/src/org/aspectj/weaver/World.java
weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</column>
            <column name="result">3:weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java
9:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
13:weaver/src/org/aspectj/weaver/World.java
15:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
17:weaver/src/org/aspectj/weaver/Lint.java
19:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java
26:org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
496:tests/src/org/aspectj/systemtest/ajc151/AllTestsAspectJ151.java
586:bcel-builder/src/org/aspectj/apache/bcel/generic/ClassGen.java</column>
        </table>
        <table name="aspectj">
            <column name="id">249</column>
            <column name="bug_id">130300</column>
            <column name="summary">Bug 130300  Remove, hide or obfuscate -XnoWeave</column>
            <column name="description">This option is redundant apart from use in AspectJ development and maintenance. It is confusing to users and is a source new problems for LTW.</column>
            <column name="report_time">2006-03-03 06:27:21</column>
            <column name="report_timestamp">1141390000</column>
            <column name="status">verified fixed</column>
            <column name="commit">b225911</column>
            <column name="commit_timestamp">1141580000</column>
            <column name="files">ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/core/AspectJCore.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java
taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java
taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java
testing/src/org/aspectj/testing/harness/bridge/CompilerRun.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java
tests/src/org/aspectj/systemtest/inpath/InPathTests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
2:tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java
3:taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java
5:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
6:ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java
10:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
31:org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
83:org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java
85:testing/src/org/aspectj/testing/harness/bridge/CompilerRun.java
125:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java
136:taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java
150:org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java
152:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java
176:org.aspectj.ajdt.core/src/org/aspectj/ajdt/core/AspectJCore.java
266:tests/src/org/aspectj/systemtest/inpath/InPathTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">250</column>
            <column name="bug_id">129298</column>
            <column name="summary">Bug 129298  Contribution: Remove Memory Consuming Declared Signature</column>
            <column name="description">The code for weaver.Member#getDeclaredSignature() is never used in the weaver. My memory analysis showed this can pin several megabytes of memory in a large system. This patch removes it. YAGNI :-)</column>
            <column name="report_time">2006-02-24 03:45:34</column>
            <column name="report_timestamp">1140770000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a116142</column>
            <column name="commit_timestamp">1140780000</column>
            <column name="files">weaver/src/org/aspectj/weaver/JoinPointSignature.java
weaver/src/org/aspectj/weaver/Member.java
weaver/src/org/aspectj/weaver/MemberImpl.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/MemberImpl.java
2:weaver/src/org/aspectj/weaver/JoinPointSignature.java
3:weaver/src/org/aspectj/weaver/Member.java</column>
        </table>
        <table name="aspectj">
            <column name="id">251</column>
            <column name="bug_id">121312</column>
            <column name="summary">Bug 121312  [performance]Contribution: Refactoring to Support LTW World with Reflection Delegates for Bootstrap Types</column>
            <column name="description">This patch adds an IReflectionWorld interface, changes the various places in code where casts are made to ReflectionWorld to use that interface, creates some common methods and creates an LTWWorld that implements this interface, and sets up the ClassLoaderWeavingAdaptor to use it. It's important that the LTWWorld have just one type map for performance and memory efficiency.</column>
            <column name="report_time">2005-12-17 02:53:28</column>
            <column name="report_timestamp">1134810000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">cafdecb</column>
            <column name="commit_timestamp">1140690000</column>
            <column name="files">weaver/src/org/aspectj/weaver/ltw/LTWWorld.java
weaver/src/org/aspectj/weaver/reflect/IReflectionWorld.java
weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java
weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java
weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java
weaver/testsrc/org/aspectj/weaver/reflect/ReflectionWorldTest.java</column>
            <column name="result">3:weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java
7:weaver/testsrc/org/aspectj/weaver/reflect/ReflectionWorldTest.java
10:weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java
14:weaver/src/org/aspectj/weaver/ltw/LTWWorld.java
32:weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java</column>
        </table>
        <table name="aspectj">
            <column name="id">252</column>
            <column name="bug_id">122742</column>
            <column name="summary">Bug 122742  [@AspectJ] VerifyError with @AfterThrowing/@AfterReturning and extra JoinPoint argument</column>
            <column name="description">If an @AspectJ aspect advises itself using after throwing advice that itself throws an exception running the resulting program causes a VerifyError:

java.lang.VerifyError: (class: A, method: stop signature: ()V) catch_type not a subclass of Throwable
	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2365)
	at java.lang.Class.getMethod0(Class.java:2611)
	at java.lang.Class.getMethod(Class.java:1579)
	at org.aspectj.tools.ajc.AjcTestCase.run(AjcTestCase.java:608)
	at org.aspectj.testing.RunSpec.execute(RunSpec.java:56)
	at org.aspectj.testing.AjcTest.runTest(AjcTest.java:68)
	at org.aspectj.testing.XMLBasedAjcTestCase.runTest(XMLBasedAjcTestCase.java:111)
	at org.aspectj.systemtest.ajc150.Ajc150Tests.testError(Ajc150Tests.java:877)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)</column>
            <column name="report_time">2006-01-05 06:31:44</column>
            <column name="report_timestamp">1136460000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3fa1bdd</column>
            <column name="commit_timestamp">1140540000</column>
            <column name="files">tests/bugs151/pr122742/AfterReturningTest.java
tests/bugs151/pr122742/AfterThrowingTest.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
weaver/src/org/aspectj/weaver/Advice.java</column>
            <column name="result">6:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
125:weaver/src/org/aspectj/weaver/Advice.java</column>
        </table>
        <table name="aspectj">
            <column name="id">253</column>
            <column name="bug_id">128618</column>
            <column name="summary">Bug 128618  [incremental] XLint warnings in the wrong place with incremental compilation</column>
            <column name="description">The zip file I am about to attach contains two AspectJ  project, one depending on the other.  If you make a small change to MainClass.java in 'Test Project' and save you will see a strange warning in that class - &quot;advice defined in ras.FFDC has not been applied [Xlint:adviceDidNotMatch]&quot;.  If you do a full build the warning goes away.  Note that the error would be on line 36 if there were 36 lines in the class, which relates to a line in the FFDC aspect that contains advice.</column>
            <column name="report_time">2006-02-20 06:36:46</column>
            <column name="report_timestamp">1140440000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">89d66dc</column>
            <column name="commit_timestamp">1140540000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java
tests/multiIncremental/PR128618_2/base/mainpackage/MainClass.java
tests/multiIncremental/PR128618_2/inc1/mainpackage/MainClass.java
tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
            <column name="result">5:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
279:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java</column>
        </table>
        <table name="aspectj">
            <column name="id">254</column>
            <column name="bug_id">128237</column>
            <column name="summary">Bug 128237  [@AspectJ] NPE on @AJ code with pointcut which contains logical OR operation.</column>
            <column name="description"></column>
            <column name="report_time">2006-02-16 11:21:26</column>
            <column name="report_timestamp">1140110000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ba42a09</column>
            <column name="commit_timestamp">1140540000</column>
            <column name="files">tests/bugs151/pr128237.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
            <column name="result">2:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
27:weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
        </table>
        <table name="aspectj">
            <column name="id">255</column>
            <column name="bug_id">128744</column>
            <column name="summary">Bug 128744  LTW doesn't work using JRE1.4 in Eclipse</column>
            <column name="description">LTW doesn't work using JRE1.4 in Eclipse

now I want to support JRE1.4 when LTW.
I defined a aop.xml file in application META-INF path, it works fine using JRE1.4 in command-line, aop.xml file is used when LTW, the command as below:

&quot;D:\work\BTM\eclipse 3.1.1\eclipse-SDK-3.1.1-win32\eclipse-1.4.2\jre\bin\java&quot; -classpath &quot;C:\aspectj1.5\lib\aspectjweaver.jar&quot; &quot;-Djava.system.class.loader=org.aspectj.weaver.loadtime.WeavingURLClassLoader&quot; &quot;-Daj.class.path=D:\work\BTM\eclipse 3.1.1\jre1.4.2\myTest;C:\aspectj1.5\doc\examples\armtest\jar\btm-deps-e3.1.jar;C:\aspectj1.5\doc\examples\armtest\jar\btm-rt.jar&quot; Hello


but it doesn't work in Eclipse, I added upper command to VM arguments, it can't find aop.xml, because if I changed aop.xml to be wrong, there is no any error when execute the application in Eclipse , but there will be error when execute it in command-line, based on this point, I think that aop.xml didn't be used in Eclipse, I also tried to add &quot;-Daj.aspect.path=D:\work\BTM\eclipse 3.1.1\jre1.4.2\myTest&quot;, but it is still. so I want to confirm if AspectJ only supports command-line for JRE1.4? doesn't support Eclipse for JRE1.4?

BTW, my Eclipse env: eclipse 3.1.1 + ajdt_1.3_for_eclipse_3.1 + Sun JDK 1.4.2.
I also tried to use eclipse 3.1.2, but this problem is still existed.</column>
            <column name="report_time">2006-02-20 23:38:48</column>
            <column name="report_timestamp">1140500000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7a2087e</column>
            <column name="commit_timestamp">1140540000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java
tests/bugs151/pr128744/Hello.java
tests/bugs151/pr128744/World.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</column>
            <column name="result">6:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
201:loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java</column>
        </table>
        <table name="aspectj">
            <column name="id">256</column>
            <column name="bug_id">128699</column>
            <column name="summary">Bug 128699  Incorrect error on &quot;declare&quot; statements</column>
            <column name="description">The error associated with the declare construct is incorrect. 
The current message is:

&quot;expected one of error, warning, parents, soft, dominates&quot;

dominates should be changed to &quot;precendence&quot; and new annotation related declararions should be mentioned. Here is a suggestion:

&quot;expected one of error, warning, parents, soft, precedence, @type, @method, @constructor, @field&quot;</column>
            <column name="report_time">2006-02-20 13:08:17</column>
            <column name="report_timestamp">1140460000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f95d2c9</column>
            <column name="commit_timestamp">1140460000</column>
            <column name="files">weaver/src/org/aspectj/weaver/patterns/PatternParser.java</column>
            <column name="result">6:weaver/src/org/aspectj/weaver/patterns/PatternParser.java</column>
        </table>
        <table name="aspectj">
            <column name="id">257</column>
            <column name="bug_id">123553</column>
            <column name="summary">Bug 123553  Can't use named pointcut in advice decl. in generic aspect</column>
            <column name="description">When defining a generic aspect with a paramterized PC, using that PC in an advice declaration causes an 'incompatible type' error. Example:

public abstract aspect GenericAspect&lt;Par1&gt; {
   abstract pointcut checkpoint(Par1 par1);

   // advice declaration causes error
   after(Par1 par1): checkpoint(par1) {// do something}
}

Using 1.3.0.20051220093604 and AspectJ 1.5.0, the compiler complains:

&quot;incompatible type, expected java.lang.Object found BindingTypePattern(TPar1;, 0).  Check the type specified in your pointcut&quot;  

Since it is possible to paramterize a named PC in subaspects:

public abstract aspect GenericAspect&lt;Par1&gt; {    
   abstract pointcut checkpoint(Par1 par1);
}

public aspect SubAspect1 extends GenericAspect&lt;Main&gt;{
   pointcut checkpoint(Main main): call(void Main.test()) &amp;&amp; target(main);
   after (Main main): checkpoint(main) {
       System.out.println(&quot;Caught by 1.&quot;);
   }
}

public aspect SubAspect2 extends GenericAspect&lt;Main2&gt;{    pointcut checkpoint(Main2 main): call(void Main2.test()) &amp;&amp; target(main);
   after (Main2 main): checkpoint(main) {
       System.out.println(&quot;Caught by 2.&quot;);
   }
} 

... and since it is possible to use generic PC utilizing unnamed PCs in a generic aspect: 

public abstract aspect GenericAspect&lt;Par1&gt; {    
   // works
   after(Par1 par1): call(void Par1.test()) &amp;&amp; target(par1) {// something }
} 

... it seems that this is a bug.</column>
            <column name="report_time">2006-01-12 00:56:24</column>
            <column name="report_timestamp">1137050000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">1f1ace1</column>
            <column name="commit_timestamp">1140210000</column>
            <column name="files">tests/bugs151/pr123553/A.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</column>
            <column name="result">28:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">258</column>
            <column name="bug_id">122370</column>
            <column name="summary">Bug 122370  [@AspectJ] @DeclareParents/declare parents not equivalent</column>
            <column name="description">Adding a setter to the Moody example makes it clear that the annotation style (@DeclareParents) results in different behavior than the classic (declare parents) style.

Calling the setter in a &quot;declare parents&quot;-advised object behaves as one would expect.  However, calling the setter with a &quot;@DeclareParents&quot;-advised object has no effect -- that is, you can call the setter (and see that it's been called) and immediately call the getter, only to find that the value didn't change.  The following examples (all in &quot;package moody;&quot;) illustrate:

public enum Mood { HAPPY, JOLLY }

Classic style:
-------------
public aspect ClassicMoodIndicator {
   public interface Moody {
      Mood getMood();
      void setMood(Mood mood);
   }

   private Mood Moody.mood = Mood.HAPPY;

   public Mood Moody.getMood() { return mood; }
   public void Moody.setMood(Mood mood) { this.mood = mood; }

   declare parents : moody.ClassicMoodImplementor implements Moody;
}

public class ClassicMoodImplementor { }

Annotation style:
----------------
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.DeclareParents;

@Aspect
public class AnnotationMoodIndicator {
   public interface Moody {
      Mood getMood();
      void setMood(Mood mood);
   }

   public static class MoodyImpl implements Moody {
      private Mood mood = Mood.HAPPY;

      public Mood getMood() { return mood; }
      public void setMood(Mood mood) { this.mood = mood; }
   }

   @DeclareParents(value=&quot;moody.AnnotationMoodImplementor&quot;,defaultImpl=MoodyImpl.class)
   private Moody implementedInterface;
}

public class AnnotationMoodImplementor { }

JUnit TestCase:
--------------
import junit.framework.TestCase;

public class MoodTester extends TestCase {
   public MoodTester(String name) { super(name); }

   public void testClassic() {
      ClassicMoodImplementor cmi0 = new ClassicMoodImplementor();
      ClassicMoodImplementor cmi1 = new ClassicMoodImplementor();
      
      assertEquals(&quot;cmi0 should be HAPPY&quot;, Mood.HAPPY, cmi0.getMood());
      
      cmi1.setMood(Mood.JOLLY);
      assertEquals(&quot;cmi1 should be JOLLY&quot;, Mood.JOLLY, cmi1.getMood());
      assertEquals(&quot;cmi0 should be *still* be HAPPY&quot;, Mood.HAPPY, cmi0.getMood());
   }
   
   public void testAnnotation() {
      AnnotationMoodImplementor ami0 = new AnnotationMoodImplementor();
      AnnotationMoodImplementor ami1 = new AnnotationMoodImplementor();
      
      assertEquals(&quot;ami0 should be HAPPY&quot;, Mood.HAPPY, ((AnnotationMoodIndicator.Moody) ami0).getMood());
      
      ((AnnotationMoodIndicator.Moody) ami1).setMood(Mood.JOLLY);
      assertEquals(&quot;ami1 should be JOLLY&quot;, Mood.JOLLY, ((AnnotationMoodIndicator.Moody) ami1).getMood());
      assertEquals(&quot;ami0 should be *still* be HAPPY&quot;, Mood.HAPPY, ((AnnotationMoodIndicator.Moody) ami0).getMood());
   }
}

Result:
------
The test run is as follows:
..F
Time: 0.021
There was 1 failure:
1) testAnnotation(moody.MoodTester)junit.framework.AssertionFailedError: ami1 should be JOLLY expected:&lt;JOLLY&gt; but was:&lt;HAPPY&gt;
       at moody.MoodTester.testAnnotation(MoodTester.java:27)
       at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
       at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
       at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
       at moody.MoodTester.main(MoodTester.java:7)

FAILURES!!!
Tests run: 2,  Failures: 1,  Errors: 0

For classic, you can see that cmi1.setMood was successful and cmi0/cmi1 are decoupled (that is, calling setMood on cmi1 has no impact on cmi0).  The annotation style, however, fails because ami1.setMood appears to have done nothing.  The result should have been that ami1 is JOLLY and ami0 HAPPY (I include the second assert because both ami0 &amp; ami1 ended up JOLLY in RC1).

The current behavior makes @DeclareParents unusable for retaining field state (near as I can tell, it retains state throughout the method invocation, but not beyond it, like it is creating and discarding a backing object with each method invocation).</column>
            <column name="report_time">2005-12-30 00:54:07</column>
            <column name="report_timestamp">1135920000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">e874581</column>
            <column name="commit_timestamp">1140110000</column>
            <column name="files">tests/bugs151/pr122370/moody/AnnotationMoodImplementor.java
tests/bugs151/pr122370/moody/AnnotationMoodIndicator.java
tests/bugs151/pr122370/moody/MainClass.java
tests/bugs151/pr122370/moody/Mood.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
            <column name="result">7:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
11:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">259</column>
            <column name="bug_id">121616</column>
            <column name="summary">Bug 121616  [@AspectJ]Lacking import for JoinPoint crahes the compiler</column>
            <column name="description"></column>
            <column name="report_time">2005-12-20 14:58:14</column>
            <column name="report_timestamp">1135110000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d4219e1</column>
            <column name="commit_timestamp">1140080000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java
tests/bugs151/pr121616.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</column>
            <column name="result">45:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
115:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</column>
        </table>
        <table name="aspectj">
            <column name="id">260</column>
            <column name="bug_id">119882</column>
            <column name="summary">Bug 119882  BCException when deleting a java-source-file</column>
            <column name="description">org.aspectj.weaver.BCException
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1087)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:254)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

BCException thrown: Can't find bcel delegate for training.casino.Konto type=class org.aspectj.weaver.ReferenceType
when weaving classes 
when weaving 
when incrementally building BuildConfig[C:\Documents and Settings\mheidt\workspace 3.1.1\.metadata\.plugins\org.eclipse.ajdt.core\AspJTraining.generated.lst] #Files=11

deleted  a java-source-file before (but not the class-file), possibly pointed by a LogAspect. Created a new source file. Error occurs after saving the new file.</column>
            <column name="report_time">2005-12-08 10:53:59</column>
            <column name="report_timestamp">1134060000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0b39aa5</column>
            <column name="commit_timestamp">1139830000</column>
            <column name="files">tests/multiIncremental/PR119882/base/src/pack/C1.java
tests/multiIncremental/PR119882/base/src/pack/C2.java
tests/multiIncremental/PR119882/inc1/src/pack/C1.java
tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
            <column name="result">9:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
13:weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
        </table>
        <table name="aspectj">
            <column name="id">261</column>
            <column name="bug_id">120356</column>
            <column name="summary">Bug 120356  @AJ decl err/warn does not show cross structure view</column>
            <column name="description">Perhaps an issue in the ASM struct for DEOW
since cross struct. is empty in AJDT , despite error / warning gutter and message is ok.</column>
            <column name="report_time">2005-12-12 07:07:55</column>
            <column name="report_timestamp">1134390000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f743fb2</column>
            <column name="commit_timestamp">1139570000</column>
            <column name="files">tests/bugs151/pr120356/A.java
tests/bugs151/pr120356/C.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</column>
            <column name="result">4:weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java
88:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">262</column>
            <column name="bug_id">123212</column>
            <column name="summary">Bug 123212  Skip subversion resources when copying files from input to output folders</column>
            <column name="description">Exception when compile a project under svn.

java.io.FileNotFoundException
at java.io.FileOutputStream.open(Native Method)
at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:179)
at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:131)
at org.aspectj.util.FileUtil.makeOutputStream(FileUtil.java:1258)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeResource(AjBuildManager.java:466)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromFile(AjBuildManager.java:444)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination(AjBuildManager.java:386)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:298)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:185)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

FileNotFoundException thrown: /home/chomats/Fede/svn/fede-repos/Tool.Product.ProductServer/classes/.svn/format (Permission non accordee)</column>
            <column name="report_time">2006-01-10 04:12:29</column>
            <column name="report_timestamp">1136880000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d856e4f</column>
            <column name="commit_timestamp">1139560000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
        </table>
        <table name="aspectj">
            <column name="id">263</column>
            <column name="bug_id">125809</column>
            <column name="summary">Bug 125809  AjTypeDeclaration in the dom shouldn't have the properties of it's subtype AspectDeclaration</column>
            <column name="description">The AjTypeDeclaration should not have the properties 'privileged' and 'perClause' which it's subtype AspectDeclaration has. This was shown up whilst building an aspectj for ajdt and a failure in one of the visitor tests.</column>
            <column name="report_time">2006-01-31 06:23:53</column>
            <column name="report_timestamp">1138710000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">eec4990</column>
            <column name="commit_timestamp">1138710000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjTypeDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AspectDeclaration.java
org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/AjASTTest.java</column>
            <column name="result">6:org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AspectDeclaration.java
10:org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/AjASTTest.java
16:org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjTypeDeclaration.java</column>
        </table>
        <table name="aspectj">
            <column name="id">264</column>
            <column name="bug_id">125657</column>
            <column name="summary">Bug 125657  NullPointerException from BcelShadow.java:1313</column>
            <column name="description">From within Eclipse 3.0 (RAD 6.0.1) I get an error with the (partial) details listed below.  My aspect looks like this:

public aspect AAwtEventDispatcherThreadProtection
{
  pointcut awtComponentMethod(java.awt.Component component):
    target(component) &amp;&amp; call(* *.*(..));

  before(java.awt.Component component): awtComponentMethod(component) {
    if (!SwingUtilities.isEventDispatchThread() &amp;&amp; component.isDisplayable())
    {
      System.err.println(&quot;AWT Component method called from another Thread than the AWT-EventDispatchThread! source: &quot; + 
                         thisJoinPoint.getSourceLocation() + &quot;, target: &quot; + thisJoinPoint.toLongString());
    }
  }
}

----------------
DETAILS (shortened because the size exceeded the 65k limit):


java.lang.NullPointerException
at 	at org.aspectj.weaver.bcel.BcelShadow.ensureTargetTypeIsCorrect(BcelShadow.java:1313)
at 	at org.aspectj.weaver.bcel.BcelShadow.initializeTargetVar(BcelShadow.java:1274)
at 	at org.aspectj.weaver.bcel.BcelShadow.getTargetVar(BcelShadow.java:968)
at 	at org.aspectj.weaver.patterns.ThisOrTargetPointcut.findResidueInternal(ThisOrTargetPointcut.java:185)
at 	at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268)
at 	at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:97)
at 	at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268)
at 	at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:97)
at 	at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268)
at 	at org.aspectj.weaver.bcel.BcelAdvice.specializeOn(BcelAdvice.java:132)
at 	at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers(BcelShadow.java:313)
at 	at org.aspectj.weaver.Shadow.implement(Shadow.java:404)
at 	at org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2146)
at 	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:467)
at 	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)
at 	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543)
at 	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)
at 	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)
at 	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)
at 	at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)
at 	at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)
at 	at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
at 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)
at 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)
at 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)
at 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156)
at 	at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
at 	at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

trouble in: 
public class com.sun.imageio.plugins.gif.GIFImageMetadata extends javax.imageio.metadata.IIOMetadata:</column>
            <column name="report_time">2006-01-29 18:45:17</column>
            <column name="report_timestamp">1138580000</column>
            <column name="status">resolved wontfix</column>
            <column name="commit">4934132</column>
            <column name="commit_timestamp">1138620000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result">3:weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
        </table>
        <table name="aspectj">
            <column name="id">265</column>
            <column name="bug_id">123901</column>
            <column name="summary">Bug 123901  NPE in AccessForInlineVisitor.endVisit(AccessForInlineVisitor.java:105)</column>
            <column name="description">java.lang.NullPointerException
at org.aspectj.ajdt.internal.compiler.ast.AccessForInlineVisitor.endVisit(AccessForInlineVisitor.java:105)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference.traverse(QualifiedNameReference.java(Compiled Code))
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java(Compiled Code))
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java(Compiled Code))
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java(Compiled Code))
at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveStatements(AdviceDeclaration.java:172)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java(Compiled Code))
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java(Compiled Code))
at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve(AspectDeclaration.java:115)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java(Inlined Compiled Code))
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java(Compiled Code))
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:514)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java(Compiled Code))
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:185)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

NullPointerException thrown: null</column>
            <column name="report_time">2006-01-15 08:39:40</column>
            <column name="report_timestamp">1137330000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">693945f</column>
            <column name="commit_timestamp">1138530000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java
tests/bugs151/pr123901/A.java
tests/bugs151/pr123901/B.java
tests/bugs151/pr125475/TestEmptyPointcutAtAspect.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</column>
            <column name="result">13:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java
59:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">266</column>
            <column name="bug_id">121395</column>
            <column name="summary">Bug 121395  invalid aspectj path throws filenotfoundexception</column>
            <column name="description">An invalid aspectj path (missing jar file) throws an filenotfoundexception:

java.io.FileNotFoundException
at java.io.FileInputStream.open(Native Method)
at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:106)
at org.aspectj.weaver.bcel.BcelWeaver.addAspectsFromJarFile(BcelWeaver.java:202)
at org.aspectj.weaver.bcel.BcelWeaver.addLibraryJarFile(BcelWeaver.java:192)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWorld(AjBuildManager.java:623)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:209)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:185)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

FileNotFoundException thrown: /Users/frankstolle/Documents/workspace/lib_aspects/deploy/lib_aspects.jar (No such file or directory)



should generate an problem entry in the problems-list.</column>
            <column name="report_time">2005-12-19 06:28:40</column>
            <column name="report_timestamp">1134990000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">551b446</column>
            <column name="commit_timestamp">1138370000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java
tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
            <column name="result">2:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
9:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
86:tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java</column>
        </table>
        <table name="aspectj">
            <column name="id">267</column>
            <column name="bug_id">125295</column>
            <column name="summary">Bug 125295  fix for bug 58520 caused AJDT test failures</column>
            <column name="description"></column>
            <column name="report_time">2006-01-26 04:12:48</column>
            <column name="report_timestamp">1138270000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7e40a60</column>
            <column name="commit_timestamp">1138290000</column>
            <column name="files">asm/src/org/aspectj/asm/IProgramElement.java
asm/src/org/aspectj/asm/internal/ProgramElement.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java
tests/bugs151/pr125295/pkg/C.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</column>
            <column name="result">149:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
188:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java
742:asm/src/org/aspectj/asm/internal/ProgramElement.java
834:asm/src/org/aspectj/asm/IProgramElement.java</column>
        </table>
        <table name="aspectj">
            <column name="id">268</column>
            <column name="bug_id">125101</column>
            <column name="summary">Bug 125101  StackOverFlow in ReferenceType.isAssignableFrom()</column>
            <column name="description">Hi.

I am weaving two aspects into a jar file &quot;jar-to-jar&quot;. ajc 1.5.0 gives me a huge error message (see attachement). Would be great if I could get any recommendations on this.

Thanks!
Eric</column>
            <column name="report_time">2006-01-24 19:40:36</column>
            <column name="report_timestamp">1138150000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">efb20c5</column>
            <column name="commit_timestamp">1138210000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</column>
            <column name="result">24:weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</column>
        </table>
        <table name="aspectj">
            <column name="id">269</column>
            <column name="bug_id">124999</column>
            <column name="summary">Bug 124999  [generics] Incorrect call to generic inherited method in around advice</column>
            <column name="description"></column>
            <column name="report_time">2006-01-24 08:41:13</column>
            <column name="report_timestamp">1138110000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a4bd19d</column>
            <column name="commit_timestamp">1138120000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</column>
            <column name="result">34:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
120:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</column>
        </table>
        <table name="aspectj">
            <column name="id">270</column>
            <column name="bug_id">124399</column>
            <column name="summary">Bug 124399  AJDT AspectJ Internal Compiler Error</column>
            <column name="description">In Eclipse 3.1.1 with AJDT 1.3 (the December 20th 2005 release) I got this message in an error dialog:

org.aspectj.weaver.BCException
at org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen(LazyClassGen.java:1216)
at org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen(LazyClassGen.java:1201)
at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline(BcelShadow.java:2048)
at org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:232)
at org.aspectj.weaver.Shadow.implementMungers(Shadow.java:588)
at org.aspectj.weaver.Shadow.implement(Shadow.java:405)
at org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2146)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:467)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543)
at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)
at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:254)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

trouble in: 
public class edu.ucsd.aosd.MyApplication extends java.lang.Object:
  public void &lt;init&gt;():
                    ALOAD_0     // edu.ucsd.aosd.MyApplication this   (line 5)
                    INVOKESPECIAL java.lang.Object.&lt;init&gt; ()V
    constructor-execution(void edu.ucsd.aosd.MyApplication.&lt;init&gt;())
    |               RETURN
    constructor-execution(void edu.ucsd.aosd.MyApplication.&lt;init&gt;())
  end public void &lt;init&gt;()

  public static void main(String[])    org.aspectj.weaver.MethodDeclarationLineNumber: 8:124
:
    method-execution(void edu.ucsd.aosd.MyApplication.main(java.lang.String[]))
    |               ALOAD_0     // java.lang.String[] args   (line 9)
    |               ASTORE 4
    |               ICONST_0
    |               ISTORE_2
    |               ALOAD 4
    |               ARRAYLENGTH
    |               ISTORE_3
    |               GOTO L1
    |           L0: ALOAD 4
    |               ILOAD_2
    |               AALOAD
    |               ASTORE_1
    |               GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 10)
    |               NEW java.lang.StringBuilder
    |               DUP
    |               LDC &quot;got: &quot;
    |               INVOKESPECIAL java.lang.StringBuilder.&lt;init&gt; (Ljava/lang/String;)V
    |               ALOAD_1     // java.lang.String arg
    | method-call(java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String))
    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    | method-call(java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String))
    | method-call(java.lang.String java.lang.StringBuilder.toString())
    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;
    | method-call(java.lang.String java.lang.StringBuilder.toString())
    |               ASTORE 5
    |               ASTORE 6
    | method-call(void java.io.PrintStream.println(java.lang.String))
    | |             ALOAD 6
    | |             ALOAD 5
    | |             INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V
    | method-call(void java.io.PrintStream.println(java.lang.String))
    |               GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 11)
    |               LDC &quot;got: %s\n&quot;
    |               ICONST_1
    |               ANEWARRAY java.lang.Object
    |               DUP
    |               ICONST_0
    |               ALOAD_1     // java.lang.String arg
    |               AASTORE
    | method-call(java.io.PrintStream java.io.PrintStream.printf(java.lang.String, java.lang.Object[]))
    | |             INVOKEVIRTUAL java.io.PrintStream.printf (Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;
    | method-call(java.io.PrintStream java.io.PrintStream.printf(java.lang.String, java.lang.Object[]))
    |               POP
    |               IINC 2 1   (line 9)
    |           L1: ILOAD_2
    |               ILOAD_3
    |               IF_ICMPLT L0
    |               RETURN   (line 13)
    method-execution(void edu.ucsd.aosd.MyApplication.main(java.lang.String[]))
  end public static void main(String[])

end public class edu.ucsd.aosd.MyApplication

when implementing on shadow method-call(void java.io.PrintStream.println(java.lang.String))
when weaving type edu.ucsd.aosd.MyApplication
when weaving classes 
when weaving 
when incrementally building BuildConfig[C:\EclipseWorkspace\.metadata\.plugins\org.eclipse.ajdt.core\AspectJSemanticsTest.generated.lst] #Files=2

It occured when I editing this file, in an AspectJ project with an recently renamed .aj extension:

package edu.ucsd.aosd;

import java.io.PrintStream;

public class MyApplication
{
    // main
    public static void main(String[] args) {
        for (String arg : args) {
            System.out.println(&quot;got: &quot; + arg);
            System.out.printf(&quot;got: %s\n&quot;, arg);
        }
    }
}

aspect Printing {
    pointcut printlnCalls(PrintStream ps, String out):
        call(* PrintStream+.println(String)) &amp;&amp; target(ps) &amp;&amp; args(out);
    Object around(PrintStream ps, String out):
        printlnCalls(ps, out) &amp;&amp; !adviceexecution() {
        return proceed(ps, out);
    }
    
    pointcut printfCalls(PrintStream ps, String fmt, Object[] objs):
        call(* PrintStream+.printf(String, Object...#####))
        &amp;&amp; target(ps) &amp;&amp; args(fmt, objs);
}

Where &quot;#####&quot; is where my cursor was when I saved. My previously saved version didn't have the printfCalls pointcut nor the call to printf in the main. (Thus, you might want to try the println version first, save it, and then make the new additions. Though, I hope the debug information is enough.)</column>
            <column name="report_time">2006-01-18 16:59:18</column>
            <column name="report_timestamp">1137620000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d916002</column>
            <column name="commit_timestamp">1138100000</column>
            <column name="files">tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
            <column name="result">33:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">271</column>
            <column name="bug_id">124654</column>
            <column name="summary">Bug 124654  Capture method annotation in generic aspect does not compile</column>
            <column name="description"></column>
            <column name="report_time">2006-01-20 10:32:07</column>
            <column name="report_timestamp">1137770000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">28f8c69</column>
            <column name="commit_timestamp">1138030000</column>
            <column name="files">tests/bugs151/pr124654/GenericAnnotation.java
tests/bugs151/pr124654/TestSubAspect.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</column>
            <column name="result">87:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
282:weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</column>
        </table>
        <table name="aspectj">
            <column name="id">272</column>
            <column name="bug_id">124808</column>
            <column name="summary">Bug 124808  [generics] detecting field-get of field of parameterized type.</column>
            <column name="description">Hi,

Here is the second generics issue:

Java code:
==========

public class Test&lt;T extends Integer&gt; {
	Set&lt;T&gt; ints = new HashSet&lt;T&gt;();

	public Set&lt;T&gt; foo() {
		return ints;
	}

	public static void main(String[] args) {
		Test&lt;Integer&gt; t = new Test&lt;Integer&gt;();
		Set&lt;Integer&gt; ints = t.foo();
	}
}

Aspect:
=======
public privileged aspect TestAspect {

    pointcut gettingMemberCollection(Test t) :
                   target(t) &amp;&amp;
                   get(!public Set&lt;Number+&gt; com.mprv.secsph.*.*) &amp;&amp;
                   !within(TestAspect);

	after (Test test) : gettingMemberCollection(test) {
		System.out.println(&quot;GO Aspects!&quot;);
	}
}

Compiler output:
================
warning at after (Test test) : gettingMemberCollection(test) {
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/IdeaProjects/aspectsTest/src/com/mprv/secsph/TestAspect.aj:19:0::0 advice defined in com.mprv.secsph.TestAspect has not been applied [Xlint:adviceDidNotMatch]


I would expect &quot;gettingMemberCollection&quot; to catch access to &quot;ints&quot; member of &quot;Test&quot; ...

Thanks a lot!
Misha.</column>
            <column name="report_time">2006-01-22 11:12:27</column>
            <column name="report_timestamp">1137950000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">01a8b2e</column>
            <column name="commit_timestamp">1138030000</column>
            <column name="files">tests/bugs151/pr124808/Test.java
tests/bugs151/pr124808/TestAspect.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java
weaver/src/org/aspectj/weaver/patterns/TypePattern.java</column>
            <column name="result">43:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
154:weaver/src/org/aspectj/weaver/patterns/TypePattern.java
195:weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java</column>
        </table>
        <table name="aspectj">
            <column name="id">273</column>
            <column name="bug_id">124803</column>
            <column name="summary">Bug 124803  [generics] mixing and matching numbers of type variables/parameters in a hierarchy</column>
            <column name="description">Hi guys!

I didn't talk to you for a while, but I've found several new issues related to generics. Here is the first and the most annoying one:

1) Just compile the testcase with iajc and you will get &quot;java.lang.IllegalStateException: Wrong number of type parameters supplied&quot;

Java Code:
=========

public interface Generic1&lt;T extends Number&gt; {
	public void foo(T p);
}


public interface Generic2&lt;T extends Number, Y extends Number&gt; extends Generic1&lt;T&gt; {
	public void foo2(Y p);
}

public class Test&lt;Y extends Number&gt; implements Generic2&lt;Y,Y&gt;{
	public void foo2(Y p) {
	}
	public void foo(Y p) {
	}
}


Aspect:
=======

public privileged aspect TestAspect {
	pointcut TestInheritance(Test test) : target(test) &amp;&amp; execution (* com.mprv.secsph.Generic1.*(..));

	after (Test test) : TestInheritance(test) {
		System.out.println(&quot;GO Aspects!&quot;);
	}
}

Exception:
==========
iajc
abort trouble in: 
public class com.mprv.secsph.Test extends java.lang.Object implements com.mprv.secsph.Generic2:
  public void &lt;init&gt;():
                    ALOAD_0     // com.mprv.secsph.Test this   (line 10)
                    INVOKESPECIAL java.lang.Object.&lt;init&gt; ()V
    constructor-execution(void com.mprv.secsph.Test.&lt;init&gt;())
    |               RETURN
    constructor-execution(void com.mprv.secsph.Test.&lt;init&gt;())
  end public void &lt;init&gt;()

  public void foo2(Number)    org.aspectj.weaver.MethodDeclarationLineNumber: 11:259
:
                    RETURN   (line 12)
  end public void foo2(Number)

  public void foo(Number)    org.aspectj.weaver.MethodDeclarationLineNumber: 13:287
:
                    RETURN   (line 14)
  end public void foo(Number)

end public class com.mprv.secsph.Test
 -- (IllegalStateException) Wrong number of type parameters supplied
Wrong number of type parameters supplied
java.lang.IllegalStateException: Wrong number of type parameters supplied
	at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:609)
	at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:590)
	at org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:472)
	at org.aspectj.weaver.ResolvedType.addAndRecurse(ResolvedType.java:262)
	at org.aspectj.weaver.ResolvedType.addAndRecurse(ResolvedType.java:301)
	at org.aspectj.weaver.ResolvedType.getMethodsWithoutIterator(ResolvedType.java:257)
	at org.aspectj.weaver.ResolvedType.lookupResolvedMember(ResolvedType.java:375)
	at org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:177)
	at org.aspectj.weaver.JoinPointSignatureIterator.hasNext(JoinPointSignatureIterator.java:68)
	at org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:286)
	at org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:106)
	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)
	at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:55)
	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)
	at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:55)
	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)
	at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:64)
	at org.aspectj.weaver.Advice.match(Advice.java:109)
	at org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:104)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2149)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1716)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:458)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:105)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)
	at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)
	at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)
	at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:819)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:234)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:157)
	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)
	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)
	at org.aspectj.tools.ajc.Main.run(Main.java:326)
	at org.aspectj.tools.ajc.Main.runMain(Main.java:240)
	at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTask.java:1254)
	at org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1048)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)
	at org.apache.tools.ant.Task.perform(Task.java:364)
	at org.apache.tools.ant.Target.execute(Target.java:341)
	at org.apache.tools.ant.Target.performTasks(Target.java:369)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1216)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1185)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:40)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1068)
	at org.apache.tools.ant.Main.runBuild(Main.java:668)
	at org.apache.tools.ant.Main.startAnt(Main.java:187)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:246)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:67)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at com.intellij.rt.ant.execution.AntMain2.main(AntMain2.java:16)
warning at after (Test test) : TestInheritance(test) {
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/IdeaProjects/aspectsTest/src/com/mprv/secsph/TestAspect.aj:44:0::0 advice defined in com.mprv.secsph.TestAspect has not been applied [Xlint:adviceDidNotMatch]</column>
            <column name="report_time">2006-01-22 09:50:51</column>
            <column name="report_timestamp">1137940000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">8676df9</column>
            <column name="commit_timestamp">1138010000</column>
            <column name="files">tests/bugs151/pr124803/Test.java
tests/bugs151/pr124803/Test2.java
tests/bugs151/pr124803/TestAspect.java
tests/bugs151/pr124803/TestAspect2.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
weaver/src/org/aspectj/weaver/ReferenceType.java</column>
            <column name="result">76:weaver/src/org/aspectj/weaver/ReferenceType.java
167:tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">274</column>
            <column name="bug_id">122347</column>
            <column name="summary">Bug 122347  Contribution: Memory Efficient Expendable Type Map</column>
            <column name="description">Here is a patch for a single file (weaver/src/org/aspectj/weaver/World) that significantly improves the memory footprint of weaves (see details below). I would like help in resolving the one bug that this hit in the AspectJ weaver tests.

It does the following:
* Keeps Weak References to the values in the expendable map to allow evicting them (whereas the Weak Hash Map keeps weak references only to the keys)
* Allows configuring the expendable map to keep hard references to up to N types with -Dorg.aspectj.weaver.World.cacheRetention=number (the current default is 0). It's a nice tuning option so projects can use a bit more memory to avoid evicting types.
* Moves the isExpendible check from the typeMap to the world, to allow different worlds (such as the LTWWorld) to change what's evictable (this lets the LTWWorld not keep references to already defined classes)

This change breaks 3 tests in the &quot;run these tests before checking in code&quot; suite, all of them an NPE in the same line of ReferenceType.getTypeVariables for generic signatures. Presumably this code is implicitly relying on &quot;expendable&quot; types never being evicted. I have attached the error output for all 3 cases.

My initial tests have shown a relatively small performance loss in return for significant memory footprint gains. E.g., using the AspectJ in CVS HEAD with the standard BcelWorld implementation (not LTWWorld) as the world, in Tomcat with the Glassbox Inspector &amp; 4 web apps the AspectJ overhead with this optimization is 48 million heap bytes (of 60 million total heap bytes) versus 61 million bytes using CVS HEAD. 

The optimization has limited benefit for a BcelWorld where almost all the code is exposed to the weaver (since few types are expendible). However, Martin Lippert tried a version of this in his AJEER Eclipse load-time weaving environment and reported a reduction from 230 MB of heap to 30 MB heap used at a cost of a 25% increase in start up time. Likewise, this facility is the major contributor to enabling my other LTW optimizations that can reduce the heap overhead in my test case to 9 million heap bytes (principally having the LTW world allow evicting types that are already woven and using reflective proxies). 

I see similar start up times when using this expendable map in my tests. The ability to increase the number of hard references in cache should provide users an ability to allocate more memory to speed up performance.

Note that the only hard reference to the keys (the signatures) is from the values (at least I haven't noticed any cases in my load-time weaving tests), so the weak hash map is compacting itself properly: when the reference type is weakly reachable, the key is then weakly reachable and the map ultimately purges theses entries.</column>
            <column name="report_time">2005-12-29 18:49:19</column>
            <column name="report_timestamp">1135900000</column>
            <column name="status">resolved wontfix</column>
            <column name="commit">04067a6</column>
            <column name="commit_timestamp">1137610000</column>
            <column name="files">weaver/src/org/aspectj/weaver/World.java
weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</column>
            <column name="result">5:weaver/src/org/aspectj/weaver/World.java
12:weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</column>
        </table>
        <table name="aspectj">
            <column name="id">275</column>
            <column name="bug_id">123612</column>
            <column name="summary">Bug 123612  ArrayIndexOutOfBoundsException with incremental and declare @type</column>
            <column name="description">Given the following code:

-------------------------------------------------
public aspect A {
	declare @type : C : @MyAnnotation;
}
@interface MyAnnotation {	
}

class C {
}
-------------------------------------------------

if you comment out the declare @type statement and do an incremental build, then the following ArrayIndexOutOfBoundsException occurs:

java.lang.ArrayIndexOutOfBoundsException: 0
	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations(AjLookupEnvironment.java:754)
	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:571)
	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes(AjLookupEnvironment.java:357)
	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:209)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:254)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)
	at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
	at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)



This is against the latest code in HEAD.</column>
            <column name="report_time">2006-01-12 11:08:45</column>
            <column name="report_timestamp">1137080000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ab2f89b</column>
            <column name="commit_timestamp">1137510000</column>
            <column name="files">tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java</column>
            <column name="result">32:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
552:weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java</column>
        </table>
        <table name="aspectj">
            <column name="id">276</column>
            <column name="bug_id">58524</column>
            <column name="summary">Bug 58524  ajdoc should not use the Declaration and SymbolManager classes</column>
            <column name="description">In order to speed up porting porting to the old HTML generation code ajdoc 
continues to use the following classes:

  org.aspectj.tools.ajdoc.Declaration
  org.aspectj.tools.ajdoc.SymbolManager

These funtion only as a wrapper to the ASM, and are not needed.  The next 
refactoring effort should get rid of them (and all those static methods as 
well!).</column>
            <column name="report_time">2004-04-14 13:42:37</column>
            <column name="report_timestamp">1081960000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f4c8bf9</column>
            <column name="commit_timestamp">1137430000</column>
            <column name="files">ajdoc/src/org/aspectj/tools/ajdoc/Declaration.java
ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java
ajdoc/src/org/aspectj/tools/ajdoc/Main.java
ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java
ajdoc/src/org/aspectj/tools/ajdoc/SymbolManager.java</column>
            <column name="result">1:ajdoc/src/org/aspectj/tools/ajdoc/SymbolManager.java
2:ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java
5:ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java
8:ajdoc/src/org/aspectj/tools/ajdoc/Main.java
44:ajdoc/src/org/aspectj/tools/ajdoc/Declaration.java</column>
        </table>
        <table name="aspectj">
            <column name="id">277</column>
            <column name="bug_id">122248</column>
            <column name="summary">Bug 122248  BUG for ajdt_1.3_for_eclipse_3.1.zip</column>
            <column name="description">Hi !!
I use ajdt_1.3_for_eclipse_3.1.zip with eclipse 3.1.1 and fick this error when the eclipse try to make the workbrench:


java.lang.IllegalStateException
at org.aspectj.weaver.TypeFactory.createParameterizedType(TypeFactory.java:42)
at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX(BcelGenericSignatureToTypeXConverter.java:82)
at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX(BcelGenericSignatureToTypeXConverter.java:42)
at org.aspectj.weaver.bcel.BcelObjectType.unpackGenericSignature(BcelObjectType.java:657)
at org.aspectj.weaver.bcel.BcelObjectType.getSuperclass(BcelObjectType.java:181)
at org.aspectj.weaver.ReferenceType.getSuperclass(ReferenceType.java:514)
at org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor(BcelWeaver.java:1192)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1047)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

IllegalStateException thrown: Expecting raw type</column>
            <column name="report_time">2005-12-28 09:35:06</column>
            <column name="report_timestamp">1135780000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3f77e75</column>
            <column name="commit_timestamp">1137360000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelField.java
weaver/src/org/aspectj/weaver/bcel/BcelMethod.java
weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java
weaver/testsrc/org/aspectj/weaver/MemberTestCase15.java</column>
            <column name="result">5:weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java
7:weaver/src/org/aspectj/weaver/bcel/BcelField.java
11:weaver/src/org/aspectj/weaver/bcel/BcelMethod.java
532:weaver/testsrc/org/aspectj/weaver/MemberTestCase15.java</column>
        </table>
        <table name="aspectj">
            <column name="id">278</column>
            <column name="bug_id">122417</column>
            <column name="summary">Bug 122417  [waiting-on-website-doc-refresh] Typo in org.aspectj.lang.JoinPoint String constant symbolic name</column>
            <column name="description">Methinks the  n_a_m_e  of the preinitialization constant is misspelled

JoinPoint.PREINTIALIZATION    is lacking an &quot;I&quot; between the N and the T
JoinPoint.PREINITIALIZATION   might be the correct version

Note: The value of the constant (&quot;preinitialization&quot;) is spelled correctly.

Sorry for the inconvenience.
Harald</column>
            <column name="report_time">2005-12-31 05:11:31</column>
            <column name="report_timestamp">1136020000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a9ef1b0</column>
            <column name="commit_timestamp">1136910000</column>
            <column name="files">runtime/src/org/aspectj/lang/JoinPoint.java
weaver/src/org/aspectj/weaver/Shadow.java</column>
            <column name="result">3:runtime/src/org/aspectj/lang/JoinPoint.java
21:weaver/src/org/aspectj/weaver/Shadow.java</column>
        </table>
        <table name="aspectj">
            <column name="id">279</column>
            <column name="bug_id">122458</column>
            <column name="summary">Bug 122458  java.lang.StringIndexOutOfBoundsException when compiling (build no.: 20051220093604)</column>
            <column name="description">This exception occurs using the ajdt eclipse plugin when compiling a project the first time I add the ajdt nature. There are no aspects defined in the project.
I suppose the exception occurs when compiling a class (sorry I can't post the entire source code) with this signature: 

public class FixedWidthParser&lt;T&gt; extends TabularDataParser&lt;T&gt;

The only noticeable things about this class are the presence of an inherited type parameter (and redefined with same name) some custom annotations on methods and a varags on a method parameter, but all of this things are present on other classes in the same project that AspectJ apprently compiles well (I'm not sure about the fact it compiles them).

Hope I helped you with this clues, here's the complete stacktrace.

java.lang.StringIndexOutOfBoundsException
at java.lang.String.substring(Unknown Source)
at org.aspectj.weaver.TypeFactory.createTypeFromSignature(TypeFactory.java:86)
at org.aspectj.weaver.TypeFactory.createTypeFromSignature(TypeFactory.java:116)
at org.aspectj.weaver.UnresolvedType.forSignature(UnresolvedType.java:430)
at org.aspectj.weaver.UnresolvedType.makeArray(UnresolvedType.java:286)
at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding(EclipseFactory.java:214)
at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember(EclipseFactory.java:516)
at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember(EclipseFactory.java:494)
at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember(EclipseFactory.java:451)
at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.genBytecodeInfo(AsmHierarchyBuilder.java:525)
at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit(AsmHierarchyBuilder.java:400)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:185)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1195)
at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:339)
at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild(AsmHierarchyBuilder.java:142)
at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit(AsmHierarchyBuilder.java:82)
at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit(EclipseFactory.java:926)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(AjCompilerAdapter.java:195)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184(CompilerAdapter.aj:89)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:528)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

StringIndexOutOfBoundsException thrown: String index out of range: -2</column>
            <column name="report_time">2006-01-02 12:16:49</column>
            <column name="report_timestamp">1136220000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">24a785f</column>
            <column name="commit_timestamp">1136890000</column>
            <column name="files">weaver/src/org/aspectj/weaver/TypeFactory.java</column>
            <column name="result">115:weaver/src/org/aspectj/weaver/TypeFactory.java</column>
        </table>
        <table name="aspectj">
            <column name="id">280</column>
            <column name="bug_id">112458</column>
            <column name="summary">Bug 112458  Property Editor still shows the properties of layout items when switch to Master page viewer.</column>
            <column name="description">Description:
Property Editor still shows the properties of layout items when switch to 
Master page viewer.

Steps to reproduce:
1. New a report and insert a label.
2. Select the label.(Property Editor shows label's properties)
3. Switch to Master Page.

Expected result:
Property Editor changs to reflect Master Page properties.

Actual result:
It still showed the label's properties. This will confuse customers if they 
thought it as Master Page Editor and set properties without click Master Page 
viewer at first.</column>
            <column name="report_time">2005-10-13 07:31:44</column>
            <column name="report_timestamp">1129200000</column>
            <column name="status">closed fixed</column>
            <column name="commit">53284da</column>
            <column name="commit_timestamp">1136890000</column>
            <column name="files">tests/src/org/aspectj/systemtest/AllTests15.java
tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java
tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java
tests/src/org/aspectj/systemtest/ajc151/AllTestsAspectJ151.java
weaver/src/org/aspectj/weaver/TypeFactory.java</column>
            <column name="result">1000:weaver/src/org/aspectj/weaver/TypeFactory.java
1358:tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java
2093:tests/src/org/aspectj/systemtest/AllTests15.java</column>
        </table>
        <table name="aspectj">
            <column name="id">281</column>
            <column name="bug_id">122728</column>
            <column name="summary">Bug 122728  ajdoc crashes</column>
            <column name="description"></column>
            <column name="report_time">2006-01-05 03:21:00</column>
            <column name="report_timestamp">1136450000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d69ce9a</column>
            <column name="commit_timestamp">1136810000</column>
            <column name="files">ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java
ajdoc/testdata/pr122728/src/pack/ClassWithInnerEnum.java
ajdoc/testdata/pr122728/src/pack/EnumWithMethods.java
ajdoc/testdata/pr122728/src/pack/MyEnum.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/EnumTest.java</column>
            <column name="result">17:ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java
23:ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java</column>
        </table>
        <table name="aspectj">
            <column name="id">282</column>
            <column name="bug_id">121385</column>
            <column name="summary">Bug 121385  around advice does not work when LTW</column>
            <column name="description">I defined a aop.xml and a aspect, I have already copy aspectjweaver.jar D:\work\BTM\lib\aspectjweaver.jar, and added -javaagent:D:\work\BTM\lib\aspectjweaver.jar option to the JVM in Eclipse, it works fine if there are before and after advice in aspect, but it will be wrong once I used around advice. if I use compile-time weaving, this around advice works fine.
my Eclipse env: eclipse 3.0.2 + AJDT 1.2.1 RC1 release + Sun JDK 1.5.0.

aspect file:
import org.aspectj.lang.Signature;
import org.aspectj.lang.JoinPoint;
public abstract aspect World { 
    //private Object result;
	pointcut greeting() : execution(* Hello.sayWorld(..)); 
    
	Object around(): greeting() {
    	System.out.println(&quot;around start!&quot;);
    	Object result = proceed();
    	System.out.println(&quot;around end!&quot;);
    	return result;
	}
    
//    before() : greeting() { 
//    	Signature signature = thisJoinPoint.getSignature();
//        System.out.println(&quot;before &quot; + signature.getName()); 
//    } 
    
//    after() returning () : greeting() { 
//    	Signature signature = thisJoinPoint.getSignature();
//        System.out.println(&quot;after &quot; + signature.getName()); 
//    } 

} 

aop.xml file:
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;aspectj&gt;
	&lt;aspects&gt;
		&lt;aspect name=&quot;World&quot;/&gt;
		&lt;concrete-aspect name=&quot;World1&quot; extends=&quot;World&quot;&gt;
          &lt;pointcut name=&quot;greeting&quot; expression=&quot;execution(* Hello.sayWorld(..)) ||
          execution(* Hello.sayHello(..))&quot;/&gt;
        &lt;/concrete-aspect&gt;
	&lt;/aspects&gt;
	&lt;weaver options=&quot;-Xreweavable -verbose -XlazyTjp -showWeaveInfo&quot;&gt;
		&lt;include within=&quot;Hello&quot;/&gt;
	&lt;/weaver&gt;
&lt;/aspectj&gt;

around advice error message in eclipse console as below:
info register aspect World
info generating class 'World1'
info weaving 'Hello'
info weaver operating in reweavable mode.  Need to verify any required types exist.
abort trouble in: 
public class Hello extends java.lang.Object:
  public void &lt;init&gt;():
                    ALOAD_0     // Hello this   (line 2)
                    INVOKESPECIAL java.lang.Object.&lt;init&gt; ()V
    constructor-execution(void Hello.&lt;init&gt;())
    |               RETURN
    constructor-execution(void Hello.&lt;init&gt;())
  end public void &lt;init&gt;()

  public static void main(String[])    org.aspectj.weaver.MethodDeclarationLineNumber: 7:75
:
                    INVOKESTATIC Hello.sayHello ()V   (line 9)
                    RETURN   (line 10)
  end public static void main(String[])

  public static void sayHello()    org.aspectj.weaver.MethodDeclarationLineNumber: 12:180
:
  end public static void sayHello()

  public static int sayWorld()    org.aspectj.weaver.MethodDeclarationLineNumber: 17:268
:
    method-execution(int Hello.sayWorld())
    |               GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 18)
    |               LDC &quot;World&quot;
    |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V
    |               ICONST_0   (line 19)
    |               IRETURN
    method-execution(int Hello.sayWorld())
  end public static int sayWorld()

  static final void sayHello_aroundBody0():
                    GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 13)
                    LDC &quot;Hello&quot;
                    INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V
                    INVOKESTATIC Hello.sayWorld ()I   (line 14)
                    POP
                    RETURN   (line 15)
  end static final void sayHello_aroundBody0()
end public class Hello

public class Hello$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure:
  public void &lt;init&gt;(Object[]):
                    ALOAD_0
                    ALOAD_1
                    INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.&lt;init&gt; ([Ljava/lang/Object;)V
                    RETURN
  end public void &lt;init&gt;(Object[])

  public Object run(Object[]):
                    ALOAD_0
                    GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object;
                    ASTORE_2
                    INVOKESTATIC Hello.sayHello_aroundBody0 ()V
                    ACONST_NULL
                    ARETURN
  end public Object run(Object[])
end public class Hello$AjcClosure1
 -- (NullPointerException) null
null
java.lang.NullPointerException
	at org.aspectj.weaver.bcel.BcelAdvice.getAdviceArgSetup(BcelAdvice.java:457)
	at org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure(BcelShadow.java:2685)
	at org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:230)
	at org.aspectj.weaver.Shadow.implementMungers(Shadow.java:588)
	at org.aspectj.weaver.Shadow.implement(Shadow.java:405)
	at org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2146)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:467)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)
	at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:263)
	at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:196)
	at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65)
	at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)
	at sun.instrument.TransformerManager.transform(TransformerManager.java:122)
	at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:620)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:56)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:195)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)

Message: abort trouble in: 
public class Hello extends java.lang.Object:
  public void &lt;init&gt;():
                    ALOAD_0     // Hello this   (line 2)
                    INVOKESPECIAL java.lang.Object.&lt;init&gt; ()V
    constructor-execution(void Hello.&lt;init&gt;())
    |               RETURN
    constructor-execution(void Hello.&lt;init&gt;())
  end public void &lt;init&gt;()

  public static void main(String[])    org.aspectj.weaver.MethodDeclarationLineNumber: 7:75
:
                    INVOKESTATIC Hello.sayHello ()V   (line 9)
                    RETURN   (line 10)
  end public static void main(String[])

  public static void sayHello()    org.aspectj.weaver.MethodDeclarationLineNumber: 12:180
:
  end public static void sayHello()

  public static int sayWorld()    org.aspectj.weaver.MethodDeclarationLineNumber: 17:268
:
    method-execution(int Hello.sayWorld())
    |               GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 18)
    |               LDC &quot;World&quot;
    |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V
    |               ICONST_0   (line 19)
    |               IRETURN
    method-execution(int Hello.sayWorld())
  end public static int sayWorld()

  static final void sayHello_aroundBody0():
                    GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 13)
                    LDC &quot;Hello&quot;
                    INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V
                    INVOKESTATIC Hello.sayWorld ()I   (line 14)
                    POP
                    RETURN   (line 15)
  end static final void sayHello_aroundBody0()
end public class Hello

public class Hello$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure:
  public void &lt;init&gt;(Object[]):
                    ALOAD_0
                    ALOAD_1
                    INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.&lt;init&gt; ([Ljava/lang/Object;)V
                    RETURN
  end public void &lt;init&gt;(Object[])

  public Object run(Object[]):
                    ALOAD_0
                    GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object;
                    ASTORE_2
                    INVOKESTATIC Hello.sayHello_aroundBody0 ()V
                    ACONST_NULL
                    ARETURN
  end public Object run(Object[])
end public class Hello$AjcClosure1
 -- (NullPointerException) null
null
java.lang.NullPointerException
	at org.aspectj.weaver.bcel.BcelAdvice.getAdviceArgSetup(BcelAdvice.java:457)
	at org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure(BcelShadow.java:2685)
	at org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:230)
	at org.aspectj.weaver.Shadow.implementMungers(Shadow.java:588)
	at org.aspectj.weaver.Shadow.implement(Shadow.java:405)
	at org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2146)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:467)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)
	at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:263)
	at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:196)
	at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65)
	at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)
	at sun.instrument.TransformerManager.transform(TransformerManager.java:122)
	at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:620)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:56)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:195)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)

org.aspectj.bridge.AbortException: trouble in: 
public class Hello extends java.lang.Object:
  public void &lt;init&gt;():
                    ALOAD_0     // Hello this   (line 2)
                    INVOKESPECIAL java.lang.Object.&lt;init&gt; ()V
    constructor-execution(void Hello.&lt;init&gt;())
    |               RETURN
    constructor-execution(void Hello.&lt;init&gt;())
  end public void &lt;init&gt;()

  public static void main(String[])    org.aspectj.weaver.MethodDeclarationLineNumber: 7:75
:
                    INVOKESTATIC Hello.sayHello ()V   (line 9)
                    RETURN   (line 10)
  end public static void main(String[])

  public static void sayHello()    org.aspectj.weaver.MethodDeclarationLineNumber: 12:180
:
  end public static void sayHello()

  public static int sayWorld()    org.aspectj.weaver.MethodDeclarationLineNumber: 17:268
:
    method-execution(int Hello.sayWorld())
    |               GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 18)
    |               LDC &quot;World&quot;
    |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V
    |               ICONST_0   (line 19)
    |               IRETURN
    method-execution(int Hello.sayWorld())
  end public static int sayWorld()

  static final void sayHello_aroundBody0():
                    GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 13)
                    LDC &quot;Hello&quot;
                    INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V
                    INVOKESTATIC Hello.sayWorld ()I   (line 14)
                    POP
                    RETURN   (line 15)
  end static final void sayHello_aroundBody0()
end public class Hello

public class Hello$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure:
  public void &lt;init&gt;(Object[]):
                    ALOAD_0
                    ALOAD_1
                    INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.&lt;init&gt; ([Ljava/lang/Object;)V
                    RETURN
  end public void &lt;init&gt;(Object[])

  public Object run(Object[]):
                    ALOAD_0
                    GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object;
                    ASTORE_2
                    INVOKESTATIC Hello.sayHello_aroundBody0 ()V
                    ACONST_NULL
                    ARETURN
  end public Object run(Object[])
end public class Hello$AjcClosure1

	at org.aspectj.bridge.MessageWriter.handleMessage(MessageWriter.java:47)
	at org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage(WeavingAdaptor.java:395)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1554)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)
	at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:263)
	at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:196)
	at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65)
	at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)
	at sun.instrument.TransformerManager.transform(TransformerManager.java:122)
	at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:620)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:56)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:195)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)
Hello
World</column>
            <column name="report_time">2005-12-19 05:32:32</column>
            <column name="report_timestamp">1134990000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a778ac4</column>
            <column name="commit_timestamp">1135190000</column>
            <column name="files">tests/bugs150/pr121385/A.java
tests/bugs150/pr121385/Hello.java
tests/bugs150/pr121385/WorldAt.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result">2:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
4:weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
6:weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</column>
        </table>
        <table name="aspectj">
            <column name="id">283</column>
            <column name="bug_id">58520</column>
            <column name="summary">Bug 58520  ajdoc doesn't navigate to target details in some cases</column>
            <column name="description">When a file is advised, javadoc uses the following naming convention for 
setting its &quot;A NAME&quot;:

  convertCheckedException(java.lang.Throwable)

However, ajdoc uses the unqualified name for the argument, resuting in the 
follwing in-file anchor link:

  &lt;class-name&gt;.html#convertCheckedException(Throwable) 

Which fails to navigate to the anchor within the file, although it does always 
go to the right file.</column>
            <column name="report_time">2004-04-14 13:29:14</column>
            <column name="report_timestamp">1081960000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">bbdd496</column>
            <column name="commit_timestamp">1135160000</column>
            <column name="files">ajdoc/testdata/pr119453/src/pack/C.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/FullyQualifiedArgumentTest.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</column>
            <column name="result">38:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java
81:ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java
656:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java
2353:ajdoc/testdata/pr119453/src/pack/C.java</column>
        </table>
        <table name="aspectj">
            <column name="id">284</column>
            <column name="bug_id">120909</column>
            <column name="summary">Bug 120909  Test failures using IBM Java 5</column>
            <column name="description">1. ReflectionBasedReferenceTypeDelegateTest.testCompareSubclassDelegates() 

junit.framework.AssertionFailedError: Errors:Couldn't find void java.util.HashMap.onEntry() in the bcel set 
Couldn't find void java.util.HashMap.onExit() in the bcel set 
Couldn't find void java.util.HashMap.transfer0(java.util.HashMap$Entry[]) in the bcel set 

        at junit.framework.Assert.fail(Assert.java:47) 
        at junit.framework.Assert.assertTrue(Assert.java:20) 
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateTest.testCompareSubclassDelegates(ReflectionBasedReferenceTypeDelegateTest.java:278) 
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) 
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 
        at java.lang.reflect.Method.invoke(Method.java:615) 
        at junit.framework.TestCase.runTest(TestCase.java:154) 
        at junit.framework.TestCase.runBare(TestCase.java:127) 
        at junit.framework.TestResult$1.protect(TestResult.java:106) 
        at junit.framework.TestResult.runProtected(TestResult.java:124) 
        at junit.framework.TestResult.run(TestResult.java:109) 
        at junit.framework.TestCase.run(TestCase.java:118) 
        at junit.framework.TestSuite.runTest(TestSuite.java:208) 
        at junit.framework.TestSuite.run(TestSuite.java:203) 
        at junit.framework.TestSuite.runTest(TestSuite.java:208) 
        at junit.framework.TestSuite.run(TestSuite.java:203) 
        at junit.framework.TestSuite.runTest(TestSuite.java:208) 
        at junit.framework.TestSuite.run(TestSuite.java:203) 
        at junit.framework.TestSuite.runTest(TestSuite.java:208) 
        at junit.framework.TestSuite.run(TestSuite.java:203) 
        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) 
        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) 
        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) 

This failure occures because when we compare BeclWorld with ReflectionWorld we are still picking up the default (Sun) version of HashMap in JRE15_LIB for BCEL. The solution is to create both worlds with the same class loader.

2. Ajc150Tests.testModifierOverrides() 

junit.framework.AssertionFailedError: Expecting output: 
execution(void pr119749.C.m()): execMe[@pr119749$Me()] 
execution(void pr119749.C.m()): execEx 
But found output: 
execution(void pr119749.C.m()): execMe[@pr119749.Me()] 
execution(void pr119749.C.m()): execEx 

First difference is on line 1 

        at junit.framework.Assert.fail(Assert.java:47) 
        at org.aspectj.testing.OutputSpec.matchAgainst(OutputSpec.java:58) 
        at org.aspectj.testing.RunSpec.execute(RunSpec.java:61) 
        at org.aspectj.testing.AjcTest.runTest(AjcTest.java:68) 
        at org.aspectj.testing.XMLBasedAjcTestCase.runTest(XMLBasedAjcTestCase.java:111) 
        at org.aspectj.systemtest.ajc150.Ajc150Tests.testModifierOverrides(Ajc150Tests.java:852) 
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) 
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 
        at java.lang.reflect.Method.invoke(Method.java:615) 
        at junit.framework.TestCase.runTest(TestCase.java:154) 
        at junit.framework.TestCase.runBare(TestCase.java:127) 
        at junit.framework.TestResult$1.protect(TestResult.java:106) 
        at junit.framework.TestResult.runProtected(TestResult.java:124) 
        at junit.framework.TestResult.run(TestResult.java:109) 
        at junit.framework.TestCase.run(TestCase.java:118) 
        at junit.framework.TestSuite.runTest(TestSuite.java:208) 
        at junit.framework.TestSuite.run(TestSuite.java:203) 
        at junit.framework.TestSuite.runTest(TestSuite.java:208) 
        at junit.framework.TestSuite.run(TestSuite.java:203) 
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) 
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19) 
        at junit.framework.TestResult.runProtected(TestResult.java:124) 
        at junit.extensions.TestSetup.run(TestSetup.java:23) 
        at junit.framework.TestSuite.runTest(TestSuite.java:208) 
        at junit.framework.TestSuite.run(TestSuite.java:203) 
        at junit.framework.TestSuite.runTest(TestSuite.java:208) 
        at junit.framework.TestSuite.run(TestSuite.java:203) 
        at junit.framework.TestSuite.runTest(TestSuite.java:208) 
        at junit.framework.TestSuite.run(TestSuite.java:203) 
        at junit.framework.TestSuite.runTest(TestSuite.java:208) 
        at junit.framework.TestSuite.run(TestSuite.java:203) 
        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) 
        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) 
        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) 

This failure is due a difference between JDKs in the implementation of toString() for annotations.</column>
            <column name="report_time">2005-12-14 11:58:04</column>
            <column name="report_timestamp">1134580000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9abfc40</column>
            <column name="commit_timestamp">1134660000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java
weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java
weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java
weaver/testsrc/org/aspectj/weaver/reflect/ReflectionWorldTest.java</column>
            <column name="result">2:weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java
16:weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java
80:weaver/testsrc/org/aspectj/weaver/reflect/ReflectionWorldTest.java
461:loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java</column>
        </table>
        <table name="aspectj">
            <column name="id">285</column>
            <column name="bug_id">120743</column>
            <column name="summary">Bug 120743  Improvements to define new server wizard page</column>
            <column name="description">On the panel where the server location and button to install the server is shown, a couple of usability improvements could be made...

(1) If I choose browse and choose a location.  Then hit install server, the fs browser should not be brought back up since I have already hitten browse and selected a location.

(2) If (1) and the location chosen contains no server, and the server is downlodable, classpath validation errors should not show, but a message stating that no server is found but can be installed by selecting the install server button.</column>
            <column name="report_time">2005-12-13 16:15:50</column>
            <column name="report_timestamp">1134510000</column>
            <column name="status">closed wontfix</column>
            <column name="commit">588e7b9</column>
            <column name="commit_timestamp">1134510000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/Aj.java</column>
            <column name="result">204:loadtime/src/org/aspectj/weaver/loadtime/Aj.java</column>
        </table>
        <table name="aspectj">
            <column name="id">286</column>
            <column name="bug_id">120693</column>
            <column name="summary">Bug 120693  Contribution: More Efficient Lint Warnings: ~15% Performance Increase</column>
            <column name="description">In profiling a load-time weaving configuration from HEAD, I found that 9% of total time (over 10% of weaving time) is spent in org.aspectj.weaver.Lint.clearSuppressions(), mostly from use inside BcelClassWeaver.match

I made a small change in the parts of BcelAdvice that clear suppressions to save the list that was cleared and to only clear these. This alone saves about 15% of total CPU time in start up on my sample configuration.</column>
            <column name="report_time">2005-12-13 15:03:54</column>
            <column name="report_timestamp">1134500000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">bdafe31</column>
            <column name="commit_timestamp">1134510000</column>
            <column name="files">weaver/src/org/aspectj/weaver/Lint.java
weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
2:weaver/src/org/aspectj/weaver/Lint.java</column>
        </table>
        <table name="aspectj">
            <column name="id">287</column>
            <column name="bug_id">120543</column>
            <column name="summary">Bug 120543  Issue version message during load-time weaving</column>
            <column name="description">It would be very useful to know exactly which version of the weaver is being used for LTW. An informational message could be issued when each WeavingAdaptor instance is created (it is possible to have multiple versions of AspectJ in a system). This message could be similar to the that issued by &quot;ajc -version&quot;.</column>
            <column name="report_time">2005-12-13 06:40:30</column>
            <column name="report_timestamp">1134470000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9d32b76</column>
            <column name="commit_timestamp">1134480000</column>
            <column name="files">weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</column>
        </table>
        <table name="aspectj">
            <column name="id">288</column>
            <column name="bug_id">120521</column>
            <column name="summary">Bug 120521  named pointcut not resolved in pertarget pointcut</column>
            <column name="description">Get incorrect error &quot;can't find pointcut ...&quot; when declaring pertarget pointcut using pointcut declared outside the aspect.  

True of HEAD right now.  Not true of pointcuts declared inside the aspect or issingleton aspects.

I thought this was reported and fixed, but I couldn't find the bug.  Sorry if it is a duplicate.

-------------------------------------------------
package bugs;

public class PerTargetSubaspectError {
	public static void main(String[] args) {
		C.run();
	}
	static class C {
		static void run() {}
	}
	pointcut doit() : execution(void C.run());

	// no error if not pertarget
	static aspect CPT pertarget(pc()){ 
                // no error if doit() defined in CPT
		protected pointcut pc() : doit(); // unexpected CE
		before() : doit() {} // no CE
	}
}</column>
            <column name="report_time">2005-12-13 03:18:43</column>
            <column name="report_timestamp">1134460000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ae500c6</column>
            <column name="commit_timestamp">1134470000</column>
            <column name="files">tests/bugs150/pr120521/PerTargetSubaspectError.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">289</column>
            <column name="bug_id">120401</column>
            <column name="summary">Bug 120401  add signature to UnresolvedType.parameterize(..) exception</column>
            <column name="description">I keep getting UnresolvedType UnsupportedOperationException unhelpful message &quot;resolve this type first,&quot; so I'm adding the signature to the message (without permission, hence the bug as notice).

throw new UnsupportedOperationException(&quot;unable to parameterize unresolved type: &quot; + signature);


-------------------------------
java.lang.UnsupportedOperationException
at org.aspectj.weaver.UnresolvedType.parameterize(UnresolvedType.java:218)
at org.aspectj.weaver.patterns.ExactTypePattern.parameterizeWith(ExactTypePattern.java:242)
at org.aspectj.weaver.patterns.TypePatternList.parameterizeWith(TypePatternList.java:195)
at org.aspectj.weaver.patterns.DeclareParents.parameterizeWith(DeclareParents.java:77)
at org.aspectj.weaver.ReferenceType.getDeclares(ReferenceType.java:484)
at org.aspectj.weaver.ResolvedType.collectDeclares(ResolvedType.java:523)
at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers(ResolvedType.java:488)
at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:60)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures(AjLookupEnvironment.java:378)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures(AjLookupEnvironment.java:388)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares(AjLookupEnvironment.java:314)
at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:168)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:185)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

UnsupportedOperationException thrown: resolve this type first</column>
            <column name="report_time">2005-12-12 12:11:27</column>
            <column name="report_timestamp">1134410000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3ac4627</column>
            <column name="commit_timestamp">1134410000</column>
            <column name="files">weaver/src/org/aspectj/weaver/UnresolvedType.java</column>
            <column name="result">34:weaver/src/org/aspectj/weaver/UnresolvedType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">290</column>
            <column name="bug_id">120363</column>
            <column name="summary">Bug 120363  LTW weaver include and exclude does not behave correctly</column>
            <column name="description"></column>
            <column name="report_time">2005-12-12 08:42:34</column>
            <column name="report_timestamp">1134400000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9edb4b6</column>
            <column name="commit_timestamp">1134400000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
tests/java5/ataspectj/ataspectj/Test$$EnhancerByCGLIB$$12345.java
tests/java5/ataspectj/com/foo/bar/Test$$EnhancerByCGLIB$$12345.java
tests/java5/ataspectj/com/foo/bar/Test.java
tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</column>
            <column name="result">6:tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java
7:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</column>
        </table>
        <table name="aspectj">
            <column name="id">291</column>
            <column name="bug_id">120351</column>
            <column name="summary">Bug 120351  cflowbelow issue when binding, in @AJ</column>
            <column name="description"></column>
            <column name="report_time">2005-12-12 05:17:15</column>
            <column name="report_timestamp">1134380000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">979124d</column>
            <column name="commit_timestamp">1134380000</column>
            <column name="files">tests/java5/ataspectj/ataspectj/bugs/CflowBelowStackTest.java
tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java
weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result">26:weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
84:tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java
118:weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
        </table>
        <table name="aspectj">
            <column name="id">292</column>
            <column name="bug_id">119451</column>
            <column name="summary">Bug 119451  AJDoc produces incorrect warning for package accessed aspects</column>
            <column name="description"></column>
            <column name="report_time">2005-12-06 12:39:40</column>
            <column name="report_timestamp">1133890000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5f8d2cd</column>
            <column name="commit_timestamp">1134120000</column>
            <column name="files">ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java
ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</column>
            <column name="result">33:ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java
72:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java
219:ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java</column>
        </table>
        <table name="aspectj">
            <column name="id">293</column>
            <column name="bug_id">119353</column>
            <column name="summary">Bug 119353  Inconsistent Implementations of ReferenceType.getDeclaredMethods()</column>
            <column name="description">I am running into a problem in load-time weaving when I use reflection delegates because the weaver is generating an incorrect bridge method when I perform an inter-type declaration on Struts.ActionServlet for the init method. On investigation, the BCEL world is recognizing this as an overriding method, because its version of getDeclaredMethods is returning the declared methods for all ancestor superclasses. However, the reflection world is returning only the declared methods for this one class. It therefore appears that the weaver expects getDeclaredMethods to return all of them (making the name quite misleading). I think previously the method was being implemented inconsistently between 1.5 reflection and &lt;1.5 reflection delegates. But it looks like it needs to be handled consistently to include all superclass methods.

However, I dont know what other places (e.g., the MAP) are really expecting getDeclaredMethods and its siblings to behave like Java reflection's version...

I started work on adding a getAllDeclaredMethods method to ReferenceType and delegates, as an alternative to provide the weaver the ability to check method overriding as in this case, but it's a little bit involved and I wanted to flag the issue first.

Here's a test that fails and illustrates the issue:
Index: ReflectionBasedReferenceTypeDelegateTest.java
===================================================================
RCS file: /home/technology/org.aspectj/modules/weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java,v
retrieving revision 1.5
diff -u -r1.5 ReflectionBasedReferenceTypeDelegateTest.java
--- ReflectionBasedReferenceTypeDelegateTest.java	28 Nov 2005 17:44:40 -0000	1.5
+++ ReflectionBasedReferenceTypeDelegateTest.java	6 Dec 2005 04:11:41 -0000
@@ -238,6 +238,18 @@
         assertTrue(&quot;Superclass for Map generic type should be Object but was &quot;+rt2,rt2.equals(UnresolvedType.OBJECT));         
     }
     
+    public void testCompareSubclassDelegates() {
+        world.setBehaveInJava5Way(true);
+        
+        BcelWorld bcelWorld = new BcelWorld();
+        bcelWorld.setBehaveInJava5Way(true);
+        UnresolvedType javaUtilHashMap = UnresolvedType.forName(&quot;java.util.HashMap&quot;);
+        ReferenceType rawType = (ReferenceType)bcelWorld.resolve(javaUtilHashMap );
+        
+        ReferenceType rawReflectType = (ReferenceType)world.resolve(javaUtilHashMap );
+        assertEquals(rawType.getDelegate().getDeclaredMethods().length, rawReflectType.getDelegate().getDeclaredMethods().length);
+    }
+    
 	// todo: array of int	
 
 	protected void setUp() throws Exception {


This results in:
junit.framework.AssertionFailedError: expected:&lt;41&gt; but was:&lt;29&gt;
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.failNotEquals(Assert.java:282)
	at junit.framework.Assert.assertEquals(Assert.java:64)
	at junit.framework.Assert.assertEquals(Assert.java:201)
	at junit.framework.Assert.assertEquals(Assert.java:207)
	at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateTest.testCompareSubclassDelegates(ReflectionBasedReferenceTypeDelegateTest.java:250)
	at java.lang.reflect.Method.invoke(Native Method)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)</column>
            <column name="report_time">2005-12-05 23:11:15</column>
            <column name="report_timestamp">1133840000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b52515f</column>
            <column name="commit_timestamp">1134120000</column>
            <column name="files">weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java
weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java
weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</column>
            <column name="result">2:weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java
8:weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java
23:weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java</column>
        </table>
        <table name="aspectj">
            <column name="id">294</column>
            <column name="bug_id">109614</column>
            <column name="summary">Bug 109614  [waiting-on-build] [iajc.task] java.lang.RuntimeException: Ranges must be updated with an enclosing instructionList</column>
            <column name="description"></column>
            <column name="report_time">2005-09-15 09:57:46</column>
            <column name="report_timestamp">1126790000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">94159f9</column>
            <column name="commit_timestamp">1134040000</column>
            <column name="files">tests/bugs150/pr109614.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result">3:weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
5:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">295</column>
            <column name="bug_id">119352</column>
            <column name="summary">Bug 119352  AjType.getSupertype breaks for null</column>
            <column name="description">I ran into this while using reflection proxies with LTW... See attached patches for these test cases and my fix:

	public void testObjectSupertype() {
		AjType&lt;?&gt; objectSuper = AjTypeSystem.getAjType(Object.class).getSupertype();
		assertNull(objectSuper);		
	}

	public void testInterfaceSupertype() {
		AjType&lt;?&gt; serializableSuper = AjTypeSystem.getAjType(Serializable.class).getSupertype();
		assertNull(serializableSuper);		
	}
	
	public AjType&lt;? super T&gt; getSupertype() {
		Class&lt;? super T&gt; superclass = clazz.getSuperclass();
		return superclass==null ? null : (AjType&lt;? super T&gt;) new AjTypeImpl(superclass);
	}</column>
            <column name="report_time">2005-12-05 23:04:42</column>
            <column name="report_timestamp">1133840000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6e8bf52</column>
            <column name="commit_timestamp">1133880000</column>
            <column name="files">aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java
aspectj5rt/java5-testsrc/org/aspectj/internal/lang/reflect/AjTypeTests.java</column>
            <column name="result">1:aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java
3:aspectj5rt/java5-testsrc/org/aspectj/internal/lang/reflect/AjTypeTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">296</column>
            <column name="bug_id">118715</column>
            <column name="summary">Bug 118715  Load Time Weaving wipes out Xlint files if no Xlint values</column>
            <column name="description">In ClassLoaderWeavingAdaptor if weaverOption.lint is null, then a loaded Xlint properties file gets overwritten by the default Xlint properties. See attached patch to fix this problem.</column>
            <column name="report_time">2005-11-30 16:53:40</column>
            <column name="report_timestamp">1133390000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">1e1bbb3</column>
            <column name="commit_timestamp">1133870000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
testing/newsrc/org/aspectj/testing/OutputSpec.java
testing/newsrc/org/aspectj/testing/RunSpec.java
testing/newsrc/org/aspectj/testing/XMLBasedAjcTestCase.java
tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java
weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java
weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</column>
            <column name="result">1:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
2:weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java
38:tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java
120:weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java
251:testing/newsrc/org/aspectj/testing/RunSpec.java
494:testing/newsrc/org/aspectj/testing/XMLBasedAjcTestCase.java
2155:testing/newsrc/org/aspectj/testing/OutputSpec.java</column>
        </table>
        <table name="aspectj">
            <column name="id">297</column>
            <column name="bug_id">118149</column>
            <column name="summary">Bug 118149  AspectJ compiler crahses possibly due to poincut context binding issue</column>
            <column name="description">I am using the latest version of AJDT (1.3.0.20051125115230).


The reason is not entirely clear, but I have a pointcut of form 
    public pointcut realPC(Common entity)
    	: pc1(entity) || pc2(entity);

Just a few hours back, I used to get an error regarding incompatible binding
of entity in the || poincut. When I got that error, Eclipse was frozen to the 
point that clicking &quot;Details&quot; on exception report made Eclipse hang and 
had to kill it using the task manager. So I modified the program to avoid
|| expression in pointcut, after unsuccessfully trying various ways to 
express the pointcut. It was an ugly thing to do, since I essentially had to 
duplicate the advice for both pointcuts. Anyway...

Then I tried to reproduce on a smaller project to provide a minimal
program to reproduced the bug. However, it worked just fine on that project
(and I couldn't see any material difference in the pointcuts or the classes
involved). Encouraged by this, I retried the or-ed version of the pointcut
on the real project. This time, I get the crash and can acccess the stack
trace.

java.lang.NullPointerException
at org.aspectj.weaver.ast.Test.makeInstanceof(Test.java:78)
at org.aspectj.weaver.patterns.IfPointcut.findResidueInternal(IfPointcut.java:181)
at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)
at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:97)
at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)
at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:97)
at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)
at org.aspectj.weaver.patterns.OrPointcut.findResidueInternal(OrPointcut.java:99)
at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)
at org.aspectj.weaver.patterns.OrPointcut.findResidueInternal(OrPointcut.java:99)
at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)
at org.aspectj.weaver.bcel.BcelAdvice.specializeOn(BcelAdvice.java:133)
at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers(BcelShadow.java:308)
at org.aspectj.weaver.Shadow.implement(Shadow.java:404)
at org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2146)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:467)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1534)
at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1485)
at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1266)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1088)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)
at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:809)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

trouble in: 
public abstract class com.aspectivity.mgmt.web.entity.ManageEntity extends com.aspectivity.mgmt.web.TemplatePage:
  public void &lt;init&gt;(com.aspectivity.mgmt.model.Entity, boolean, String, String, String, String, String)    org.aspectj.weaver.MethodDeclarationLineNumber: 19:557
:
                    ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 19)
                    INVOKESPECIAL com.aspectivity.mgmt.web.TemplatePage.&lt;init&gt; ()V
                    ALOAD_1
                    ASTORE 9
                    ILOAD_2
                    ISTORE 10
                    ALOAD_3
                    ASTORE 11
                    ALOAD 4
                    ASTORE 12
                    ALOAD 5
                    ASTORE 13
                    ALOAD 6
                    ASTORE 14
                    ALOAD 7
                    ASTORE 15
    constructor-execution(void com.aspectivity.mgmt.web.entity.ManageEntity.&lt;init&gt;(com.aspectivity.mgmt.model.Entity, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String))
    |               ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 23)
    |               ALOAD_3     // java.lang.String pageTitle
    |               INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.setPageTitle (Ljava/lang/String;)V
    |               ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 25)
    |               ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this
    |               ALOAD_1     // com.aspectivity.mgmt.model.Entity entity
    |               ALOAD 5     // java.lang.String addEntityLinkText
    |               INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.getEntitiesListView (Lcom/aspectivity/mgmt/model/Entity;Ljava/lang/String;)Lwicket/markup/html/list/ListView;
    |               INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.add (Lwicket/Component;)Lwicket/MarkupContainer;
    |               POP
    |               ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 27)
    |               LDC &quot;addEntityLink&quot;
    |               ACONST_NULL
    |               INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.getEditLink (Ljava/lang/String;Lcom/aspectivity/mgmt/model/Entity;)Lwicket/markup/html/link/Link;
    |               ASTORE 8
    |               ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 28)
    |               ALOAD 8     // wicket.markup.html.link.Link addEntityLink
    |               INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.add (Lwicket/Component;)Lwicket/MarkupContainer;
    |               POP
    |               ALOAD 8     // wicket.markup.html.link.Link addEntityLink   (line 29)
    |               NEW wicket.markup.html.basic.Label
    |               DUP
    |               LDC &quot;addEntityLinkText&quot;
    |               ALOAD 5     // java.lang.String addEntityLinkText
    |               INVOKESPECIAL wicket.markup.html.basic.Label.&lt;init&gt; (Ljava/lang/String;Ljava/lang/String;)V
    |               INVOKEVIRTUAL wicket.markup.html.link.Link.add (Lwicket/Component;)Lwicket/MarkupContainer;
    |               POP
    |               ILOAD_2     // boolean isInitialView   (line 31)
    |               IFEQ L0
    |               ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 32)
    |               NEW wicket.markup.html.basic.Label
    |               DUP
    |               LDC &quot;editEntity&quot;
    |               LDC &quot;&quot;
    |               INVOKESPECIAL wicket.markup.html.basic.Label.&lt;init&gt; (Ljava/lang/String;Ljava/lang/String;)V
    |               INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.add (Lwicket/Component;)Lwicket/MarkupContainer;
    |               POP
    |               GOTO L1
    |           L0: ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 34)
    |               ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this
    |               ALOAD_1     // com.aspectivity.mgmt.model.Entity entity
    |               ILOAD_2     // boolean isInitialView
    |               ALOAD 6     // java.lang.String addPanelTtile
    |               ALOAD 7     // java.lang.String editPanelTitle
    |               INVOKESPECIAL com.aspectivity.mgmt.web.entity.ManageEntity.getEditPanel (Lcom/aspectivity/mgmt/model/Entity;ZLjava/lang/String;Ljava/lang/String;)Lwicket/Component;
    |               INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.add (Lwicket/Component;)Lwicket/MarkupContainer;
    |               POP
    |           L1: ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 37)
    |               NEW wicket.markup.html.basic.Label
    |               DUP
    |               LDC &quot;listViewTitle&quot;
    |               ALOAD 4     // java.lang.String listViewTitle
    |               INVOKESPECIAL wicket.markup.html.basic.Label.&lt;init&gt; (Ljava/lang/String;Ljava/lang/String;)V
    |               INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.add (Lwicket/Component;)Lwicket/MarkupContainer;
    |               POP
    |               RETURN   (line 38)
    constructor-execution(void com.aspectivity.mgmt.web.entity.ManageEntity.&lt;init&gt;(com.aspectivity.mgmt.model.Entity, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String))
  end public void &lt;init&gt;(com.aspectivity.mgmt.model.Entity, boolean, String, String, String, String, String)

  protected abstract com.aspectivity.mgmt.model.Entity createNewEntity()    org.aspectj.weaver.MethodDeclarationLineNumber: 40:1233
;

  protected abstract void removeEntity(com.aspectivity.mgmt.model.Entity)    org.aspectj.weaver.MethodDeclarationLineNumber: 41:1278
;

  protected abstract java.util.List getAllEntities()    org.aspectj.weaver.MethodDeclarationLineNumber: 42:1351
;

  protected abstract com.aspectivity.mgmt.web.entity.ManageEntity createNewPage(com.aspectivity.mgmt.model.Entity, boolean)    org.aspectj.weaver.MethodDeclarationLineNumber: 44:1406
;

  protected abstract wicket.Component createEditPanel(String, String, com.aspectivity.mgmt.model.Entity)    org.aspectj.weaver.MethodDeclarationLineNumber: 45:1490
;

  protected wicket.markup.html.list.ListView getEntitiesListView(com.aspectivity.mgmt.model.Entity, String)    org.aspectj.weaver.MethodDeclarationLineNumber: 47:1581
:
                    NEW com.aspectivity.mgmt.web.entity.EntityListView   (line 48)
                    DUP
                    ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this
                    LDC &quot;entityList&quot;
                    ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this
                    INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.getAllEntities ()Ljava/util/List;
                    ALOAD_1     // com.aspectivity.mgmt.model.Entity entity
                    INVOKESPECIAL com.aspectivity.mgmt.web.entity.EntityListView.&lt;init&gt; (Lcom/aspectivity/mgmt/web/entity/ManageEntity;Ljava/lang/String;Ljava/util/List;Lcom/aspectivity/mgmt/model/Entity;)V
                    ARETURN
  end protected wicket.markup.html.list.ListView getEntitiesListView(com.aspectivity.mgmt.model.Entity, String)

  protected wicket.markup.html.link.Link getEditLink(String, com.aspectivity.mgmt.model.Entity)    org.aspectj.weaver.MethodDeclarationLineNumber: 51:1743
:
                    NEW wicket.markup.html.link.PageLink   (line 52)
                    DUP
                    ALOAD_1     // java.lang.String name
                    NEW com.aspectivity.mgmt.web.entity.ManageEntity$1
                    DUP
                    ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this
                    ALOAD_2     // com.aspectivity.mgmt.model.Entity entity
                    INVOKESPECIAL com.aspectivity.mgmt.web.entity.ManageEntity$1.&lt;init&gt; (Lcom/aspectivity/mgmt/web/entity/ManageEntity;Lcom/aspectivity/mgmt/model/Entity;)V
                    INVOKESPECIAL wicket.markup.html.link.PageLink.&lt;init&gt; (Ljava/lang/String;Lwicket/markup/html/link/IPageLink;)V
                    ARETURN
  end protected wicket.markup.html.link.Link getEditLink(String, com.aspectivity.mgmt.model.Entity)

  protected wicket.markup.html.link.Link getRemoveLink(String, wicket.markup.html.list.ListItem)    org.aspectj.weaver.MethodDeclarationLineNumber: 63:2013
:
                    NEW com.aspectivity.mgmt.web.entity.ManageEntity$2   (line 64)
                    DUP
                    ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this
                    ALOAD_1     // java.lang.String id
                    ALOAD_2     // wicket.markup.html.list.ListItem item
                    INVOKESPECIAL com.aspectivity.mgmt.web.entity.ManageEntity$2.&lt;init&gt; (Lcom/aspectivity/mgmt/web/entity/ManageEntity;Ljava/lang/String;Lwicket/markup/html/list/ListItem;)V
                    ARETURN
  end protected wicket.markup.html.link.Link getRemoveLink(String, wicket.markup.html.list.ListItem)

  private wicket.Component getEditPanel(com.aspectivity.mgmt.model.Entity, boolean, String, String)    org.aspectj.weaver.MethodDeclarationLineNumber: 75:2376
:
                    ALOAD_1     // com.aspectivity.mgmt.model.Entity entity   (line 77)
                    IFNONNULL L0
                    ALOAD_3     // java.lang.String addPanelTtile
                    GOTO L1
                L0: ALOAD 4     // java.lang.String editPanelTitle
                L1: ASTORE 5
                    ALOAD_1     // com.aspectivity.mgmt.model.Entity entity   (line 78)
                    IFNONNULL L2
                    ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 79)
                    INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.createNewEntity ()Lcom/aspectivity/mgmt/model/Entity;
                    ASTORE_1     // com.aspectivity.mgmt.model.Entity entity
                L2: ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 81)
                    LDC &quot;editEntity&quot;
                    ALOAD 5     // java.lang.String panelTitle
                    ALOAD_1     // com.aspectivity.mgmt.model.Entity entity
                    INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.createEditPanel (Ljava/lang/String;Ljava/lang/String;Lcom/aspectivity/mgmt/model/Entity;)Lwicket/Component;
                    ARETURN
  end private wicket.Component getEditPanel(com.aspectivity.mgmt.model.Entity, boolean, String, String)

end public abstract class com.aspectivity.mgmt.web.entity.ManageEntity

when implementing on shadow constructor-execution(void com.aspectivity.mgmt.web.entity.ManageEntity.&lt;init&gt;(com.aspectivity.mgmt.model.Entity, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String))
when weaving type com.aspectivity.mgmt.web.entity.ManageEntity
when weaving classes 
when weaving 
when batch building BuildConfig[C:\work\projects\workspace\.metadata\.plugins\org.eclipse.ajdt.core\Aspectivity.generated.lst] #Files=87</column>
            <column name="report_time">2005-11-27 01:01:55</column>
            <column name="report_timestamp">1133070000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d43e74b</column>
            <column name="commit_timestamp">1133840000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
40:weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</column>
        </table>
        <table name="aspectj">
            <column name="id">298</column>
            <column name="bug_id">118698</column>
            <column name="summary">Bug 118698  Not Allowing Access to Private ITD inside Nested Type</column>
            <column name="description">AspectJ is failing to allow access to a private ITD field from a type nested inside the aspect, which is inconsistent with Java's access rules.

Here is the source. See also the follow up patch to tests that integrates it into the ajc150 test suite.

public aspect prUnknown {
    private static interface Marker {}   

    private class Foo implements Marker {
		public Foo() {
            bar = null; // allowed
            listener = null; // should also be allowed
            this.listener = null; // so should this
            Marker.this.listener = null; // and this
            ((Marker)this).listener = null; // and this
        }
    }

    private Object Marker.listener;
    private Object bar;
}</column>
            <column name="report_time">2005-11-30 15:18:31</column>
            <column name="report_timestamp">1133380000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6d94d09</column>
            <column name="commit_timestamp">1133520000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeFieldBinding.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
399:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeFieldBinding.java</column>
        </table>
        <table name="aspectj">
            <column name="id">299</column>
            <column name="bug_id">118781</column>
            <column name="summary">Bug 118781  [waiting-on-build]VerifyError in AspectJ</column>
            <column name="description">I'm fairly new to AspectJ, so this is probably not going to be well explained. I've started working on a project that was working fine. Then I added methods to classes that take a 2-dimensional string array parameter and suddenly I'm getting a VerifyError exception.

java.lang.VerifyError: (class: com/drkw/cpds/obligor/facades/version_1_00/ObligorDetailFacade_1_00, method: searchForObligorSummariesByGroup_aroundBody24 signature: (Lcom/drkw/cpds/obligor/facades/version_1_00/ObligorDetailFacade_1_00;[[[Ljava/lang/String;Ljava/lang/String;LjavaA(&amp;#130;
	at com.drkw.cpds.obligor.facades.version_1_00.obligor.ObligorManager.&lt;clinit&gt;(ObligorManager.java:48)
	at com.drkw.cpds.obligor.integration.version_1_00.obligor.GetObligorDetailsGroupingTest.testGetObligorDetailsUsingGroups(GetObligorDetailsGroupingTest.java:45)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)</column>
            <column name="report_time">2005-12-01 03:43:53</column>
            <column name="report_timestamp">1133430000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a75b7fa</column>
            <column name="commit_timestamp">1133450000</column>
            <column name="files">tests/bugs150/pr118781/MyAspect.java
tests/bugs150/pr118781/MyClass.java
tests/bugs150/pr118781/MyMain.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/World.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
27:weaver/src/org/aspectj/weaver/World.java</column>
        </table>
        <table name="aspectj">
            <column name="id">300</column>
            <column name="bug_id">117209</column>
            <column name="summary">Bug 117209  Runtime error - Stack size too large, Bug#69706 related.</column>
            <column name="description"></column>
            <column name="report_time">2005-11-20 01:07:23</column>
            <column name="report_timestamp">1132470000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">551b9ca</column>
            <column name="commit_timestamp">1133380000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
tests/multiIncremental/pr117209/base/src/Aspect.java
tests/multiIncremental/pr117209/base/src/Broken.java
tests/multiIncremental/pr117209/base/src/DefaultInterfaceImplementationRecipe.java
tests/multiIncremental/pr117209/base/src/MyClass_ch16.java
tests/multiIncremental/pr117209/base/src/MyInterface_ch16.java
tests/multiIncremental/pr117209/base/src/P.java
tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java
tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
            <column name="result">109:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
261:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java
894:tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java</column>
        </table>
        <table name="aspectj">
            <column name="id">301</column>
            <column name="bug_id">111667</column>
            <column name="summary">Bug 111667  Produce a compile warning when default advice precedence is applied</column>
            <column name="description">I propose that the compiler spit out a warning anytime that it has to apply 
the default advice precedence.  Also, it should spit out the recommendation 
that default ordering is not guaranteed from release to release of the 
compiler.

You can see the thread on aspectj-dev titled &quot;change in runtime execution 
order&quot; and the one on aspectj-users titled &quot;AJDT 1.3 and aspectj&quot; for the 
reasoning behind why this is a good thing.</column>
            <column name="report_time">2005-10-05 14:34:46</column>
            <column name="report_timestamp">1128540000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2c81907</column>
            <column name="commit_timestamp">1133370000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/Lint.java
weaver/src/org/aspectj/weaver/Shadow.java
weaver/src/org/aspectj/weaver/World.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
3:weaver/src/org/aspectj/weaver/World.java
10:weaver/src/org/aspectj/weaver/Shadow.java
45:weaver/src/org/aspectj/weaver/Lint.java</column>
        </table>
        <table name="aspectj">
            <column name="id">302</column>
            <column name="bug_id">118337</column>
            <column name="summary">Bug 118337  Use weaver's ClassLoader not the usingClassLoader in 1.5 factory</column>
            <column name="description">In ReflectionBasedReferenceTypeDelegateFactory this line (44) of code is breaking my use of the weaver for looking up bootstrap classes (where the classloader is null and the AspectJ weaver isn't accessible to the bootstrap loader). The commented out code works just fine for me. 

Is there a real need to resolve the AspectJ runtime from a different classloader than the one that was already used to load this class from the AspectJ runtime?

			Class delegateClass = Class.forName(&quot;org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate&quot;,false,usingClassLoader);//ReflectionBasedReferenceTypeDelegate.class.getClassLoader());</column>
            <column name="report_time">2005-11-28 20:24:36</column>
            <column name="report_timestamp">1133230000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d1a295c</column>
            <column name="commit_timestamp">1133290000</column>
            <column name="files">weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java</column>
        </table>
        <table name="aspectj">
            <column name="id">303</column>
            <column name="bug_id">11280</column>
            <column name="summary">Bug 11280  [View Mgmt] Switching perspectives loses view maximized state</column>
            <column name="description">1. Open the CVS repository view in the Java perspective.
2. Double click the title bar to maximize it
3. Switch to the resource perspective.
4. Come back to the Java perspective. The CVS repository view is no longer
maximized.

A view that is maximized should stay maximized.</column>
            <column name="report_time">2002-03-13 12:40:54</column>
            <column name="report_timestamp">1016040000</column>
            <column name="status">resolved wontfix</column>
            <column name="commit">508dbcb</column>
            <column name="commit_timestamp">1133180000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
160:weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java</column>
        </table>
        <table name="aspectj">
            <column name="id">304</column>
            <column name="bug_id">117614</column>
            <column name="summary">Bug 117614  ajc crashes on common-logging-1.0.4.jar</column>
            <column name="description">--- Dump Properties ---
Dump file: ajcore.20051122.152749.326.txt
Dump reason: org.aspectj.weaver.BCException
Dump on exception: true
Dump at exit condition: abort
---- Exception Information ---
org.aspectj.weaver.BCException: bad resolve of void org.apache.log4j.Category.log(java.lang.String, org.apache.log4j.Level, java.lang.Object, java.lang.Throwable)
	at org.aspectj.weaver.World.getModifiers(World.java:216)
	at org.aspectj.weaver.Member.getModifiers(Member.java:406)
	at org.aspectj.weaver.patterns.KindedPointcut.warnOnConfusingSig(KindedPointcut.java:109)
	at org.aspectj.weaver.patterns.KindedPointcut.match(KindedPointcut.java:69)
	at org.aspectj.weaver.patterns.OrPointcut.match(OrPointcut.java:44)
	at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:43)
	at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:43)
	at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:62)
	at org.aspectj.weaver.Advice.match(Advice.java:91)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1126)
	at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction(BcelClassWeaver.java:1115)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:987)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:827)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:348)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:83)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:742)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:707)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:634)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:577)
	at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:243)
	at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:118)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:383)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:680)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:168)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:102)
	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:109)
	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)
	at org.aspectj.tools.ajc.Main.run(Main.java:291)</column>
            <column name="report_time">2005-11-22 20:57:51</column>
            <column name="report_timestamp">1132710000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6eb77c5</column>
            <column name="commit_timestamp">1132840000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java
weaver/src/org/aspectj/weaver/Lint.java
weaver/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java
weaver/src/org/aspectj/weaver/World.java
weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java
weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java
weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java</column>
            <column name="result">4:weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java
13:weaver/src/org/aspectj/weaver/World.java
20:weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
21:weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
45:weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java
56:weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java
70:weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java
83:weaver/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java
95:weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java
118:tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java
274:weaver/src/org/aspectj/weaver/Lint.java</column>
        </table>
        <table name="aspectj">
            <column name="id">305</column>
            <column name="bug_id">116899</column>
            <column name="summary">Bug 116899  Using -verbose in aop.xml does not yield info messages</column>
            <column name="description">The interpretation of the -verbose option for LTW is not consistent with other 
uses in AspectJ e.g. ajc, iajc. It should allow info as well as warining and 
error messages to be output. The option parser and testcase need to be updated.</column>
            <column name="report_time">2005-11-17 12:31:22</column>
            <column name="report_timestamp">1132250000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">76d7e83</column>
            <column name="commit_timestamp">1132820000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/Options.java
tests/java5/ataspectj/ataspectj/ltwlog/Main.java
tests/java5/ataspectj/ataspectj/ltwlog/MessageHolder.java
tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</column>
            <column name="result">12:tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java
59:loadtime/src/org/aspectj/weaver/loadtime/Options.java
418:tests/java5/ataspectj/ataspectj/ltwlog/MessageHolder.java</column>
        </table>
        <table name="aspectj">
            <column name="id">306</column>
            <column name="bug_id">114495</column>
            <column name="summary">Bug 114495  unqualified superaspect&lt;T&gt; pointcut sortafunny in subaspect</column>
            <column name="description"></column>
            <column name="report_time">2005-11-01 05:43:00</column>
            <column name="report_timestamp">1130840000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">86880f7</column>
            <column name="commit_timestamp">1132770000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/ReferenceType.java
weaver/src/org/aspectj/weaver/ResolvedType.java
weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
94:weaver/src/org/aspectj/weaver/ResolvedType.java
135:weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
169:weaver/src/org/aspectj/weaver/ReferenceType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">307</column>
            <column name="bug_id">114054</column>
            <column name="summary">Bug 114054  NPE in CContentOutlinePage.createContentProvider()</column>
            <column name="description">CUIPlugin.getActiveWorkbenchWindow().getActivePage() can return null.</column>
            <column name="report_time">2005-10-27 23:03:41</column>
            <column name="report_timestamp">1130470000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a4caeb9</column>
            <column name="commit_timestamp">1132760000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/patterns/PerThisOrTargetPointcutVisitor.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
1273:weaver/src/org/aspectj/weaver/patterns/PerThisOrTargetPointcutVisitor.java</column>
        </table>
        <table name="aspectj">
            <column name="id">308</column>
            <column name="bug_id">116254</column>
            <column name="summary">Bug 116254  AjTypeSystem interface cannot be used in LTW environment</column>
            <column name="description"></column>
            <column name="report_time">2005-11-14 11:16:55</column>
            <column name="report_timestamp">1131990000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">81e6b60</column>
            <column name="commit_timestamp">1132750000</column>
            <column name="files">aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/DeclareSoftImpl.java
aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/StringToType.java</column>
            <column name="result">22:aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/DeclareSoftImpl.java
23:aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/StringToType.java</column>
        </table>
        <table name="aspectj">
            <column name="id">309</column>
            <column name="bug_id">117681</column>
            <column name="summary">Bug 117681  VerifyError when using annotations to define inter-type annotation</column>
            <column name="description">Using Sun JDK1.5.0_04

Audit.java
public interface Audit {
   public String getLastUpdatedBy();
   public void   setLastUpdatedBy(String un);
}

AuditImpl.java
public class AuditImpl implements Audit {
   private String lastUpdatedBy;
   public String getLastUpdatedBy() {
       return lastUpdatedBy;
   }
   public void setLastUpdatedBy(String un) {
       lastUpdatedBy = un;
   }
}

TestAspect.java
import org.aspectj.lang.annotation.*;

Test.java
@Aspect
public class TestAspect {
      @DeclareParents(&quot;Test&quot;)
      public static Audit introduced = new AuditImpl();
}
public class Test {
    public static void main(String[] args) {
        Test t = new Test();
        Audit a = (Audit)t;
	    a.setLastUpdatedBy(&quot;username&quot;);
		System.out.println(&quot;Username =&quot;+a.getLastUpdatedBy());
    }
}

files.lst
Audit.java
AuditImpl.java
TestAspect.java
Test.java

Compiled using the following command
d:\aspectj1.5\bin\ajc -classpath &quot;d:\aspectj1.5\lib\aspectjrt.jar&quot; -argfi
le files.lst -1.5

d:\aspectj1.5\bin\aj5 Test
Exception in thread &quot;main&quot; java.lang.VerifyError: (class: Test, method: setLastUpdatedBy signature: (Ljava/lang/String;)V) Incompatible argument to function

d:\aspectj1.5\bin\aj5 -noverify Test
Username=</column>
            <column name="report_time">2005-11-23 04:27:13</column>
            <column name="report_timestamp">1132740000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">11ab99f</column>
            <column name="commit_timestamp">1132750000</column>
            <column name="files">tests/bugs150/pr117681/Audit.java
tests/bugs150/pr117681/AuditImpl.java
tests/bugs150/pr117681/MoodIndicator.java
tests/bugs150/pr117681/Test.java
tests/bugs150/pr117681/TestAspect.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
3:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">310</column>
            <column name="bug_id">103157</column>
            <column name="summary">Bug 103157  after returning should not bind &quot;null&quot; as return value</column>
            <column name="description">Today I found out the following. When writing an advice as...

    after() returning(Object o): staticinitialization(*) {
        System.out.println(o);
    }

This advice is indeed executed every time a type returns from 
staticinitialization. However, since there is no returned object, o is bound to 
&quot;null&quot;.

I think this is inconsistent with the fact where we have something like:

    after() returning(T o): call(Object Foo.bar()) {
        System.out.println(o);
    }

Here, AFAIK the advice would not execute in cases where the returned object is 
not an instance of T.

Thus, I would propose that the first advice should only execute at joinpoints 
where a return value is available.</column>
            <column name="report_time">2005-07-08 09:13:23</column>
            <column name="report_timestamp">1120830000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">8b294d9</column>
            <column name="commit_timestamp">1132750000</column>
            <column name="files">tests/new/AfterReturningParam.java
tests/new/ConstructorExecInit.java
tests/new/OddConstructors.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/Advice.java
weaver/src/org/aspectj/weaver/Shadow.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
6:weaver/src/org/aspectj/weaver/Advice.java
119:weaver/src/org/aspectj/weaver/Shadow.java</column>
        </table>
        <table name="aspectj">
            <column name="id">311</column>
            <column name="bug_id">117189</column>
            <column name="summary">Bug 117189  Contribution: reduce overhead when no aspects define</column>
            <column name="description">This patch to the ClassLoaderWeavingAdaptor adds two optimizations when enabled 
is false for the adaptor: it immediately returns false for accept and it also 
avoids the overhead of constructing a weaver or world.

It also contains commented out code that was letting me improve performance by 
loading reflective proxies instead of creating BCEL objects for a resolution 
loader (which is currently broken since reflective proxies now require a 
ReflectionWorld...)</column>
            <column name="report_time">2005-11-19 13:05:59</column>
            <column name="report_timestamp">1132420000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a5ac5af</column>
            <column name="commit_timestamp">1132740000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</column>
            <column name="result">1:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
3:weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</column>
        </table>
        <table name="aspectj">
            <column name="id">312</column>
            <column name="bug_id">103051</column>
            <column name="summary">Bug 103051  Declare Soft not Affecting Explicit Adviceexecution</column>
            <column name="description">The following aspect should compile successfully:

import java.io.IOException;

public aspect SoftenAdvice {
    declare soft: IOException: within(SoftenAdvice) &amp;&amp; adviceexecution();

    before() : execution(* main(..)) {
        throw new IOException(&quot;test&quot;);
    }

    public static void main(String args[]) {
    }
}

But both 1.5.0M2 and HEAD (from 2 days ago) give this output:

C:\devel\scratch\err&gt;ajc SoftenAdvice.aj
C:\devel\scratch\err\SoftenAdvice.aj:7 [error] Unhandled exception type 
IOExcept
ion
throw new IOException(&quot;test&quot;);
^^^^^^^^^^^^^^^^^^^^

1 error

However if you change the declare soft to be the following, it correctly 
softens at the advice execution join point.

    declare soft: IOException: within(SoftenAdvice) &amp;&amp; !withincode(* *(..));</column>
            <column name="report_time">2005-07-07 14:03:58</column>
            <column name="report_timestamp">1120760000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">554e733</column>
            <column name="commit_timestamp">1132650000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
47:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
87:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java</column>
        </table>
        <table name="aspectj">
            <column name="id">313</column>
            <column name="bug_id">114332</column>
            <column name="summary">Bug 114332  Reflection API not detecting ITD method correctly in all circumstances</column>
            <column name="description"></column>
            <column name="report_time">2005-10-31 03:42:57</column>
            <column name="report_timestamp">1130750000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">735d94f</column>
            <column name="commit_timestamp">1132610000</column>
            <column name="files">aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java
aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeConstructorDeclarationImpl.java
aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeDeclarationImpl.java
aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeFieldDeclarationImpl.java
aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeMethodDeclarationImpl.java
tests/java5/reflection/ReflectBilling.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
92:aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeMethodDeclarationImpl.java
96:aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java
278:aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeConstructorDeclarationImpl.java
296:aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeFieldDeclarationImpl.java
314:aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeDeclarationImpl.java</column>
        </table>
        <table name="aspectj">
            <column name="id">314</column>
            <column name="bug_id">115607</column>
            <column name="summary">Bug 115607  Incorrect structure model for simple declare @type program?</column>
            <column name="description">This program:
---8&lt;-----
@interface I {}

class Simple {}

public aspect C {
  declare @type: Simple : @I;
}
---8&lt;-----
(all in a file called C.java, open with the AJ editor) when built shows
incorrect gutter markers, it shows a double headed arrow on Simple implying that
it annotates itself - rather than something outgoing from the declare statement
and something incoming on the Simple type.</column>
            <column name="report_time">2005-11-09 04:35:59</column>
            <column name="report_timestamp">1131530000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9ed75a1</column>
            <column name="commit_timestamp">1132590000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceLocation.java
tests/bugs150/pr115607.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
1144:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceLocation.java</column>
        </table>
        <table name="aspectj">
            <column name="id">315</column>
            <column name="bug_id">116755</column>
            <column name="summary">Bug 116755  PointcutParser is not configurable</column>
            <column name="description">I'm testing the reflection and weaver tools APIs. When I using following code:

PointcutParser parse = new PointcutParser();
String expr = &quot;call(public * main.hello(..)&quot;;
PointcutExpression pex = parse.parsePointcutExpression(expr);

Whenever I use a full qualified class name in pointcut expression, an 
exception is throwed out:
java.lang.IllegalArgumentException: warning no match for this type name: obj 
[Xlint:invalidAbsoluteTypeName]

I try to turn off this Lint exception. But it seems I must access to world 
field of PointcutParser. This is inconvenient because world field is not 
exposed by PointcutParser. 

The existing PointcutParser interface implicitly creates a World and does not 
allow any configuration including classpath or lint. But developers may need 
this kind of control.</column>
            <column name="report_time">2005-11-16 20:19:54</column>
            <column name="report_timestamp">1132190000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">522911e</column>
            <column name="commit_timestamp">1132420000</column>
            <column name="files">tests/java5/ataspectj/annotationGen/RuntimePointcuts.java
tests/java5/reflection/ReflectOnAjcCompiledPointcuts.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelWorld.java
weaver/src/org/aspectj/weaver/internal/tools/TypePatternMatcherImpl.java
weaver/src/org/aspectj/weaver/ltw/LTWWorld.java
weaver/src/org/aspectj/weaver/ltw/LTWeaver.java
weaver/src/org/aspectj/weaver/reflect/AnnotationFinder.java
weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegate.java
weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java
weaver/src/org/aspectj/weaver/reflect/ReflectionBasedResolvedMemberImpl.java
weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java
weaver/src/org/aspectj/weaver/reflect/ReflectionVar.java
weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java
weaver/src/org/aspectj/weaver/tools/PointcutParser.java
weaver/src/org/aspectj/weaver/tools/TypePatternMatcher.java
weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java
weaver/testsrc/org/aspectj/weaver/tools/ToolsTests.java
weaver/testsrc/org/aspectj/weaver/tools/TypePatternMatcherTest.java
weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java
weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</column>
            <column name="result">1:weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java
2:weaver/src/org/aspectj/weaver/tools/PointcutParser.java
5:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
8:weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java
25:weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegate.java
51:weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java
63:weaver/src/org/aspectj/weaver/bcel/BcelWorld.java
71:weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java
75:weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java
106:weaver/src/org/aspectj/weaver/reflect/ReflectionBasedResolvedMemberImpl.java
138:weaver/src/org/aspectj/weaver/reflect/ReflectionVar.java
189:weaver/testsrc/org/aspectj/weaver/tools/ToolsTests.java
214:weaver/src/org/aspectj/weaver/reflect/AnnotationFinder.java
839:weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java</column>
        </table>
        <table name="aspectj">
            <column name="id">316</column>
            <column name="bug_id">115204</column>
            <column name="summary">Bug 115204  WildAnnotationTypePattern.java:61 NPE after renaming method-annotation class</column>
            <column name="description">Sorry I don't have a small test case.  It looks like the NPE happens when the
annotation refered to by a (compiled?) aspect no longer exists because it was
renamed.  The class being woven is the first one (alphabetically), and the
method being woven does not have the annotation on it.

Let me know if you need a test case.
(And sorry for the late bugs - I'm just now writing the article.)

------------------------------------------------------------------
java.lang.NullPointerException
at
org.aspectj.weaver.patterns.WildAnnotationTypePattern.matches(WildAnnotationTypePattern.java:61)
at
org.aspectj.weaver.patterns.SignaturePattern.matchesAnnotations(SignaturePattern.java:321)
at
org.aspectj.weaver.patterns.SignaturePattern.matchesExactly(SignaturePattern.java:169)
at org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:131)
at
org.aspectj.weaver.patterns.WithincodePointcut.matchInternal(WithincodePointcut.java:73)
at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:143)
at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:55)
at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:143)
at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:55)
at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:143)
at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:64)
at org.aspectj.weaver.Advice.match(Advice.java:109)
at org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:97)
at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1749)
at
org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction(BcelClassWeaver.java:1736)
at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1533)
at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1359)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:382)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:98)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1478)
at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1443)
at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1217)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1021)
at
org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)
at
org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)
at
org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)
at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:759)
at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:225)
at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:151)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
at
org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

trouble in: 
public class com.isberg.articles.aop7.bean.ABeanTest$APlus extends java.lang.Object:
  TypeMungers: [(BcelTypeMunger ResolvedTypeMunger(Method, java.lang.String
com.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName(java.lang.String)))]
     declares: [declare parents: com.isberg.articles.aop7.bean.ABeanTest$CPlus
extends (com.isberg.articles.aop7.bean.ABean$IBean);]
  private static Throwable ajc$initFailureCause
  public static final com.isberg.articles.aop7.bean.ABeanTest$APlus
ajc$perSingletonInstance
  static void &lt;clinit&gt;():
    staticinitialization(void
com.isberg.articles.aop7.bean.ABeanTest$APlus.&lt;clinit&gt;())
    | catch java.lang.Throwable -&gt; E0
    | |             INVOKESTATIC
com.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$postClinit ()V   (line 125)
    | catch java.lang.Throwable -&gt; E0
    |               GOTO L0
    |           E0: ASTORE_0
    |               ALOAD_0
    |               PUTSTATIC
com.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$initFailureCause
Ljava/lang/Throwable;
    |           L0: RETURN
    staticinitialization(void
com.isberg.articles.aop7.bean.ABeanTest$APlus.&lt;clinit&gt;())
  end static void &lt;clinit&gt;()

  void &lt;init&gt;():
                    ALOAD_0     // com.isberg.articles.aop7.bean.ABeanTest$APlus
this   (line 125)
                    INVOKESPECIAL java.lang.Object.&lt;init&gt; ()V
    constructor-execution(void
com.isberg.articles.aop7.bean.ABeanTest$APlus.&lt;init&gt;())
    |               RETURN
    constructor-execution(void
com.isberg.articles.aop7.bean.ABeanTest$APlus.&lt;init&gt;())
  end void &lt;init&gt;()

  void ajc$declare_parents_1()   
org.aspectj.weaver.MethodDeclarationLineNumber: 127:3678
:
                    RETURN   (line 127)
  end void ajc$declare_parents_1()

  public static String
ajc$interMethod$com_isberg_articles_aop7_bean_ABeanTest$APlus$com_isberg_articles_aop7_bean_ABeanTest$CPlus$propertyName(com.isberg.articles.aop7.bean.ABeanTest$CPlus,
String)    EffectiveSignatureAttribute(java.lang.String
com.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName(java.lang.String),
method-execution)
:
    method-execution(java.lang.String
com.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName(java.lang.String))
    |               ALOAD_0     // com.isberg.articles.aop7.bean.ABeanTest$CPlus
ajc$this_   (line 132)
    |               ALOAD_1     // java.lang.String methodName
    |               INVOKESTATIC
com.isberg.articles.aop7.bean.ABean.ajc$interMethod$com_isberg_articles_aop7_bean_ABean$com_isberg_articles_aop7_bean_ABean$IBean$propertyName
(Lcom/isberg/articles/aop7/bean/ABean$IBean;Ljava/lang/String;)Ljava/lang/String;
    |               ASTORE_2
    |               LDC &quot;something&quot;   (line 133)
    |               ALOAD_2     // java.lang.String result
    | method-call(boolean java.lang.String.equals(java.lang.Object))
    | |             INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z
    | method-call(boolean java.lang.String.equals(java.lang.Object))
    |               IFEQ L0
    |               LDC &quot;a&quot;   (line 134)
    |               ASTORE_2     // java.lang.String result
    |           L0: ALOAD_2     // java.lang.String result   (line 136)
    |               ARETURN
    method-execution(java.lang.String
com.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName(java.lang.String))
  end public static String
ajc$interMethod$com_isberg_articles_aop7_bean_ABeanTest$APlus$com_isberg_articles_aop7_bean_ABeanTest$CPlus$propertyName(com.isberg.articles.aop7.bean.ABeanTest$CPlus,
String)

  public static String
ajc$interMethodDispatch1$com_isberg_articles_aop7_bean_ABeanTest$APlus$com_isberg_articles_aop7_bean_ABeanTest$CPlus$propertyName(com.isberg.articles.aop7.bean.ABeanTest$CPlus,
String)    EffectiveSignatureAttribute(java.lang.String
com.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName(java.lang.String),
method-call)
:
                    ALOAD_0
                    ALOAD_1
                    INVOKEVIRTUAL
com.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName
(Ljava/lang/String;)Ljava/lang/String;
                    ARETURN
  end public static String
ajc$interMethodDispatch1$com_isberg_articles_aop7_bean_ABeanTest$APlus$com_isberg_articles_aop7_bean_ABeanTest$CPlus$propertyName(com.isberg.articles.aop7.bean.ABeanTest$CPlus,
String)

  public static com.isberg.articles.aop7.bean.ABeanTest$APlus aspectOf()   
org.aspectj.weaver.AjAttribute$AjSynthetic@591171
:
                    GETSTATIC
com.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$perSingletonInstance
Lcom/isberg/articles/aop7/bean/ABeanTest$APlus;
                    IFNONNULL L0
                    NEW org.aspectj.lang.NoAspectBoundException
                    DUP
                    LDC &quot;com_isberg_articles_aop7_bean_ABeanTest$APlus&quot;
                    GETSTATIC
com.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$initFailureCause
Ljava/lang/Throwable;
                    INVOKESPECIAL org.aspectj.lang.NoAspectBoundException.&lt;init&gt;
(Ljava/lang/String;Ljava/lang/Throwable;)V
                    ATHROW
                L0: GETSTATIC
com.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$perSingletonInstance
Lcom/isberg/articles/aop7/bean/ABeanTest$APlus;
                    ARETURN
  end public static com.isberg.articles.aop7.bean.ABeanTest$APlus aspectOf()

  public static boolean hasAspect()   
org.aspectj.weaver.AjAttribute$AjSynthetic@16e3eb3
:
                    GETSTATIC
com.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$perSingletonInstance
Lcom/isberg/articles/aop7/bean/ABeanTest$APlus;
                    IFNULL L0
                    ICONST_1
                    IRETURN
                L0: ICONST_0
                    IRETURN
  end public static boolean hasAspect()

  private static void ajc$postClinit()   
org.aspectj.weaver.AjAttribute$AjSynthetic@d7cf62
:
                    NEW com.isberg.articles.aop7.bean.ABeanTest$APlus
                    DUP
                    INVOKESPECIAL
com.isberg.articles.aop7.bean.ABeanTest$APlus.&lt;init&gt; ()V
                    PUTSTATIC
com.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$perSingletonInstance
Lcom/isberg/articles/aop7/bean/ABeanTest$APlus;
                    RETURN
  end private static void ajc$postClinit()
end public class com.isberg.articles.aop7.bean.ABeanTest$APlus

when matching pointcut ((withincode(@(Parallel) * *(..)) &amp;&amp; call(void *(..))) &amp;&amp;
percflow(com.isberg.articles.aop7.concurrent.ParallelMethodImpl on
execution(@(Parallel) * *(..))))
when matching shadow method-call(boolean java.lang.String.equals(java.lang.Object))
when weaving type com.isberg.articles.aop7.bean.ABeanTest$APlus
when weaving aspects 
when weaving 
when batch building
BuildConfig[c:\home\ws\main-31\.metadata\.plugins\org.eclipse.ajdt.core\devworks-fall.generated.lst]
#Files=70</column>
            <column name="report_time">2005-11-05 06:03:26</column>
            <column name="report_timestamp">1131190000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">557f5b4</column>
            <column name="commit_timestamp">1132310000</column>
            <column name="files">weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</column>
            <column name="result">2184:weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</column>
        </table>
        <table name="aspectj">
            <column name="id">317</column>
            <column name="bug_id">116949</column>
            <column name="summary">Bug 116949  [waitingOnAJDTdrop]Exception thrown from AspectJ compiler</column>
            <column name="description">java.lang.ClassCastException
at org.aspectj.weaver.bcel.BcelClassWeaver.checkForOverride
(BcelClassWeaver.java:607)
at org.aspectj.weaver.bcel.BcelClassWeaver.calculateAnyRequiredBridgeMethods
(BcelClassWeaver.java:676)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1537)
at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1485)
at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1266)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1088)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave
(AjCompilerAdapter.java:300)
at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling
(AjCompilerAdapter.java:178)
at 
org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspect
j_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile
(Compiler.java:367)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation
(AjBuildManager.java:809)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild
(AjBuildManager.java:254)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild
(AjBuildManager.java:163)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run
(AspectJBuildManager.java:191)

trouble in: 
public class ts.simul.client.AbstractClient$OptionSetter extends 
ts.util.CmdLineProgram$OptionSetterBase:
  final ts.simul.client.AbstractClient this$0
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0
  public void &lt;init&gt;(ts.simul.client.AbstractClient)    
org.aspectj.weaver.MethodDeclarationLineNumber: 59:1411
:
                    ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter 
this   (line 60)
                    ALOAD_1
                    PUTFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 
Lts/simul/client/AbstractClient;
                    ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter 
this   (line 59)
                    ALOAD_1
                    INVOKESPECIAL 
ts.util.CmdLineProgram$OptionSetterBase.&lt;init&gt; (Lts/util/CmdLineProgram;)V
    constructor-execution(void 
ts.simul.client.AbstractClient$OptionSetter.&lt;init&gt;
(ts.simul.client.AbstractClient))
    |               RETURN
    constructor-execution(void 
ts.simul.client.AbstractClient$OptionSetter.&lt;init&gt;
(ts.simul.client.AbstractClient))
  end public void &lt;init&gt;(ts.simul.client.AbstractClient)

  public boolean setOption_file(String) throws 
ts.util.IllegalProgramArgumentException    
org.aspectj.weaver.MethodDeclarationLineNumber: 62:1469
:
    method-execution(boolean 
ts.simul.client.AbstractClient$OptionSetter.setOption_file(java.lang.String))
    |               ALOAD_1     // java.lang.String optParam   (line 65)
    | method-call(int java.lang.String.length())
    | |             INVOKEVIRTUAL java.lang.String.length ()I
    | method-call(int java.lang.String.length())
    |               IFLE L1
    |               ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter 
this   (line 66)
    |               GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 
Lts/simul/client/AbstractClient;
    |               ALOAD_1     // java.lang.String optParam
    |               PUTFIELD ts.simul.client.AbstractClient.fileName 
Ljava/lang/String;
    |               NEW java.io.File   (line 67)
    |               DUP
    |               ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter 
this
    |               GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 
Lts/simul/client/AbstractClient;
    |               GETFIELD ts.simul.client.AbstractClient.fileName 
Ljava/lang/String;
    | constructor-call(void java.io.File.&lt;init&gt;(java.lang.String))
    | |             INVOKESPECIAL java.io.File.&lt;init&gt; (Ljava/lang/String;)V
    | constructor-call(void java.io.File.&lt;init&gt;(java.lang.String))
    |               ASTORE_2
    |               ALOAD_2     // java.io.File file   (line 68)
    | method-call(boolean java.io.File.exists())
    | |             INVOKEVIRTUAL java.io.File.exists ()Z
    | method-call(boolean java.io.File.exists())
    |               IFNE L0
    |               NEW ts.util.IllegalProgramArgumentException   (line 69)
    |               DUP
    |               NEW java.lang.StringBuilder
    |               DUP
    |               LDC &quot;Cannot find file: [&quot;
    | constructor-call(void java.lang.StringBuilder.&lt;init&gt;(java.lang.String))
    | |             INVOKESPECIAL java.lang.StringBuilder.&lt;init&gt; 
(Ljava/lang/String;)V
    | constructor-call(void java.lang.StringBuilder.&lt;init&gt;(java.lang.String))
    |               ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter 
this
    |               GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 
Lts/simul/client/AbstractClient;
    |               GETFIELD ts.simul.client.AbstractClient.fileName 
Ljava/lang/String;
    | method-call(java.lang.StringBuilder java.lang.StringBuilder.append
(java.lang.String))
    | |             INVOKEVIRTUAL java.lang.StringBuilder.append 
(Ljava/lang/String;)Ljava/lang/StringBuilder;
    | method-call(java.lang.StringBuilder java.lang.StringBuilder.append
(java.lang.String))
    |               LDC &quot;]&quot;
    | method-call(java.lang.StringBuilder java.lang.StringBuilder.append
(java.lang.String))
    | |             INVOKEVIRTUAL java.lang.StringBuilder.append 
(Ljava/lang/String;)Ljava/lang/StringBuilder;
    | method-call(java.lang.StringBuilder java.lang.StringBuilder.append
(java.lang.String))
    | method-call(java.lang.String java.lang.StringBuilder.toString())
    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()
Ljava/lang/String;
    | method-call(java.lang.String java.lang.StringBuilder.toString())
    | constructor-call(void ts.util.IllegalProgramArgumentException.&lt;init&gt;
(java.lang.String))
    | |             INVOKESPECIAL 
ts.util.IllegalProgramArgumentException.&lt;init&gt; (Ljava/lang/String;)V
    | constructor-call(void ts.util.IllegalProgramArgumentException.&lt;init&gt;
(java.lang.String))
    |               ATHROW
    |           L0: ICONST_1   (line 70)
    |               IRETURN
    |           L1: ICONST_0   (line 73)
    |               IRETURN
    method-execution(boolean 
ts.simul.client.AbstractClient$OptionSetter.setOption_file(java.lang.String))
  end public boolean setOption_file(String) throws 
ts.util.IllegalProgramArgumentException

  public boolean setOption_class(String) throws 
ts.util.IllegalProgramArgumentException    
org.aspectj.weaver.MethodDeclarationLineNumber: 76:1971
:
    method-execution(boolean 
ts.simul.client.AbstractClient$OptionSetter.setOption_class(java.lang.String))
    |               ALOAD_1     // java.lang.String optParam   (line 79)
    | method-call(int java.lang.String.length())
    | |             INVOKEVIRTUAL java.lang.String.length ()I
    | method-call(int java.lang.String.length())
    |               IFLE L1
    |               ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter 
this   (line 80)
    |               GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 
Lts/simul/client/AbstractClient;
    |               ALOAD_1     // java.lang.String optParam
    |               PUTFIELD ts.simul.client.AbstractClient.className 
Ljava/lang/String;
    | catch ts.simul.SimulationException -&gt; E0
    | |             ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter 
this   (line 82)
    | |             GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 
Lts/simul/client/AbstractClient;
    | |             ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter 
this
    | |             GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 
Lts/simul/client/AbstractClient;
    | |             GETFIELD ts.simul.client.AbstractClient.className 
Ljava/lang/String;
    | | method-call(java.lang.Class ts.simul.SceneFactory.getSceneClass
(java.lang.String))
    | | |           INVOKESTATIC ts.simul.SceneFactory.getSceneClass 
(Ljava/lang/String;)Ljava/lang/Class;
    | | method-call(java.lang.Class ts.simul.SceneFactory.getSceneClass
(java.lang.String))
    | |             PUTFIELD ts.simul.client.AbstractClient.sceneClass 
Ljava/lang/Class;
    | |             ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter 
this   (line 83)
    | |             GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 
Lts/simul/client/AbstractClient;
    | | method-call(void ts.simul.client.AbstractClient.setBeanInfoSearchPath())
    | | |           INVOKESTATIC ts.simul.Architecture.aspectOf ()
Lts/simul/Architecture;
    | | |           GETSTATIC 
ts.simul.client.AbstractClient$OptionSetter.ajc$tjp_0 
Lorg/aspectj/lang/JoinPoint$StaticPart;
    | | |           INVOKEVIRTUAL 
ts.simul.Architecture.ajc$before$ts_simul_Architecture$1$ae285a4d 
(Lorg/aspectj/lang/JoinPoint$StaticPart;)V
    | | |           INVOKEVIRTUAL 
ts.simul.client.AbstractClient.setBeanInfoSearchPath ()V
    | | method-call(void ts.simul.client.AbstractClient.setBeanInfoSearchPath())
    | |             GOTO L0
    | catch ts.simul.SimulationException -&gt; E0
    |           E0: ASTORE_2   (line 85)
    |               NEW ts.util.IllegalProgramArgumentException   (line 86)
    |               DUP
    |               ALOAD_2     // ts.simul.SimulationException e
    | method-call(java.lang.String ts.simul.SimulationException.getMessage())
    | |             INVOKEVIRTUAL ts.simul.SimulationException.getMessage ()
Ljava/lang/String;
    | method-call(java.lang.String ts.simul.SimulationException.getMessage())
    | constructor-call(void ts.util.IllegalProgramArgumentException.&lt;init&gt;
(java.lang.String))
    | |             INVOKESPECIAL 
ts.util.IllegalProgramArgumentException.&lt;init&gt; (Ljava/lang/String;)V
    | constructor-call(void ts.util.IllegalProgramArgumentException.&lt;init&gt;
(java.lang.String))
    |               ATHROW
    |           L0: ICONST_1   (line 88)
    |               IRETURN
    |           L1: ICONST_0   (line 91)
    |               IRETURN
    method-execution(boolean 
ts.simul.client.AbstractClient$OptionSetter.setOption_class(java.lang.String))
  end public boolean setOption_class(String) throws 
ts.util.IllegalProgramArgumentException

  public boolean setOption_name(String)    
org.aspectj.weaver.MethodDeclarationLineNumber: 94:2593
:
    method-execution(boolean 
ts.simul.client.AbstractClient$OptionSetter.setOption_name(java.lang.String))
    |               ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter 
this   (line 96)
    |               GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 
Lts/simul/client/AbstractClient;
    |               ALOAD_1     // java.lang.String optParam
    |               PUTFIELD ts.simul.client.AbstractClient.sceneName 
Ljava/lang/String;
    |               ICONST_1   (line 97)
    |               IRETURN
    method-execution(boolean 
ts.simul.client.AbstractClient$OptionSetter.setOption_name(java.lang.String))
  end public boolean setOption_name(String)

  public boolean setOption_actors(String)    
org.aspectj.weaver.MethodDeclarationLineNumber: 100:2739
:
    method-execution(boolean 
ts.simul.client.AbstractClient$OptionSetter.setOption_actors(java.lang.String))
    | catch java.lang.NumberFormatException -&gt; E0
    | |             ALOAD_1     // java.lang.String optParam   (line 103)
    | | method-call(int java.lang.Integer.parseInt(java.lang.String))
    | | |           INVOKESTATIC java.lang.Integer.parseInt (Ljava/lang/String;)
I
    | | method-call(int java.lang.Integer.parseInt(java.lang.String))
    | |             ISTORE_2
    | |             GOTO L0
    | catch java.lang.NumberFormatException -&gt; E0
    |           E0: ASTORE_2     // int n   (line 105)
    |               ICONST_0   (line 106)
    |               IRETURN
    |           L0: ICONST_1   (line 108)
    |               IRETURN
    method-execution(boolean 
ts.simul.client.AbstractClient$OptionSetter.setOption_actors(java.lang.String))
  end public boolean setOption_actors(String)

end public class ts.simul.client.AbstractClient$OptionSetter

when weaving type ts.simul.client.AbstractClient$OptionSetter
when weaving classes 
when weaving 
when incrementally building BuildConfig
[c:\Projects\eclipse\.metadata\.plugins\org.eclipse.ajdt.core\TS.generated.lst] 
#Files=79</column>
            <column name="report_time">2005-11-17 17:09:48</column>
            <column name="report_timestamp">1132270000</column>
            <column name="status">verified fixed</column>
            <column name="commit">dd9a9b2</column>
            <column name="commit_timestamp">1132310000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</column>
            <column name="result">4:weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</column>
        </table>
        <table name="aspectj">
            <column name="id">318</column>
            <column name="bug_id">116626</column>
            <column name="summary">Bug 116626  Load-time weaving - exception from the weaver</column>
            <column name="description">Hi again :-)

I'm trying to use loadtime weaving and getting an exception. Please look at the 
testcase:

Java code:
==========
public class Test&lt;T&gt; {

	Set&lt;T&gt; intsSet;

	public Test() {
		this.intsSet = new HashSet&lt;T&gt;();
	}

	public &lt;T&gt; T[] getObjs(T[] a) {
		return intsSet.toArray(a);
	}

	public static void main(String[] args) {
		System.out.println(&quot;AAA :-)&quot;);
		new TTT().foo();
	}
}

class TTT {
	public void foo() {
		Test&lt;Object&gt; mt = new Test&lt;Object&gt;();
		Object[] arr = mt.getObjs(new Object[]{});
	}
}

Aspect:
=======
public privileged aspect TestAspect {

      pointcut TestToArray(Test mt) :
                target(mt) &amp;&amp;
                !within(TestAspect);


    Object[] around(Test mt, Object[] objs) :
            TestToArray(mt) &amp;&amp;
            args(objs) &amp;&amp;
            execution(Object[] com.mprv.secsph.Test.getObjs(Object[])) {

        objs = proceed(mt, objs);
        System.out.println(&quot;GO Aspects!&quot;);
        return objs;
    }
}

aop.xml
=======
&lt;aspectj&gt;
	&lt;aspects&gt;
		&lt;aspect name=&quot;com.mprv.secsph.TestAspect&quot;/&gt;
	&lt;/aspects&gt;

	&lt;weaver options=&quot;-verbose -XlazyTjp -showWeaveInfo&quot;&gt;
		&lt;include within=&quot;com.mprv.*&quot;/&gt;
	&lt;/weaver&gt;
&lt;/aspectj&gt;

Program output:
==============
AAA :-)
info weaving 'com/mprv/secsph/TestAspect'
java.lang.NullPointerException
	at 
org.aspectj.weaver.tools.WeavingAdaptor$WeavingClassFileProvider.getBytes
(WeavingAdaptor.java:390)
	at org.aspectj.weaver.tools.WeavingAdaptor.getAtAspectJAspectBytes
(WeavingAdaptor.java:259)
	at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass
(WeavingAdaptor.java:181)
	at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:66)
	at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform
(ClassPreProcessorAgentAdapter.java:52)
	at sun.instrument.TransformerManager.transform
(TransformerManager.java:122)
	at sun.instrument.InstrumentationImpl.transform
(InstrumentationImpl.java:155)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:620)
	at java.security.SecureClassLoader.defineClass
(SecureClassLoader.java:124)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:56)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:195)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)
	at com.mprv.secsph.Test.getObjs(Test.java:1)
	at com.mprv.secsph.TTT.foo(Test.java:34)
	at com.mprv.secsph.Test.main(Test.java:27)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:86)
GO Aspects!

====

This exception doesn't happen all the time ... but if you will try a few times, 
you will probably get it. May you can understand what is the problem event 
without running the test case. 

Anyway, I took a look at your code, and have a guess (but it's only the guess) -
My aspect is in the application classpath. Actually it's in the same package, 
so may be you are trying to weave the aspect with itself somehow ...

Thanks!
Misha.</column>
            <column name="report_time">2005-11-16 03:54:11</column>
            <column name="report_timestamp">1132130000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">c760895</column>
            <column name="commit_timestamp">1132300000</column>
            <column name="files">tests/bugs150/pr116626/com/foo/bar/Test.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java
2:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">319</column>
            <column name="bug_id">116255</column>
            <column name="summary">Bug 116255  XML Linkage Error with LTW</column>
            <column name="description">I am trying out a recent dev build of AspectJ and am now seeing a new linkage 
error when I load a Web app that contains an XML deployment descriptor. I'm 
trying to narrow down the date when this error first appeared. If I build and 
run with the Sept. 23 dev build all works properly. If I build and run with the 
Nov. 14 dev build it fails like this ...

Here's the output:

SEVERE: Error deploying configuration descriptor jpetstore.xml
java.lang.LinkageError: org/apache/xerces/jaxp/SAXParserFactoryImpl : already 
defined in loader
        at java.lang.ClassLoader.defineClass(Ljava.lang.String;
[BIILjava.security.ProtectionDomain;)Ljava.lang.Class;(Unknown Source
)
        at java.security.SecureClassLoader.defineClass
(SecureClassLoader.java:124)
        at org.apache.catalina.loader.WebappClassLoader.findClassInternal
(WebappClassLoader.java:1629)
        at org.apache.catalina.loader.WebappClassLoader.findClass
(WebappClassLoader.java:850)
        at org.apache.catalina.loader.WebappClassLoader.loadClass
(WebappClassLoader.java:1299)
        at org.apache.catalina.loader.WebappClassLoader.loadClass
(WebappClassLoader.java:1181)
        at javax.xml.parsers.FactoryFinder.newInstance(FactoryFinder.java:88)
        at javax.xml.parsers.FactoryFinder.findJarServiceProvider
(FactoryFinder.java:278)
        at javax.xml.parsers.FactoryFinder.find(FactoryFinder.java:185)
        at javax.xml.parsers.SAXParserFactory.newInstance
(SAXParserFactory.java:107)
        at org.apache.tomcat.util.digester.Digester.getFactory
(Digester.java:486)
        at org.apache.tomcat.util.digester.Digester.getParser(Digester.java:691)
        at org.apache.tomcat.util.digester.Digester.getXMLReader
(Digester.java:899)
        at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1561)
        at org.apache.catalina.startup.TldConfig.tldScanStream
(TldConfig.java:513)
        at org.apache.catalina.startup.TldConfig.tldScanTld(TldConfig.java:545)
        at org.apache.catalina.startup.TldConfig.execute(TldConfig.java:300)
        at org.apache.catalina.core.StandardContext.processTlds
(StandardContext.java:4193)
        at org.apache.catalina.core.StandardContext.start
(StandardContext.java:4049)
        at org.apache.catalina.core.ContainerBase.addChildInternal
(ContainerBase.java:759)
        at org.apache.catalina.core.ContainerBase.addChild
(ContainerBase.java:739)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524)
        at org.apache.catalina.startup.HostConfig.deployDescriptor
(HostConfig.java:589)
        at org.apache.catalina.startup.HostConfig.deployDescriptors
(HostConfig.java:536)
        at org.apache.catalina.startup.HostConfig.deployApps
(HostConfig.java:471)
        at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1102)
        at org.apache.catalina.startup.HostConfig.lifecycleEvent
(HostConfig.java:311)
        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent
(LifecycleSupport.java:119)
        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1020)
        at org.apache.catalina.core.StandardHost.start(StandardHost.java:718)
        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012)
error can't determine implemented interfaces of missing type javax.xml.rpc.Call
when matching pointcut ((((within(*) &amp;&amp; call(public * javax.xml.rpc.Call.invoke*
(..))) &amp;&amp; target(BindingTypePattern(java.lang.Object
, 0))) &amp;&amp; if(boolean 
glassbox.inspector.monitor.resource.RemoteCallMonitor.ajc$if_12())) &amp;&amp; 
persingleton(glassbox.inspector.monitor.
resource.RemoteCallMonitor))
when matching shadow method-call(boolean 
org.apache.crimson.parser.ContentModel.empty())
when weaving type org.apache.crimson.parser.ContentModel
when weaving classes
when weaving

abort trouble in:
final class org.apache.crimson.parser.ContentModel extends java.lang.Object:
  public char type
  public Object content
  public org.apache.crimson.parser.ContentModel next
  private org.apache.crimson.parser.SimpleHashtable cache
  public void &lt;init&gt;(String):
                    ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 116)
                    INVOKESPECIAL java.lang.Object.&lt;init&gt; ()V
    constructor-execution(void org.apache.crimson.parser.ContentModel.&lt;init&gt;
(java.lang.String))
    |               ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 110)
    |               NEW org.apache.crimson.parser.SimpleHashtable
    |               DUP
    | constructor-call(void org.apache.crimson.parser.SimpleHashtable.&lt;init&gt;())
    | |             INVOKESPECIAL 
org.apache.crimson.parser.SimpleHashtable.&lt;init&gt; ()V
    | constructor-call(void org.apache.crimson.parser.SimpleHashtable.&lt;init&gt;())
    |               PUTFIELD org.apache.crimson.parser.ContentModel.cache 
Lorg/apache/crimson/parser/SimpleHashtable;
    |               ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 117)
    |               ICONST_0
    |               PUTFIELD org.apache.crimson.parser.ContentModel.type C
    |               ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 118)
    |               ALOAD_1     // java.lang.String element
    |               PUTFIELD org.apache.crimson.parser.ContentModel.content 
Ljava/lang/Object;
    |               RETURN   (line 119)
    constructor-execution(void org.apache.crimson.parser.ContentModel.&lt;init&gt;
(java.lang.String))
  end public void &lt;init&gt;(String)

  public void &lt;init&gt;(char, org.apache.crimson.parser.ContentModel):
                    ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 125)
                    INVOKESPECIAL java.lang.Object.&lt;init&gt; ()V
    constructor-execution(void org.apache.crimson.parser.ContentModel.&lt;init&gt;
(char, org.apache.crimson.parser.ContentModel))
    |               ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 110)
    |               NEW org.apache.crimson.parser.SimpleHashtable
    |               DUP
    | constructor-call(void org.apache.crimson.parser.SimpleHashtable.&lt;init&gt;())
    | |             INVOKESPECIAL 
org.apache.crimson.parser.SimpleHashtable.&lt;init&gt; ()V
    | constructor-call(void org.apache.crimson.parser.SimpleHashtable.&lt;init&gt;())
    |               PUTFIELD org.apache.crimson.parser.ContentModel.cache 
Lorg/apache/crimson/parser/SimpleHashtable;
    |               ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 126)
    |               ILOAD_1     // char type
    |               PUTFIELD org.apache.crimson.parser.ContentModel.type C
    |               ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 127)
    |               ALOAD_2     // org.apache.crimson.parser.ContentModel 
content
    |               PUTFIELD org.apache.crimson.parser.ContentModel.content 
Ljava/lang/Object;
    |               RETURN   (line 128)
    constructor-execution(void org.apache.crimson.parser.ContentModel.&lt;init&gt;
(char, org.apache.crimson.parser.ContentModel))
  end public void &lt;init&gt;(char, org.apache.crimson.parser.ContentModel)

  public boolean empty():
    method-execution(boolean org.apache.crimson.parser.ContentModel.empty())
    |               ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 137)
    |               GETFIELD org.apache.crimson.parser.ContentModel.type C
    |               LOOKUPSWITCH
    |                 0:        L1
    |                 42:       L0
    |                 43:       L1
    |                 44:       L7
    |                 63:       L0
    |                 124:      L2
    |                 default:  L13
    |           L0: ICONST_1   (line 140)
    |               IRETURN
    |           L1: ICONST_0   (line 144)
    |               IRETURN
    |           L2: ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 147)
    |               GETFIELD org.apache.crimson.parser.ContentModel.content 
Ljava/lang/Object;
    |               INSTANCEOF org.apache.crimson.parser.ContentModel
    |               IFEQ L3
    |               ALOAD_0     // org.apache.crimson.parser.ContentModel this
    |               GETFIELD org.apache.crimson.parser.ContentModel.content 
Ljava/lang/Object;
    |               CHECKCAST org.apache.crimson.parser.ContentModel
    | method-call(boolean org.apache.crimson.parser.ContentModel.empty())
    | |             INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.empty 
()Z
    | method-call(boolean org.apache.crimson.parser.ContentModel.empty())
    |               IFEQ L3
    |               ICONST_1   (line 149)
    |               IRETURN
    |           L3: ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 151)
    |               GETFIELD org.apache.crimson.parser.ContentModel.next 
Lorg/apache/crimson/parser/ContentModel;
    |               ASTORE_1
    |               GOTO L6
    |           L4: ALOAD_1     // org.apache.crimson.parser.ContentModel m   
(line 154)
    |               INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.empty 
()Z
    |               IFEQ L5
    |               ICONST_1   (line 155)
    |               IRETURN
    |           L5: ALOAD_1     // org.apache.crimson.parser.ContentModel m   
(line 153)
    |               GETFIELD org.apache.crimson.parser.ContentModel.next 
Lorg/apache/crimson/parser/ContentModel;
    |               ASTORE_1     // org.apache.crimson.parser.ContentModel m
    |           L6: ALOAD_1     // org.apache.crimson.parser.ContentModel m   
(line 152)
    |               IFNONNULL L4
    |               ICONST_0   (line 157)
    |               IRETURN
    |           L7: ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 160)
    |               GETFIELD org.apache.crimson.parser.ContentModel.content 
Ljava/lang/Object;
    |               INSTANCEOF org.apache.crimson.parser.ContentModel
    |               IFEQ L8
    |               ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 161)
    |               GETFIELD org.apache.crimson.parser.ContentModel.content 
Ljava/lang/Object;
    |               CHECKCAST org.apache.crimson.parser.ContentModel
    |               INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.empty 
()Z
    |               IFNE L9
    |               ICONST_0   (line 162)
    |               IRETURN
    |           L8: ICONST_0   (line 165)
    |               IRETURN
    |           L9: ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 167)
    |               GETFIELD org.apache.crimson.parser.ContentModel.next 
Lorg/apache/crimson/parser/ContentModel;
    |               ASTORE_2
    |               GOTO L12
    |          L10: ALOAD_2     // org.apache.crimson.parser.ContentModel m   
(line 170)
    |               INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.empty 
()Z
    |               IFNE L11
    |               ICONST_0   (line 171)
    |               IRETURN
    |          L11: ALOAD_2     // org.apache.crimson.parser.ContentModel m   
(line 169)
    |               GETFIELD org.apache.crimson.parser.ContentModel.next 
Lorg/apache/crimson/parser/ContentModel;
    |               ASTORE_2     // org.apache.crimson.parser.ContentModel m
    |          L12: ALOAD_2     // org.apache.crimson.parser.ContentModel m   
(line 168)
    |               IFNONNULL L10
    |               ICONST_1   (line 173)
    |               IRETURN
    |          L13: NEW java.lang.InternalError   (line 176)
    |               DUP
    |               INVOKESPECIAL java.lang.InternalError.&lt;init&gt; ()V
    |               ATHROW
    method-execution(boolean org.apache.crimson.parser.ContentModel.empty())
  end public boolean empty()

  public boolean first(String):
                    ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 186)
                    GETFIELD org.apache.crimson.parser.ContentModel.cache 
Lorg/apache/crimson/parser/SimpleHashtable;
                    ALOAD_1     // java.lang.String token
                    INVOKEVIRTUAL org.apache.crimson.parser.SimpleHashtable.get 
(Ljava/lang/String;)Ljava/lang/Object;
                    CHECKCAST java.lang.Boolean
                    ASTORE_2
                    ALOAD_2     // java.lang.Boolean b   (line 189)
                    IFNULL L0
                    ALOAD_2     // java.lang.Boolean b   (line 190)
                    INVOKEVIRTUAL java.lang.Boolean.booleanValue ()Z
                    IRETURN
                L0: ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 193)
                    GETFIELD org.apache.crimson.parser.ContentModel.type C
                    LOOKUPSWITCH
                      0:        L1
                      42:       L1
                      43:       L1
                      44:       L5
                      63:       L1
                      124:      L12
                      default:  L16
                L1: ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 198)
                    GETFIELD org.apache.crimson.parser.ContentModel.content 
Ljava/lang/Object;
                    INSTANCEOF java.lang.String
                    IFEQ L4
                    ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 199)
                    GETFIELD org.apache.crimson.parser.ContentModel.content 
Ljava/lang/Object;
                    ALOAD_1     // java.lang.String token
                    IF_ACMPNE L2
                    ICONST_1
                    GOTO L3
                L2: ICONST_0
                L3: ISTORE_3
                    GOTO L17
                L4: ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 201)
                    GETFIELD org.apache.crimson.parser.ContentModel.content 
Ljava/lang/Object;
                    CHECKCAST org.apache.crimson.parser.ContentModel
                    ALOAD_1     // java.lang.String token
                    INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.first 
(Ljava/lang/String;)Z
                    ISTORE_3     // boolean retval
                    GOTO L17   (line 202)
                L5: ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 205)
                    GETFIELD org.apache.crimson.parser.ContentModel.content 
Ljava/lang/Object;
                    INSTANCEOF java.lang.String
                    IFEQ L8
                    ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 206)
                    GETFIELD org.apache.crimson.parser.ContentModel.content 
Ljava/lang/Object;
                    ALOAD_1     // java.lang.String token
                    IF_ACMPNE L6
                    ICONST_1
                    GOTO L7
                L6: ICONST_0
                L7: ISTORE_3     // boolean retval
                    GOTO L17
                L8: ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 207)
                    GETFIELD org.apache.crimson.parser.ContentModel.content 
Ljava/lang/Object;
                    CHECKCAST org.apache.crimson.parser.ContentModel
                    ALOAD_1     // java.lang.String token
                    INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.first 
(Ljava/lang/String;)Z
                    IFEQ L9
                    ICONST_1   (line 208)
                    ISTORE_3     // boolean retval
                    GOTO L17
                L9: ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 209)
                    GETFIELD org.apache.crimson.parser.ContentModel.content 
Ljava/lang/Object;
                    CHECKCAST org.apache.crimson.parser.ContentModel
                    INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.empty 
()Z
                    IFNE L10
                    ICONST_0   (line 210)
                    ISTORE_3     // boolean retval
                    GOTO L17
               L10: ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 211)
                    GETFIELD org.apache.crimson.parser.ContentModel.next 
Lorg/apache/crimson/parser/ContentModel;
                    IFNULL L11
                    ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 212)
                    GETFIELD org.apache.crimson.parser.ContentModel.next 
Lorg/apache/crimson/parser/ContentModel;
                    ALOAD_1     // java.lang.String token
                    INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.first 
(Ljava/lang/String;)Z
                    ISTORE_3     // boolean retval
                    GOTO L17
               L11: ICONST_0   (line 214)
                    ISTORE_3     // boolean retval
                    GOTO L17   (line 215)
               L12: ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 218)
                    GETFIELD org.apache.crimson.parser.ContentModel.content 
Ljava/lang/Object;
                    INSTANCEOF java.lang.String
                    IFEQ L13
                    ALOAD_0     // org.apache.crimson.parser.ContentModel this
                    GETFIELD org.apache.crimson.parser.ContentModel.content 
Ljava/lang/Object;
                    ALOAD_1     // java.lang.String token
                    IF_ACMPNE L13
                    ICONST_1   (line 219)
                    ISTORE_3     // boolean retval
                    GOTO L17
               L13: ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 220)
                    GETFIELD org.apache.crimson.parser.ContentModel.content 
Ljava/lang/Object;
                    CHECKCAST org.apache.crimson.parser.ContentModel
                    ALOAD_1     // java.lang.String token
                    INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.first 
(Ljava/lang/String;)Z
                    IFEQ L14
                    ICONST_1   (line 221)
                    ISTORE_3     // boolean retval
                    GOTO L17
               L14: ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 222)
                    GETFIELD org.apache.crimson.parser.ContentModel.next 
Lorg/apache/crimson/parser/ContentModel;
                    IFNULL L15
                    ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 223)
                    GETFIELD org.apache.crimson.parser.ContentModel.next 
Lorg/apache/crimson/parser/ContentModel;
                    ALOAD_1     // java.lang.String token
                    INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.first 
(Ljava/lang/String;)Z
                    ISTORE_3     // boolean retval
                    GOTO L17
               L15: ICONST_0   (line 225)
                    ISTORE_3     // boolean retval
                    GOTO L17   (line 226)
               L16: NEW java.lang.InternalError   (line 229)
                    DUP
                    INVOKESPECIAL java.lang.InternalError.&lt;init&gt; ()V
                    ATHROW
               L17: ILOAD_3     // boolean retval   (line 233)
                    IFEQ L18
                    ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 234)
                    GETFIELD org.apache.crimson.parser.ContentModel.cache 
Lorg/apache/crimson/parser/SimpleHashtable;
                    ALOAD_1     // java.lang.String token
                    GETSTATIC java.lang.Boolean.TRUE Ljava/lang/Boolean;
                    INVOKEVIRTUAL org.apache.crimson.parser.SimpleHashtable.put 
(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Obj
ect;
                    POP
                    GOTO L19
               L18: ALOAD_0     // org.apache.crimson.parser.ContentModel 
this   (line 236)
                    GETFIELD org.apache.crimson.parser.ContentModel.cache 
Lorg/apache/crimson/parser/SimpleHashtable;
                    ALOAD_1     // java.lang.String token
                    GETSTATIC java.lang.Boolean.FALSE Ljava/lang/Boolean;
                    INVOKEVIRTUAL org.apache.crimson.parser.SimpleHashtable.put 
(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Obj
ect;
                    POP
               L19: ILOAD_3     // boolean retval   (line 238)
                    IRETURN
  end public boolean first(String)

end final class org.apache.crimson.parser.ContentModel</column>
            <column name="report_time">2005-11-14 11:17:02</column>
            <column name="report_timestamp">1131990000</column>
            <column name="status">verified fixed</column>
            <column name="commit">fabf159</column>
            <column name="commit_timestamp">1132070000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</column>
            <column name="result">34:loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</column>
        </table>
        <table name="aspectj">
            <column name="id">320</column>
            <column name="bug_id">116305</column>
            <column name="summary">Bug 116305  Unexpected error: can't determine implemented interfaces of missing type</column>
            <column name="description">I have reusable library code that imports a type (a JAX-RPC Call in this case) 
for use in two ways:
1) matching in a method signature. 
2) casting and use in an advice body

It used to work properly when I used it in a load-time weaving configuration 
without the (Call) type being available on the classpath (I think it broke in 
the last week).

However, I am now getting an abort error &quot;can't determine implemented 
interfaces of missing type&quot; when weaving this aspect into another type when the 
imported (Call) type isnt visible in a classloader. I tried changing the code 
to remove the import and to use a fully qualified name in the pointcut (and a 
reflective invocation in the advice body). However, this still fails in the 
same way.

These pointcuts are presumably causing the error:

public abstract aspect AbstractRequestMonitor {
    protected pointcut scope() : within(*);//if(true);
    protected pointcut monitorEnabled() : isMonitorEnabled() &amp;&amp; scope();
    protected abstract pointcut isMonitorEnabled();
...
}

public abstract aspect AbstractResourceMonitor extends AbstractRequestMonitor {
...
}

public aspect RemoteCallMonitor extends AbstractResourceMonitor {
    protected pointcut isMonitorEnabled() : if(aspectOf().isEnabled());

    public pointcut jaxRpcClientCall(Object wsCallObj) : 
        call(public * javax.xml.rpc.Call.invoke*(..)) &amp;&amp; target(wsCallObj);

    Object around(final Object wsCallObj) : jaxRpcClientCall(wsCallObj) &amp;&amp; 
monitorEnabled() {
...

Here is the output:

org.aspectj.bridge.AbortException: can't determine implemented interfaces of 
missing type javax.xml.rpc.Call
when matching pointcut ((((within(*) &amp;&amp; call(public * javax.xml.rpc.Call.invoke*
(..))) &amp;&amp; target(BindingTypePattern(java.lang.Object, 0))) &amp;&amp; if(boolean 
glassbox.inspector.monitor.resource.RemoteCallMonitor.ajc$if_12())) &amp;&amp; 
persingleton(glassbox.inspector.monitor.resource.RemoteCallMonitor))
when matching shadow method-call(java.util.Locale java.util.Locale.getDefault())
when weaving type org.apache.struts.action.ActionServlet
when weaving classes 
when weaving

	at 
org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessa
ge(WeavingAdaptor.java:364)
	at org.aspectj.bridge.MessageUtil.error(MessageUtil.java:81)
	at 
org.aspectj.weaver.MissingResolvedTypeWithKnownSignature.raiseCantFindType
(MissingResolvedTypeWithKnownSignature.java:195)
	at 
org.aspectj.weaver.MissingResolvedTypeWithKnownSignature.getDeclaredInterfaces
(MissingResolvedTypeWithKnownSignature.java:77)
	at org.aspectj.weaver.ResolvedType.getDirectSupertypes
(ResolvedType.java:64)
	at org.aspectj.weaver.ReferenceType.isAssignableFrom
(ReferenceType.java:312)
	at org.aspectj.weaver.ReferenceType.isAssignableFrom
(ReferenceType.java:236)
	at org.aspectj.weaver.patterns.KindedPointcut.warnOnConfusingSig
(KindedPointcut.java:151)
	at org.aspectj.weaver.patterns.KindedPointcut.matchInternal
(KindedPointcut.java:108)
	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)
	at org.aspectj.weaver.patterns.AndPointcut.matchInternal
(AndPointcut.java:57)
	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)
	at org.aspectj.weaver.patterns.AndPointcut.matchInternal
(AndPointcut.java:55)
	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)
	at org.aspectj.weaver.patterns.AndPointcut.matchInternal
(AndPointcut.java:55)
	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)
	at org.aspectj.weaver.patterns.AndPointcut.matchInternal
(AndPointcut.java:55)
	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)
	at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:64)
	at org.aspectj.weaver.Advice.match(Advice.java:109)
	at org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:98)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match
(BcelClassWeaver.java:2098)
	at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction
(BcelClassWeaver.java:2085)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match
(BcelClassWeaver.java:1867)
	at org.aspectj.weaver.bcel.BcelClassWeaver.matchInit
(BcelClassWeaver.java:1731)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match
(BcelClassWeaver.java:1660)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave
(BcelClassWeaver.java:445)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave
(BcelClassWeaver.java:101)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1531)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump
(BcelWeaver.java:1485)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify
(BcelWeaver.java:1266)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1088)
	at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes
(WeavingAdaptor.java:266)
	at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass
(WeavingAdaptor.java:198)
	at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:67)
	at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform
(ClassPreProcessorAgentAdapter.java:52)
...</column>
            <column name="report_time">2005-11-14 14:16:01</column>
            <column name="report_timestamp">1132000000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">676aa08</column>
            <column name="commit_timestamp">1132050000</column>
            <column name="files">weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java</column>
            <column name="result">5:weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java</column>
        </table>
        <table name="aspectj">
            <column name="id">321</column>
            <column name="bug_id">115235</column>
            <column name="summary">Bug 115235  StackOverflowError on circular pointcut iff aspect parameterized</column>
            <column name="description">The code below overflows when concretizing a circular pointcut from a
parameterized aspect.  Not true when the aspect is not parameterized.

---------------------------------------------
public class SelfPC {

	public static void main(String[] args) {
		new C().foo();
	}
	static class C { 
		pointcut doit() : C.doit(); // CE expected
		void foo() {} 
	}
	
	// ------------ pertarget&lt;T&gt;
	static abstract aspect PT_PARM&lt;T&gt; pertarget(pc()) {
		abstract protected pointcut pc();
		before() : pc() {}
	}
	static aspect CPT_PARM extends PT_PARM&lt;C&gt; {
		protected pointcut pc() : C.doit();
	}
	
//	// ------------ issingleton&lt;T&gt;
//	static abstract aspect IS_PARM&lt;T&gt; {
//		abstract protected pointcut pc();
//		before() : pc() {}
//	}
//	static aspect CIS_PARM extends IS_PARM&lt;C&gt; {
//		protected pointcut pc() : C.doit();
//	}
//	// ------------ pertarget
//	static abstract aspect PT pertarget(pc()) {
//		abstract protected pointcut pc();
//		before() : pc() {}
//	}
//	static aspect CPT extends PT{
//		protected pointcut pc() : C.doit();
//	}
//	// ------------ issingleton
//	static abstract aspect SIS {
//		abstract protected pointcut pc();
//		before() : pc() {}
//	}
//	static aspect CSIS extends SIS {
//		protected pointcut pc() : C.doit();
//	}

}
---------------------------------------------
java.lang.StackOverflowError
at java.lang.StringBuffer.append(StringBuffer.java:225)
at org.aspectj.weaver.UnresolvedType.nameToSignature(UnresolvedType.java:734)
at org.aspectj.weaver.UnresolvedType.forName(UnresolvedType.java:308)
at
org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding(EclipseFactory.java:302)
at
org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromEclipse(EclipseFactory.java:129)
at
org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getSuperclass(EclipseSourceType.java:119)
at org.aspectj.weaver.ReferenceType.getSuperclass(ReferenceType.java:481)
at org.aspectj.weaver.ResolvedType.getDirectSupertypes(ResolvedType.java:65)
at org.aspectj.weaver.ResolvedType$6.get(ResolvedType.java:447)
at org.aspectj.weaver.Iterators$4.next(Iterators.java:148)
at org.aspectj.weaver.Iterators$3$1.hasNext(Iterators.java:117)
at org.aspectj.weaver.Iterators$3.hasNext(Iterators.java:128)
at org.aspectj.weaver.ResolvedType.findPointcut(ResolvedType.java:466)
at
org.aspectj.weaver.patterns.ReferencePointcut.concretize1(ReferencePointcut.java:269)
at org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:229)
at
org.aspectj.weaver.patterns.ReferencePointcut.concretize1(ReferencePointcut.java:326)
at org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:229)
...
---------------------------------------------</column>
            <column name="report_time">2005-11-06 07:26:57</column>
            <column name="report_timestamp">1131280000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">4b8bed7</column>
            <column name="commit_timestamp">1131960000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/patterns/Pointcut.java
weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</column>
            <column name="result">4:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
5:weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java
9:weaver/src/org/aspectj/weaver/patterns/Pointcut.java</column>
        </table>
        <table name="aspectj">
            <column name="id">322</column>
            <column name="bug_id">113118</column>
            <column name="summary">Bug 113118  ClassFormatException with tracing aspect</column>
            <column name="description">Build id: 20051017111807
AspectJ version: 1.5.0.200510141300

The following aspect resulted in the CFE:

public aspect CallTrace {
	/**
	 * A marker interface used to pick the classes to trace. Declare any class you
want to
	 * trace to implement this interface. The best way is using an aspect like the
one in
	 * the class comment block above.
	 */
	public static interface Traced {}
	
	/**
	 * A marker annoation, can be used instead of {@link Traced}.
	 */
	@Documented
	@Retention(RetentionPolicy.RUNTIME)
	@Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})
	public @interface TracedAnno {}
	
	private static Level level = Level.INFO;
	
	/**
	 * Set the global logging level used for reporting traced calls. Defaults to INFO.
	 * @param newLevel
	 */
	public static void setLevel (Level newLevel) {
		level = newLevel;
	}
	
	/**
	 * @return the Level used for writing traced output.
	 */
	public static Level getLevel () {
		return level;
	}
	
	private static Logger log = Logger.getLogger(Traced.class);
	private int nesting = 0;
	private static StringBuffer prefixStr = null;
	static {
		new StringBuffer(1024);
		for (int i=0; i&lt;128; i++) { // stuff with &quot;+&quot;.
			prefixStr.append(&quot;++++++++&quot;); 
		}
	}
	public pointcut exclusions(): within(CallTrace) || within(*Tracer);
	
	// Distinguish between initialization JPs and other method calls, to work
	// around AJ limitation that around advice isn't supported for initializations.
	
	public pointcut traceIntfInit(): initialization(Traced+.new(..));
	public pointcut traceIntf(): call(* Traced+.*(..));
	
	public pointcut traceAnnoInit(): 
		initialization(com.adteractive..*.new(..)) &amp;&amp; @target(TracedAnno);
	public pointcut traceAnno(): 
		 call(* com.adteractive..*.*(..)) &amp;&amp; @target(TracedAnno);

	public pointcut traceInit(): !exclusions() &amp;&amp; (traceIntfInit() || traceAnnoInit());
	public pointcut trace(): !exclusions() &amp;&amp; (traceIntf() || traceAnno());
	
	before(): traceInit() {
		nesting++;
		String pre = prefixStr.substring(0,nesting);
		log.log (level, pre+&quot;&gt; &quot;+thisJoinPointStaticPart);
	}
	
	after(): traceInit() {
		String pre = prefixStr.substring(0,nesting);
		log.log (level, pre+&quot;&lt; &quot;+thisJoinPointStaticPart);
		nesting--;
	}
	
	Object around(): trace() {
		nesting++;
		String pre = prefixStr.substring(0,nesting);
		log.log (level, pre+&quot;&gt; &quot;+thisJoinPointStaticPart);
		Object result = proceed();
		log.log (level, pre+&quot;&lt; &quot;+thisJoinPointStaticPart);
		nesting--;
		return result;
	}
}

A separate aspect is used to &quot;declare parent&quot; or &quot;declare @type&quot; either the
marker interface or annotation, thereby adding tracing to the user-specified
classes. E.g.,

public aspect CallTraceTestTracer {
//	declare @type:   com.me.foo..*: @CallTrace.TracedAnno;
	declare parents: com.me.foo..* implements CallTrace.Traced;
}

The exception wasn't thrown in a previous version when I used just before advice
for both the &quot;trace&quot; and &quot;traceInit&quot; pointcuts. 

org.aspectj.apache.bcel.classfile.ClassFormatException
at org.aspectj.apache.bcel.classfile.Utility.typeOfSignature(Utility.java:1293)
at org.aspectj.apache.bcel.generic.Type.getTypeInternal(Type.java:166)
at org.aspectj.apache.bcel.generic.Type.getTypeInternal(Type.java:174)
at org.aspectj.apache.bcel.generic.Type.getType(Type.java:155)
at org.aspectj.weaver.bcel.BcelWorld.makeBcelType(BcelWorld.java:198)
at org.aspectj.weaver.bcel.BcelShadow.createMethodGen(BcelShadow.java:2999)
at org.aspectj.weaver.bcel.BcelShadow.extractMethod(BcelShadow.java:2826)
at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline(BcelShadow.java:2020)
at org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:211)
at org.aspectj.weaver.Shadow.implementMungers(Shadow.java:514)
at org.aspectj.weaver.Shadow.implement(Shadow.java:391)
at org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:1781)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:394)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:98)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1464)
at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1429)
at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1203)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1039)
at
org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)
at
org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)
at
org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)
at org.aspectj.a

jdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:759)
at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:249)
at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:158)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)
at
org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

trouble in: 
public class com.adteractive.framework.test.ConditionTestFilterTest extends
junit.framework.TestCase:
  com.adteractive.framework.ConditionTestFilter ctf
[Signature(Lcom/adteractive/framework/ConditionTestFilter&lt;Lcom/adteractive/framework/test/InputStub;Lcom/adteractive/framework/test/OutputStub;&gt;;)]
  static Class class$0
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0
  public void &lt;init&gt;():
                    ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 16)
                    INVOKESPECIAL junit.framework.TestCase.&lt;init&gt; ()V
    constructor-execution(void
com.adteractive.framework.test.ConditionTestFilterTest.&lt;init&gt;())
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 17)
    |               ACONST_NULL
    |               PUTFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    |               RETURN   (line 16)
    constructor-execution(void
com.adteractive.framework.test.ConditionTestFilterTest.&lt;init&gt;())
  end public void &lt;init&gt;()

  protected void setUp() throws java.lang.Exception   
org.aspectj.weaver.MethodDeclarationLineNumber: 23:543
:
    method-execution(void
com.adteractive.framework.test.ConditionTestFilterTest.setUp())
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 24)
    |               INVOKESPECIAL junit.framework.TestCase.setUp ()V
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 25)
    |               NEW com.adteractive.framework.test.ConditionTestFilterStub
    |               DUP
    |               LDC &quot;ctf&quot;
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this
    |               ASTORE_1
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.test.ConditionTestFilterTest.makeBranches())
    | |             ALOAD_1
    | |             INVOKESPECIAL
com.adteractive.framework.test.ConditionTestFilterTest.makeBranches
()[Lcom/adteractive/framework/Filter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.test.ConditionTestFilterTest.makeBranches())
    |               INVOKESPECIAL
com.adteractive.framework.test.ConditionTestFilterStub.&lt;init&gt;
(Ljava/lang/String;[Lcom/adteractive/framework/Filter;)V
    |               PUTFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    |               RETURN   (line 26)
    method-execution(void
com.adteractive.framework.test.ConditionTestFilterTest.setUp())
  end protected void setUp() throws java.lang.Exception

  public void testExecute()    org.aspectj.weaver.MethodDeclarationLineNumber:
31:754
:
    method-execution(void
com.adteractive.framework.test.ConditionTestFilterTest.testExecute())
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 32)
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    |               NEW com.adteractive.framework.test.InputStub
    |               DUP
    |               INVOKESPECIAL
com.adteractive.framework.test.InputStub.&lt;init&gt; ()V
    | method-call(com.adteractive.framework.Output
com.adteractive.framework.ConditionTestFilter.execute(com.adteractive.framework.Input))
    | |             INVOKEVIRTUAL
com.adteractive.framework.ConditionTestFilter.execute
(Lcom/adteractive/framework/Input;)Lcom/adteractive/framework/Output;
    | method-call(com.adteractive.framework.Output
com.adteractive.framework.ConditionTestFilter.execute(com.adteractive.framework.Input))
    |               CHECKCAST com.adteractive.framework.test.OutputStub
    |               ASTORE_1
    |               LDC &quot;bf12&quot;   (line 33)
    |               ALOAD_1     // com.adteractive.framework.test.OutputStub output
    | method-call(com.adteractive.framework.Status
com.adteractive.framework.test.OutputStub.getStatus())
    | |             INVOKEVIRTUAL
com.adteractive.framework.test.OutputStub.getStatus
()Lcom/adteractive/framework/Status;
    | method-call(com.adteractive.framework.Status
com.adteractive.framework.test.OutputStub.getStatus())
    | method-call(java.lang.String
com.adteractive.framework.Status.getAdditionalMessage())
    | |             INVOKEINTERFACE
com.adteractive.framework.Status.getAdditionalMessage ()Ljava/lang/String;
    | method-call(java.lang.String
com.adteractive.framework.Status.getAdditionalMessage())
    | method-call(void junit.framework.Assert.assertEquals(java.lang.String,
java.lang.String))
    | |             INVOKESTATIC
com.adteractive.framework.test.ConditionTestFilterTest.assertEquals
(Ljava/lang/String;Ljava/lang/String;)V
    | method-call(void junit.framework.Assert.assertEquals(java.lang.String,
java.lang.String))
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 34)
    |               NEW com.adteractive.framework.test.ConditionTestFilterStub
    |               DUP
    |               INVOKESPECIAL
com.adteractive.framework.test.ConditionTestFilterStub.&lt;init&gt; ()V
    |               PUTFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 35)
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    |               NEW com.adteractive.framework.test.InputStub
    |               DUP
    |               INVOKESPECIAL
com.adteractive.framework.test.InputStub.&lt;init&gt; ()V
    | method-call(com.adteractive.framework.Output
com.adteractive.framework.ConditionTestFilter.execute(com.adteractive.framework.Input))
    | |             INVOKEVIRTUAL
com.adteractive.framework.ConditionTestFilter.execute
(Lcom/adteractive/framework/Input;)Lcom/adteractive/framework/Output;
    | method-call(com.adteractive.framework.Output
com.adteractive.framework.ConditionTestFilter.execute(com.adteractive.framework.Input))
    |               CHECKCAST com.adteractive.framework.test.OutputStub
    |               ASTORE_1     // com.adteractive.framework.test.OutputStub output
    |               ALOAD_1     // com.adteractive.framework.test.OutputStub
output   (line 36)
    | method-call(void junit.framework.Assert.assertNotNull(java.lang.Object))
    | |             INVOKESTATIC
com.adteractive.framework.test.ConditionTestFilterTest.assertNotNull
(Ljava/lang/Object;)V
    | method-call(void junit.framework.Assert.assertNotNull(java.lang.Object))
    |               RETURN   (line 37)
    method-execution(void
com.adteractive.framework.test.ConditionTestFilterTest.testExecute())
  end public void testExecute()

  public void testGetFilterBranches()   
org.aspectj.weaver.MethodDeclarationLineNumber: 42:1111
:
    method-execution(void
com.adteractive.framework.test.ConditionTestFilterTest.testGetFilterBranches())
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 43)
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | |             INVOKEVIRTUAL
com.adteractive.framework.ConditionTestFilter.getFilterBranches
()[Lcom/adteractive/framework/Filter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | method-call(void junit.framework.Assert.assertNotNull(java.lang.Object))
    | |             INVOKESTATIC
com.adteractive.framework.test.ConditionTestFilterTest.assertNotNull
(Ljava/lang/Object;)V
    | method-call(void junit.framework.Assert.assertNotNull(java.lang.Object))
    |               ICONST_3   (line 44)
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | |             INVOKEVIRTUAL
com.adteractive.framework.ConditionTestFilter.getFilterBranches
()[Lcom/adteractive/framework/Filter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    |               ARRAYLENGTH
    | method-call(void junit.framework.Assert.assertEquals(int, int))
    | |             INVOKESTATIC
com.adteractive.framework.test.ConditionTestFilterTest.assertEquals (II)V
    | method-call(void junit.framework.Assert.assertEquals(int, int))
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 45)
    |               NEW com.adteractive.framework.test.ConditionTestFilterStub
    |               DUP
    |               INVOKESPECIAL
com.adteractive.framework.test.ConditionTestFilterStub.&lt;init&gt; ()V
    |               PUTFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 46)
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | |             INVOKEVIRTUAL
com.adteractive.framework.ConditionTestFilter.getFilterBranches
()[Lcom/adteractive/framework/Filter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | method-call(void junit.framework.Assert.assertNull(java.lang.Object))
    | |             INVOKESTATIC
com.adteractive.framework.test.ConditionTestFilterTest.assertNull
(Ljava/lang/Object;)V
    | method-call(void junit.framework.Assert.assertNull(java.lang.Object))
    |               RETURN   (line 47)
    method-execution(void
com.adteractive.framework.test.ConditionTestFilterTest.testGetFilterBranches())
  end public void testGetFilterBranches()

  public void testSetFilterBranches()   
org.aspectj.weaver.MethodDeclarationLineNumber: 52:1441
:
    method-execution(void
com.adteractive.framework.test.ConditionTestFilterTest.testSetFilterBranches())
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 53)
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.test.ConditionTestFilterTest.makeBranches())
    | |             INVOKESPECIAL
com.adteractive.framework.test.ConditionTestFilterTest.makeBranches
()[Lcom/adteractive/framework/Filter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.test.ConditionTestFilterTest.makeBranches())
    |               ASTORE_1
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 54)
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    |               ALOAD_1     // com.adteractive.framework.Filter[] branches
    | method-call(void
com.adteractive.framework.ConditionTestFilter.setFilterBranches(com.adteractive.framework.Filter[]))
    | |             INVOKEVIRTUAL
com.adteractive.framework.ConditionTestFilter.setFilterBranches
([Lcom/adteractive/framework/Filter;)V
    | method-call(void
com.adteractive.framework.ConditionTestFilter.setFilterBranches(com.adteractive.framework.Filter[]))
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 55)
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | |             INVOKEVIRTUAL
com.adteractive.framework.ConditionTestFilter.getFilterBranches
()[Lcom/adteractive/framework/Filter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | method-call(void junit.framework.Assert.assertNotNull(java.lang.Object))
    | |             INVOKESTATIC
com.adteractive.framework.test.ConditionTestFilterTest.assertNotNull
(Ljava/lang/Object;)V
    | method-call(void junit.framework.Assert.assertNotNull(java.lang.Object))
    |               ICONST_3   (line 56)
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | |             INVOKEVIRTUAL
com.adteractive.framework.ConditionTestFilter.getFilterBranches
()[Lcom/adteractive/framework/Filter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    |               ARRAYLENGTH
    | method-call(void junit.framework.Assert.assertEquals(int, int))
    | |             INVOKESTATIC
com.adteractive.framework.test.ConditionTestFilterTest.assertEquals (II)V
    | method-call(void junit.framework.Assert.assertEquals(int, int))
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 57)
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    |               ACONST_NULL
    | method-call(void
com.adteractive.framework.ConditionTestFilter.setFilterBranches(com.adteractive.framework.Filter[]))
    | |             INVOKEVIRTUAL
com.adteractive.framework.ConditionTestFilter.setFilterBranches
([Lcom/adteractive/framework/Filter;)V
    | method-call(void
com.adteractive.framework.ConditionTestFilter.setFilterBranches(com.adteractive.framework.Filter[]))
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 58)
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | |             INVOKEVIRTUAL
com.adteractive.framework.ConditionTestFilter.getFilterBranches
()[Lcom/adteractive/framework/Filter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | method-call(void junit.framework.Assert.assertNull(java.lang.Object))
    | |             INVOKESTATIC
com.adteractive.framework.test.ConditionTestFilterTest.assertNull
(Ljava/lang/Object;)V
    | method-call(void junit.framework.Assert.assertNull(java.lang.Object))
    |               RETURN   (line 59)
    method-execution(void
com.adteractive.framework.test.ConditionTestFilterTest.testSetFilterBranches())
  end public void testSetFilterBranches()

  public void testConditionTestFilter()   
org.aspectj.weaver.MethodDeclarationLineNumber: 64:1847
:
    method-execution(void
com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilter())
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 65)
    |               NEW com.adteractive.framework.test.ConditionTestFilterStub
    |               DUP
    |               INVOKESPECIAL
com.adteractive.framework.test.ConditionTestFilterStub.&lt;init&gt; ()V
    |               PUTFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 66)
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | |             INVOKEVIRTUAL
com.adteractive.framework.ConditionTestFilter.getFilterBranches
()[Lcom/adteractive/framework/Filter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | method-call(void junit.framework.Assert.assertNull(java.lang.Object))
    | |             INVOKESTATIC
com.adteractive.framework.test.ConditionTestFilterTest.assertNull
(Ljava/lang/Object;)V
    | method-call(void junit.framework.Assert.assertNull(java.lang.Object))
    |               LDC com.adteractive.framework.test.ConditionTestFilterStub 
 (line 67)
    | method-call(java.lang.String java.lang.Class.getSimpleName())
    | |             INVOKEVIRTUAL java.lang.Class.getSimpleName ()Ljava/lang/String;
    | method-call(java.lang.String java.lang.Class.getSimpleName())
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    | method-call(java.lang.String com.adteractive.framework.FilterHelper.getName())
    | |             INVOKEVIRTUAL com.adteractive.framework.FilterHelper.getName
()Ljava/lang/String;
    | method-call(java.lang.String com.adteractive.framework.FilterHelper.getName())
    | method-call(void junit.framework.Assert.assertEquals(java.lang.String,
java.lang.String))
    | |             INVOKESTATIC
com.adteractive.framework.test.ConditionTestFilterTest.assertEquals
(Ljava/lang/String;Ljava/lang/String;)V
    | method-call(void junit.framework.Assert.assertEquals(java.lang.String,
java.lang.String))
    |               RETURN   (line 68)
    method-execution(void
com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilter())
  end public void testConditionTestFilter()

  public void testConditionTestFilterString()   
org.aspectj.weaver.MethodDeclarationLineNumber: 73:2158
:
    method-execution(void
com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilterString())
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 74)
    |               NEW com.adteractive.framework.test.ConditionTestFilterStub
    |               DUP
    |               LDC &quot;foo&quot;
    |               INVOKESPECIAL
com.adteractive.framework.test.ConditionTestFilterStub.&lt;init&gt; (Ljava/lang/String;)V
    |               PUTFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 75)
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | |             INVOKEVIRTUAL
com.adteractive.framework.ConditionTestFilter.getFilterBranches
()[Lcom/adteractive/framework/Filter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | method-call(void junit.framework.Assert.assertNull(java.lang.Object))
    | |             INVOKESTATIC
com.adteractive.framework.test.ConditionTestFilterTest.assertNull
(Ljava/lang/Object;)V
    | method-call(void junit.framework.Assert.assertNull(java.lang.Object))
    |               LDC &quot;foo&quot;   (line 76)
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    | method-call(java.lang.String com.adteractive.framework.FilterHelper.getName())
    | |             INVOKEVIRTUAL com.adteractive.framework.FilterHelper.getName
()Ljava/lang/String;
    | method-call(java.lang.String com.adteractive.framework.FilterHelper.getName())
    | method-call(void junit.framework.Assert.assertEquals(java.lang.String,
java.lang.String))
    | |             INVOKESTATIC
com.adteractive.framework.test.ConditionTestFilterTest.assertEquals
(Ljava/lang/String;Ljava/lang/String;)V
    | method-call(void junit.framework.Assert.assertEquals(java.lang.String,
java.lang.String))
    |               RETURN   (line 77)
    method-execution(void
com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilterString())
  end public void testConditionTestFilterString()

  public void testConditionTestFilterStringFilterOfIOArray()   
org.aspectj.weaver.MethodDeclarationLineNumber: 82:2456
:
    method-execution(void
com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilterStringFilterOfIOArray())
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 83)
    |               NEW com.adteractive.framework.test.ConditionTestFilterStub
    |               DUP
    |               LDC &quot;foo&quot;
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.test.ConditionTestFilterTest.makeBranches())
    | |             INVOKESPECIAL
com.adteractive.framework.test.ConditionTestFilterTest.makeBranches
()[Lcom/adteractive/framework/Filter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.test.ConditionTestFilterTest.makeBranches())
    |               INVOKESPECIAL
com.adteractive.framework.test.ConditionTestFilterStub.&lt;init&gt;
(Ljava/lang/String;[Lcom/adteractive/framework/Filter;)V
    |               PUTFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this   (line 84)
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | |             INVOKEVIRTUAL
com.adteractive.framework.ConditionTestFilter.getFilterBranches
()[Lcom/adteractive/framework/Filter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | method-call(void junit.framework.Assert.assertNotNull(java.lang.Object))
    | |             INVOKESTATIC
com.adteractive.framework.test.ConditionTestFilterTest.assertNotNull
(Ljava/lang/Object;)V
    | method-call(void junit.framework.Assert.assertNotNull(java.lang.Object))
    |               ICONST_3   (line 85)
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    | |             INVOKEVIRTUAL
com.adteractive.framework.ConditionTestFilter.getFilterBranches
()[Lcom/adteractive/framework/Filter;
    | method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.ConditionTestFilter.getFilterBranches())
    |               ARRAYLENGTH
    | method-call(void junit.framework.Assert.assertEquals(int, int))
    | |             INVOKESTATIC
com.adteractive.framework.test.ConditionTestFilterTest.assertEquals (II)V
    | method-call(void junit.framework.Assert.assertEquals(int, int))
    |               LDC &quot;foo&quot;   (line 86)
    |               ALOAD_0     //
com.adteractive.framework.test.ConditionTestFilterTest this
    |               GETFIELD
com.adteractive.framework.test.ConditionTestFilterTest.ctf
Lcom/adteractive/framework/ConditionTestFilter;
    | method-call(java.lang.String com.adteractive.framework.FilterHelper.getName())
    | |             INVOKEVIRTUAL com.adteractive.framework.FilterHelper.getName
()Ljava/lang/String;
    | method-call(java.lang.String com.adteractive.framework.FilterHelper.getName())
    | method-call(void junit.framework.Assert.assertEquals(java.lang.String,
java.lang.String))
    | |             INVOKESTATIC
com.adteractive.framework.test.ConditionTestFilterTest.assertEquals
(Ljava/lang/String;Ljava/lang/String;)V
    | method-call(void junit.framework.Assert.assertEquals(java.lang.String,
java.lang.String))
    |               RETURN   (line 87)
    method-execution(void
com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilterStringFilterOfIOArray())
  end public void testConditionTestFilterStringFilterOfIOArray()

  private com.adteractive.framework.Filter[] makeBranches()   
org.aspectj.weaver.MethodDeclarationLineNumber: 89:2749
:
    method-execution(com.adteractive.framework.Filter[]
com.adteractive.framework.test.ConditionTestFilterTest.makeBranches())
    |               ICONST_3   (line 90)
    |               ANEWARRAY com.adteractive.framework.test.FilterHelperStub
    |               ASTORE_1
    |               ALOAD_1     // com.adteractive.framework.Filter[] branches 
 (line 91)
    |               ICONST_0
    |               NEW com.adteractive.framework.test.FilterHelperStub
    |               DUP
    |               LDC &quot;bf1&quot;
    |               INVOKESPECIAL
com.adteractive.framework.test.FilterHelperStub.&lt;init&gt; (Ljava/lang/String;)V
    |               AASTORE
    |               ALOAD_1     // com.adteractive.framework.Filter[] branches 
 (line 92)
    |               ICONST_1
    |               NEW com.adteractive.framework.test.FilterHelperStub
    |               DUP
    |               LDC &quot;bf12&quot;
    |               INVOKESPECIAL
com.adteractive.framework.test.FilterHelperStub.&lt;init&gt; (Ljava/lang/String;)V
    |               AASTORE
    |               ALOAD_1     // com.adteractive.framework.Filter[] branches 
 (line 93)
    |               ICONST_2
    |               NEW com.adteractive.framework.test.FilterHelperStub
    |               DUP
    |               LDC &quot;bf&quot;
    |               INVOKESPECIAL
com.adteractive.framework.test.FilterHelperStub.&lt;init&gt; (Ljava/lang/String;)V
    |               AASTORE
    |               ALOAD_1     // com.adteractive.framework.Filter[] branches 
 (line 94)
    |               ARETURN
    method-execution(com.adteractive.framework.Filter[]
com.adteractive.framework.test.ConditionTestFilterTest.makeBranches())
  end private com.adteractive.framework.Filter[] makeBranches()

end public class com.adteractive.framework.test.ConditionTestFilterTest

when implementing on shadow method-call(com.adteractive.framework.Filter[]
com.adteractive.framework.test.ConditionTestFilterTest.makeBranches())
when weaving type com.adteractive.framework.test.ConditionTestFilterTest
when weaving classes 
when weaving 
when incrementally building
BuildConfig[C:\cygwin\home\dwampler\work\workspace\.metadata\.plugins\org.eclipse.ajdt.core\adserver-service.generated.lst]
#Files=259</column>
            <column name="report_time">2005-10-19 14:01:25</column>
            <column name="report_timestamp">1129740000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d7d5947</column>
            <column name="commit_timestamp">1131720000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</column>
            <column name="result">7:weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</column>
        </table>
        <table name="aspectj">
            <column name="id">323</column>
            <column name="bug_id">112756</column>
            <column name="summary">Bug 112756  ajdt compiler generate false warnings</column>
            <column name="description">I was working on aspect that should raise an error for junit test methods that didn't
use any assertions. Apparently I had to use pointcut like &quot;call(void Assert+.assert*(..))&quot;
on which ajdt compiler complained about using &quot;assert&quot; keyword. I don't think such warning
should be shown in such case.

Anyway, here is the complete aspect code.


import
junit.framework.Test;
import junit.framework.Assert;
import junit.framework.AssertionFailedError;


public
aspect AssertionCounter {
  private ThreadLocal counts = new ThreadLocal();

  public
pointcut testMethodExecution() : 
    execution(void Test+.test*());

  public pointcut
assertCall() : 
    cflow(testMethodExecution()) &amp;&amp; call(void Assert+.assert*(..));

 
  
  void around() : testMethodExecution() {
    counts.set( new Counter());
  
 proceed();
    if(((Counter) counts.get()).getCount()==0) {
      throw new AssertionFailedError(&quot;No
assertions had been called&quot;);
    }
  }

  before() : assertCall() {
    ((Counter)
counts.get()).inc();
  }
  
}</column>
            <column name="report_time">2005-10-16 23:56:55</column>
            <column name="report_timestamp">1129520000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7a1002a</column>
            <column name="commit_timestamp">1131530000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">324</column>
            <column name="bug_id">112830</column>
            <column name="summary">Bug 112830  Warning &quot;couldn't find aspectjrt.jar on classpath&quot;</column>
            <column name="description">The compiler makes this warning if &quot;aspectrt.jar&quot; file has a different name like
&quot;aspectrt-1.3.jar&quot;, which is the case when compiling with maven.</column>
            <column name="report_time">2005-10-17 14:01:44</column>
            <column name="report_timestamp">1129570000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">1f51499</column>
            <column name="commit_timestamp">1131470000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
        </table>
        <table name="aspectj">
            <column name="id">325</column>
            <column name="bug_id">114005</column>
            <column name="summary">Bug 114005  annotated ITD fields on interfaces have no annotation</column>
            <column name="description"></column>
            <column name="report_time">2005-10-27 13:23:19</column>
            <column name="report_timestamp">1130430000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d9757d7</column>
            <column name="commit_timestamp">1131450000</column>
            <column name="files">tests/bugs150/pr114005/Declaration1.java
tests/bugs150/pr114005/Declaration2.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
            <column name="result">2:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
60:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">326</column>
            <column name="bug_id">90143</column>
            <column name="summary">Bug 90143  [itds] Problem with an ITD on an interface</column>
            <column name="description">If an ITD method is declared on an interface with an anonymous inner class 
returned as the result, the compiler generates an error for any &quot;super.xxx&quot; 
calls in the anonymous inner class.  The example project shows this with a 
nested inner interface, but the same problem occurs with an ITD of this kind 
on any interface.  The error does not occur if the ITD is declared on an inner 
class (as shown in the example) or a normal class.</column>
            <column name="report_time">2005-04-04 06:46:08</column>
            <column name="report_timestamp">1112610000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">21cf37d</column>
            <column name="commit_timestamp">1131120000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperFixerVisitor.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
124:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperFixerVisitor.java</column>
        </table>
        <table name="aspectj">
            <column name="id">327</column>
            <column name="bug_id">112476</column>
            <column name="summary">Bug 112476  &quot;declare parents&quot; does not work with bytecode weaving</column>
            <column name="description"></column>
            <column name="report_time">2005-10-13 09:44:09</column>
            <column name="report_timestamp">1129210000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a7e13f1</column>
            <column name="commit_timestamp">1131100000</column>
            <column name="files">tests/bugs150/pr112476/case1/lib/A.java
tests/bugs150/pr112476/case1/lib/B.java
tests/bugs150/pr112476/case1/lib/C.java
tests/bugs150/pr112476/case1/weaved/SuperC.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
31:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">328</column>
            <column name="bug_id">114744</column>
            <column name="summary">Bug 114744  NPE at CaptureBinding.java on wildcard in intertype field type</column>
            <column name="description">When compiling this program with ajc -1.5

public aspect Wildcard {
    Class&lt;? extends Wildcard&gt; Wildcard.cl;

    void foo() throws Exception {
	Wildcard ci = cl.newInstance();
    }
}

ajc throws this exception

java.lang.NullPointerException
        at
org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CaptureBinding.initializeBounds(CaptureBinding.java:75)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding.capture(ParameterizedTypeBinding.java:105)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleNameReference.resolveType(SingleNameReference.java:772)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:293)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:199)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:422)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:178)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:400)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1076)
        at
org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve(AspectDeclaration.java:114)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1125)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:305)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:514)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)
        at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:759)
        at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:225)
        at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:151)
        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)
        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)
        at org.aspectj.tools.ajc.Main.run(Main.java:326)
        at org.aspectj.tools.ajc.Main.runMain(Main.java:240)
        at org.aspectj.tools.ajc.Main.main(Main.java:83)</column>
            <column name="report_time">2005-11-02 07:56:02</column>
            <column name="report_timestamp">1130940000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ade32bc</column>
            <column name="commit_timestamp">1130950000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
3:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</column>
        </table>
        <table name="aspectj">
            <column name="id">329</column>
            <column name="bug_id">113510</column>
            <column name="summary">Bug 113510  readAspect</column>
            <column name="description">clearly define what the goal for readAspect is
old byte per byte reading cause NPE in some test case
current impl is hashcode for aspect name + classloader - ie unstable across
startups.</column>
            <column name="report_time">2005-10-24 05:36:56</column>
            <column name="report_timestamp">1130150000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">62d16d5</column>
            <column name="commit_timestamp">1130930000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</column>
            <column name="result">1:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</column>
        </table>
        <table name="aspectj">
            <column name="id">330</column>
            <column name="bug_id">108892</column>
            <column name="summary">Bug 108892  Load Time Weaving problem with Aspect Definition at 2 Levels of Hierarchy</column>
            <column name="description">I am trying to weave into Tomcat with a system-level aspect (META-INF/aop.xml 
is found in a jar on the system classpath), and also have a Web application 
with an aop.xml properly deployed. When I try to run them both together, only 
the system-level aspects work. If I remove the system-level aspect jar from the 
classpath, the application-level aspects work. What would be a reasonable way 
to isolate this into a test case? If I could package up a simple system.jar and 
app.war file for Tomcat 5.5.9, would that be useful for you to use in debugging 
it? I tried making a simple standalone version with 2 aop.xml files in the same 
app classloader but that works just fine.</column>
            <column name="report_time">2005-09-06 22:05:34</column>
            <column name="report_timestamp">1126060000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">794f9b5</column>
            <column name="commit_timestamp">1130500000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java
tests/java5/ataspectj/ataspectj/hierarchy/AppContainerTest.java
tests/java5/ataspectj/ataspectj/hierarchy/app/SubApp.java
tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java
weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</column>
            <column name="result">97:tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java
335:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java
393:weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</column>
        </table>
        <table name="aspectj">
            <column name="id">331</column>
            <column name="bug_id">113861</column>
            <column name="summary">Bug 113861  [generics] field-get problems when generic field is used.</column>
            <column name="description">Hi, 

When i'm compiling the following example, i'm getting this errors:

TestAspect.aj:21 [error] incompatible return type applying to field-get
(java.util.Set com.mprv.secsph.Test.intsSet)

Test.java:18 [error] incompatible return type applying to field-get
(java.util.Set com.mprv.secsph.Test.intsSet)

Here is the example
-------------------

Java Code:

package com;

public class Test {

	Set&lt;Integer&gt; intsSet;

	public Set&lt;Integer&gt; foo() {
18:         return intsSet;
	}
}

Aspect:

public privileged aspect TestAspect {
    pointcut gettingMember(Test t) :
                target(t) &amp;&amp;
                get(!public Set&lt;Integer&gt; com.*.*) &amp;&amp;
                !within(TestAspect);

21: Set&lt;Integer&gt; around(Test t) : gettingMemberCollection(t)  {
        Set s =  proceed(t);
        return s;
    }
}

I've tried many kinds of workarounds, and the only thing which worked, is 
defining the member field without using generics (regular Set) ... 

One more disturbing is, that this fiture worked(!) in M2 release. 

This is an example of the functionality that worked in my project (with M2), 
but now, also reports the same error:

Java code is the same, Aspect is:

public privileged aspect TestAspect {
    pointcut gettingMember(Test t) :
                target(t) &amp;&amp;
                get(!public Set com.*.*) &amp;&amp;
                !within(TestAspect);

    Set around(Test t) : gettingMemberCollection(t)  {
        Set s =  proceed(t);
        return s;
    }
}

Is it a bug? Or am i doing something wrong?

Thanks!
Misha.</column>
            <column name="report_time">2005-10-26 14:01:17</column>
            <column name="report_timestamp">1130350000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">8cea30f</column>
            <column name="commit_timestamp">1130440000</column>
            <column name="files">tests/bugs150/pr113861/Test.java
tests/bugs150/pr113861/TestAspect.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/Advice.java
weaver/src/org/aspectj/weaver/Member.java
weaver/src/org/aspectj/weaver/MemberImpl.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
84:weaver/src/org/aspectj/weaver/Member.java
131:weaver/src/org/aspectj/weaver/MemberImpl.java
260:weaver/src/org/aspectj/weaver/Advice.java</column>
        </table>
        <table name="aspectj">
            <column name="id">332</column>
            <column name="bug_id">99191</column>
            <column name="summary">Bug 99191  declare @field allowed for non existent fields</column>
            <column name="description">///// in this code
@interface anInterface{}
aspect B {	
  declare @field : int B.noSuchField : @anInterface; // should be an error
}
//////////////////

I don't get an error, even though B.noSuchField doesn't exist.

If I try declare @field on NoSuchCLass.noSuchField I do get an error though.</column>
            <column name="report_time">2005-06-09 12:08:17</column>
            <column name="report_timestamp">1118330000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2da9b31</column>
            <column name="commit_timestamp">1130430000</column>
            <column name="files">tests/bugs150/pr99191/pr99191_1.java
tests/bugs150/pr99191/pr99191_2.java
tests/bugs150/pr99191/pr99191_3.java
tests/bugs150/pr99191/pr99191_4.java
tests/bugs150/pr99191/pr99191_5.java
tests/bugs150/pr99191/pr99191_6.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</column>
            <column name="result">2:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
21:weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</column>
        </table>
        <table name="aspectj">
            <column name="id">333</column>
            <column name="bug_id">112615</column>
            <column name="summary">Bug 112615  -XhasMember is not processed correctly when passed from AJDT</column>
            <column name="description">To test this in AJDT install the bean example, add a new interface called I 
and then add the following line to BoundPoint.aj:

declare parents: hasmethod(* set*(..)) implements I;

Now open the AspectJ Compiler preference page and select &quot;Has Member&quot; on the 
advanced tab.  Click OK, rebuild and if the option was working the project 
would build correctly.  As it stands there is an error:

the type pattern hasmethod(* set*(..)) can only be used when the -XhasMember 
option is set</column>
            <column name="report_time">2005-10-14 08:26:11</column>
            <column name="report_timestamp">1129290000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">cc6862f</column>
            <column name="commit_timestamp">1130240000</column>
            <column name="files">ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</column>
            <column name="result">2:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
54:ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">334</column>
            <column name="bug_id">113511</column>
            <column name="summary">Bug 113511  LTW enhancements</column>
            <column name="description">Alex, here is the basic patch that is working well before you leave for the
weekend ;-) I'll let Matthew post it officially to bugzilla since it was his
idea. The earlier return from !enabled is a small addition I made that seems
to help further. It would be great to have this in HEAD so I can report
performance numbers based on it in part 2 of my article on developerworks
;-)

Hope you are enjoying your new addition!

Thanks!

Index: ClassLoaderWeavingAdaptor.java
===================================================================
RCS file:
/home/technology/org.aspectj/modules/loadtime/src/org/aspectj/weaver/loadtim
e/ClassLoaderWeavingAdaptor.java,v
retrieving revision 1.18
diff -u -r1.18 ClassLoaderWeavingAdaptor.java
--- ClassLoaderWeavingAdaptor.java      19 Oct 2005 13:11:36 -0000      1.18
+++ ClassLoaderWeavingAdaptor.java      21 Oct 2005 16:04:41 -0000
@@ -107,8 +107,13 @@

        // register the definitions
        registerDefinitions(weaver, loader);
+        if (!enabled) {
+               return;
+        }
        messageHandler = bcelWorld.getMessageHandler();

+
bcelWorld.setResolutionLoader((ClassLoader)null);//loader.getParent());
+
        // after adding aspects
        weaver.prepareForWeave();
    }
@@ -148,7 +153,11 @@
                           definitions.add(DocumentParser.parse(xml));
                       }
               }
-
+               if (definitions.isEmpty()) {
+                       enabled = false;
+                       return;
+               }
+
            // still go thru if definitions is empty since we will
configure
            // the default message handler in there
            registerOptions(weaver, loader, definitions);</column>
            <column name="report_time">2005-10-24 05:39:33</column>
            <column name="report_timestamp">1130150000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">70888dd</column>
            <column name="commit_timestamp">1130150000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/Aj.java
loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</column>
            <column name="result">1:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
2:loadtime/src/org/aspectj/weaver/loadtime/Aj.java</column>
        </table>
        <table name="aspectj">
            <column name="id">335</column>
            <column name="bug_id">111915</column>
            <column name="summary">Bug 111915  illegal change to pointcut declaration</column>
            <column name="description">org.aspectj.weaver.BCException
at
org.aspectj.weaver.patterns.ReferencePointcut.concretize1(ReferencePointcut.java:306)
at org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:229)
at
org.aspectj.weaver.patterns.ReferencePointcut.concretize1(ReferencePointcut.java:331)
at org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:229)
at org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:216)
at org.aspectj.weaver.Advice.concretize(Advice.java:273)
at org.aspectj.weaver.bcel.BcelAdvice.concretize(BcelAdvice.java:83)
at
org.aspectj.weaver.CrosscuttingMembers.addShadowMunger(CrosscuttingMembers.java:84)
at
org.aspectj.weaver.CrosscuttingMembers.addShadowMungers(CrosscuttingMembers.java:78)
at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers(ResolvedType.java:462)
at
org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:62)
at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java:426)
at
org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:283)
at
org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)
at
org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)
at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:760)
at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:225)
at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:151)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
at
org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)

BCException thrown: illegal change to pointcut declaration:
spike.np.CommandCase.handleCommand(BindingTypePattern(spike.np.OtherHandler$MyWorld,
0))
when batch building
BuildConfig[/home/guido/workspace/.metadata/.plugins/org.eclipse.ajdt.core/np.generated.lst]
#Files=11</column>
            <column name="report_time">2005-10-07 11:14:18</column>
            <column name="report_timestamp">1128700000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3021284</column>
            <column name="commit_timestamp">1129880000</column>
            <column name="files">tests/bugs150/pr111915.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</column>
            <column name="result">7:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
12:weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</column>
        </table>
        <table name="aspectj">
            <column name="id">336</column>
            <column name="bug_id">113073</column>
            <column name="summary">Bug 113073  weaveinfo messages not reported if applying declare @method on an ITD'd method</column>
            <column name="description">Given the following class:

@interface Annotation{}
aspect B {
	
	declare @method : public * C.anotherMethod(..) : @Annotation;
}

class C {
}

aspect D {
	public void C.anotherMethod(String s) {
	}
	public void C.anotherMethod() {
	}
}

I would expect a two weaveinfo messages of the form:

weaveinfo 'public void C.anotherMethod()' (pr99191_4.java) is annotated with
@Annotation method annotation from 'B' (pr99191_4.java:3)
weaveinfo 'public void C.anotherMethod(String)' (pr99191_4.java) is annotated
with @Annotation method annotation from 'B' (pr99191_4.java:3)

However, only the two &quot;intertyped&quot; messages are coming out.</column>
            <column name="report_time">2005-10-19 09:24:26</column>
            <column name="report_timestamp">1129730000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f06df41</column>
            <column name="commit_timestamp">1129820000</column>
            <column name="files">tests/bugs150/pr113073.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
3:weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</column>
        </table>
        <table name="aspectj">
            <column name="id">337</column>
            <column name="bug_id">112027</column>
            <column name="summary">Bug 112027  unexpected error unboundFormalInPC</column>
            <column name="description">In 1.5.0M4, I get error &quot;the parameter tis is not bound in [all branches of]
pointcut&quot;.  Not true of 1.2.1.  Untested in other development versions of 1.5.0.
  No branches (all &amp;&amp;) but duplicate specification of this(..).

------------------------------------------
package demo;

/**
 * PerThis
 */
public class PerThis {
    public static void main(String[] args) {
        new This().test();
    }
}
aspect PerThisTest perthis(pc()) {
    // TutIndex example-basic-perthis
    pointcut pc() : this(This) &amp;&amp; !within(PerThisTest) &amp;&amp; call(void run());
    before(This tis) : pc() &amp;&amp; this(tis){
        System.out.println(&quot;bef &quot; + this + &quot; &lt;-- &quot; + tis);
    }
}

class This {
    int i;
    void test() {
        run();
    }
    void run() {
        System.out.println(&quot;run &quot; + this);
    }
}</column>
            <column name="report_time">2005-10-08 02:49:49</column>
            <column name="report_timestamp">1128750000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ae612d9</column>
            <column name="commit_timestamp">1129650000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/patterns/BindingTypePattern.java
weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
180:weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java
260:weaver/src/org/aspectj/weaver/patterns/BindingTypePattern.java</column>
        </table>
        <table name="aspectj">
            <column name="id">338</column>
            <column name="bug_id">107299</column>
            <column name="summary">Bug 107299  -aspectpath -inpath arguments fail without drive letter</column>
            <column name="description">ajc doesn't recognize Windows absolute file paths that don't start with a drive 
letter, e.g., run:
ajc -inpath \test.jar
[error] build config error: bad inpath component: \test.jar

but

ajc -inpath c:\test.jar
works

ajc -aspectpath \test.jar Test.aj

[error] build config error: bad aspectpath: \test.jar

ajc -aspectpath c:\test.jar Test.aj
(works)</column>
            <column name="report_time">2005-08-18 01:41:22</column>
            <column name="report_timestamp">1124340000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">332a5df</column>
            <column name="commit_timestamp">1129350000</column>
            <column name="files">util/src/org/aspectj/util/ConfigParser.java</column>
            <column name="result">81:util/src/org/aspectj/util/ConfigParser.java</column>
        </table>
        <table name="aspectj">
            <column name="id">339</column>
            <column name="bug_id">112514</column>
            <column name="summary">Bug 112514  ajc compile crash, not giving information which class file cause it</column>
            <column name="description"></column>
            <column name="report_time">2005-10-13 13:24:15</column>
            <column name="report_timestamp">1129220000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">999d9b0</column>
            <column name="commit_timestamp">1129280000</column>
            <column name="files">bcel-builder/src/org/aspectj/apache/bcel/classfile/ClassParser.java</column>
            <column name="result">29:bcel-builder/src/org/aspectj/apache/bcel/classfile/ClassParser.java</column>
        </table>
        <table name="aspectj">
            <column name="id">340</column>
            <column name="bug_id">112243</column>
            <column name="summary">Bug 112243  Compiler Core Dump with Apparent Fix</column>
            <column name="description"></column>
            <column name="report_time">2005-10-11 14:27:35</column>
            <column name="report_timestamp">1129060000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">04e8dca</column>
            <column name="commit_timestamp">1129200000</column>
            <column name="files">weaver/src/org/aspectj/weaver/World.java
weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</column>
            <column name="result">8:weaver/src/org/aspectj/weaver/World.java
212:weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</column>
        </table>
        <table name="aspectj">
            <column name="id">341</column>
            <column name="bug_id">56779</column>
            <column name="summary">Bug 56779  [ajdoc] add ajdoc support for inter-type declarations and other declare forms</column>
            <column name="description">Currently ajdoc only exposes the &quot;Advises&quot; and &quot;Advised by&quot; relationships from 
the structure model.  

It needs to support inter-type field and member declarations using a UI 
similar to how Javadoc presents inherited members.

It also needs to support the other declare forms: error, warning, soft, 
parents, and precedence.</column>
            <column name="report_time">2004-03-30 12:31:51</column>
            <column name="report_timestamp">1080670000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ab6c7a5</column>
            <column name="commit_timestamp">1128530000</column>
            <column name="files">ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java
ajdoc/src/org/aspectj/tools/ajdoc/StructureUtil.java
ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java
ajdoc/testdata/declareForms/DeclareCoverage.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/DeclareFormsTest.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/ExecutionTestCase.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/PatternsTestCase.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/PointcutVisibilityTest.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/SpacewarTestCase.java
asm/src/org/aspectj/asm/IRelationship.java</column>
            <column name="result">9:asm/src/org/aspectj/asm/IRelationship.java
19:ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java
72:ajdoc/src/org/aspectj/tools/ajdoc/StructureUtil.java
94:ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java
170:ajdoc/testsrc/org/aspectj/tools/ajdoc/SpacewarTestCase.java
252:ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java
374:ajdoc/testsrc/org/aspectj/tools/ajdoc/ExecutionTestCase.java
398:ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java
411:ajdoc/testsrc/org/aspectj/tools/ajdoc/PointcutVisibilityTest.java
934:ajdoc/testsrc/org/aspectj/tools/ajdoc/PatternsTestCase.java</column>
        </table>
        <table name="aspectj">
            <column name="id">342</column>
            <column name="bug_id">92837</column>
            <column name="summary">Bug 92837  [inc-compilation] Incremental Compilation Fails for ITD's on Aspects</column>
            <column name="description">On my project, when I save an aspect that calls an inter-type declaration 
defined on itself, the incremental compiler gives a message like this:
The method logError(String, Exception) is undefined for the type Foo Foo.java

Running a full build clears the error.

This might be a compiler bug, or it might be AJDT (I never run command-line 
incremental compilation, so I don't know :-)).

Unfortunately, simple test cases or extracts of just the 2 aspects aren't 
reproducing the issue, so let me know if you need me to spend some time trying 
to create a small isolated version of the issue.</column>
            <column name="report_time">2005-04-26 17:48:55</column>
            <column name="report_timestamp">1114550000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">727b0f5</column>
            <column name="commit_timestamp">1128520000</column>
            <column name="files">tests/multiIncremental/PR92837/base/sample/AbstractDerived.java
tests/multiIncremental/PR92837/base/sample/Holder.java
tests/multiIncremental/PR92837/inc1/sample/AbstractDerived.java
tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
            <column name="result">81:tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">343</column>
            <column name="bug_id">91417</column>
            <column name="summary">Bug 91417  -Xreweavable should be the default</column>
            <column name="description">In order to facilitate widespread use of LTW we need to ensure code is 
compiled with Xreweavable. However we cannot rely on developers to use this 
flag so it must be the default. Unfortunately the current code bloat is 
unacceptable for large projects.</column>
            <column name="report_time">2005-04-14 11:16:09</column>
            <column name="report_timestamp">1113490000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">12e6334</column>
            <column name="commit_timestamp">1128520000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
loadtime/src/org/aspectj/weaver/loadtime/Options.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/core/AspectJCore.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BinaryFormsTestCase.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java
taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java
testing/newsrc/org/aspectj/testing/WeaveSpec.java
testing/src/org/aspectj/testing/harness/bridge/CompilerRun.java
tests/java5/ataspectj/ataspectj/ltwlog/MainVerboseAndShow.java
tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java
weaver/src/org/aspectj/weaver/WeaverStateInfo.java
weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java
weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java
weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</column>
            <column name="result">2:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
3:taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java
4:tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java
5:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
8:weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java
21:weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java
24:org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
26:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java
27:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
39:testing/src/org/aspectj/testing/harness/bridge/CompilerRun.java
63:org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java
64:loadtime/src/org/aspectj/weaver/loadtime/Options.java
84:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java
85:org.aspectj.ajdt.core/src/org/aspectj/ajdt/core/AspectJCore.java
101:weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
122:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java
147:weaver/src/org/aspectj/weaver/WeaverStateInfo.java
166:testing/newsrc/org/aspectj/testing/WeaveSpec.java
677:tests/java5/ataspectj/ataspectj/ltwlog/MainVerboseAndShow.java
1518:org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BinaryFormsTestCase.java</column>
        </table>
        <table name="aspectj">
            <column name="id">344</column>
            <column name="bug_id">108117</column>
            <column name="summary">Bug 108117  Complete implementation of abstract generic aspects</column>
            <column name="description">this requires
1/ completion of the parameterizeWith implementation in the pointcut AST nodes
2/ a much more exhaustive test suite around it.</column>
            <column name="report_time">2005-08-26 10:35:57</column>
            <column name="report_timestamp">1125070000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">451fea8</column>
            <column name="commit_timestamp">1128510000</column>
            <column name="files">weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java
weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java
weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java
weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java
weaver/src/org/aspectj/weaver/patterns/DeclareAnnotation.java
weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java
weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java
weaver/src/org/aspectj/weaver/patterns/PerCflow.java
weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java
weaver/src/org/aspectj/weaver/patterns/PerObject.java
weaver/src/org/aspectj/weaver/patterns/PerSingleton.java
weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java
weaver/src/org/aspectj/weaver/patterns/Pointcut.java
weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java
weaver/src/org/aspectj/weaver/patterns/TypePattern.java
weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java
weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/patterns/Pointcut.java
8:weaver/src/org/aspectj/weaver/patterns/TypePattern.java
28:weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java
32:weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java
33:weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java
34:weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java
36:weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java
40:weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java
41:weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java
45:weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java
46:weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java
54:weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java
56:weaver/src/org/aspectj/weaver/patterns/PerObject.java
57:weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java
58:weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java
60:weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java
61:weaver/src/org/aspectj/weaver/patterns/DeclareAnnotation.java
63:weaver/src/org/aspectj/weaver/patterns/PerCflow.java
64:weaver/src/org/aspectj/weaver/patterns/PerSingleton.java
78:weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java
121:weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java
198:weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java</column>
        </table>
        <table name="aspectj">
            <column name="id">345</column>
            <column name="bug_id">111481</column>
            <column name="summary">Bug 111481  varargs doesn't work for ITD'd constructors</column>
            <column name="description"></column>
            <column name="report_time">2005-10-04 12:25:10</column>
            <column name="report_timestamp">1128440000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2b0e675</column>
            <column name="commit_timestamp">1128500000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeConstructorDeclaration.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
22:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeConstructorDeclaration.java</column>
        </table>
        <table name="aspectj">
            <column name="id">346</column>
            <column name="bug_id">77269</column>
            <column name="summary">Bug 77269  Advice on inner classes not show in Outline view or gutter</column>
            <column name="description">Advice associated with pointcuts that match join points in inner classes are 
not shown. Declare warning/error are shown however. See attached screenshot 
for example below. Notice WEAVEINFO messages indicate problem is in AJDT not 
AspectJ. Also notice phantom entry in Outline view &quot;injar aspectL Test.java&quot;.

package bug_nnnnn;

public class Test {

	public void test () {
		new Runnable() {
			public void run() {
				try {
					throw new Exception();
				}
				catch (Exception ex) {
					handleException(ex);
				}
			}
		};
	}
	
	public static void handleException (Throwable th) {
		
	}
	
	public static void main(String[] args) {
		try {
			throw new Exception();
		}
		catch (Exception ex) {
			handleException(ex);
		}
	}
}
aspect Aspect {
	
	declare warning : call(void handleException(..)) &amp;&amp; !within(Aspect) :
		&quot;Only Aspect should handle exceptions&quot;;
	
	pointcut caughtExceptions (Throwable th) :
		handler(Throwable+) &amp;&amp; args(th);
	
	before (Throwable th) : caughtExceptions(th) {
		Test.handleException(th);
	}
}</column>
            <column name="report_time">2004-10-29 06:25:28</column>
            <column name="report_timestamp">1099050000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">4573068</column>
            <column name="commit_timestamp">1128410000</column>
            <column name="files">asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
89:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java
228:asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</column>
        </table>
        <table name="aspectj">
            <column name="id">347</column>
            <column name="bug_id">108118</column>
            <column name="summary">Bug 108118  Complete implementation of @SuppressAjWarnings</column>
            <column name="description">ensure that @SuppressAJWarnings are indeed suppressed during pointcut
operations. This requires wrapping major pointcut operations with calls to Lint
from the associated advice.</column>
            <column name="report_time">2005-08-26 10:37:42</column>
            <column name="report_timestamp">1125070000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">81a0790</column>
            <column name="commit_timestamp">1128010000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/SuppressedWarnings.java
weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
weaver/src/org/aspectj/weaver/bcel/Utility.java</column>
            <column name="result">4:weaver/src/org/aspectj/weaver/bcel/Utility.java
8:tests/src/org/aspectj/systemtest/ajc150/SuppressedWarnings.java
32:weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</column>
        </table>
        <table name="aspectj">
            <column name="id">348</column>
            <column name="bug_id">101047</column>
            <column name="summary">Bug 101047  Weaver produces wrong local variable table bytecode</column>
            <column name="description">AspectJ version: DEVELOPMENT (also observed in 1.2.1)
When weaving with a before or after advice, the generated local variable table 
will, on branch instructions, offset the &quot;length&quot; field of a local variable 
wrongly by one instruction. Also, the weaver will mix up local variables with 
the same name, thus violating the java VM specification:

// Test.aj
aspect Test {
	before() : ( execution(* Foo.foo(..) ) ) {
		System.out.println(&quot;before&quot;);
		
	}
// Foo.java
public class Foo {
    private String myString = &quot;A String&quot;;
    public static void main(String[] args) {
        new Foo().foo();  
    }
    private void foo() { 
        String myLocal = myString;
        if (myLocal.endsWith(&quot;X&quot;)) {
      	   String local1 = &quot;local1&quot;;
             System.out.println(local1);
        } else if (myLocal.endsWith(&quot;Y&quot;)) {
             String local2 = &quot;local2&quot;;
             System.out.println(local2);
        } else {
      	  String local1 = &quot;local3&quot;;
            System.out.println(local1);
        }
      }
}
---
We compilw with ajc -sourceroots . and dumps Foo with javap:
javap -c -l -s -private Foo
....
....
private void foo();
  Signature: ()V
  Code:
   0:   invokestatic    #65; //Method Test.aspectOf:()LTest;
   3:   invokevirtual   #68; //Method Test.ajc$before$Test$1$f0485e90:()V
   6:   aload_0
   7:   getfield        #15; //Field myString:Ljava/lang/String;
   10:  astore_1
   11:  aload_1
   12:  ldc     #30; //String X
   14:  invokevirtual   #36; //Method java/lang/String.endsWith:
(Ljava/lang/String;)Z
   17:  ifeq    33
   20:  ldc     #38; //String local1
   22:  astore_2
   23:  getstatic       #44; //Field java/lang/System.out:Ljava/io/PrintStream;
   26:  aload_2
   27:  invokevirtual   #50; //Method java/io/PrintStream.println:
(Ljava/lang/String;)V
   30:  goto    65
   33:  aload_1
   34:  ldc     #52; //String Y
   36:  invokevirtual   #36; //Method java/lang/String.endsWith:
(Ljava/lang/String;)Z
   39:  ifeq    55
   42:  ldc     #54; //String local2
   44:  astore_2
   45:  getstatic       #44; //Field java/lang/System.out:Ljava/io/PrintStream;
   48:  aload_2
   49:  invokevirtual   #50; //Method java/io/PrintStream.println:
(Ljava/lang/String;)V
   52:  goto    65
   55:  ldc     #56; //String local3
   57:  astore_2
   58:  getstatic       #44; //Field java/lang/System.out:Ljava/io/PrintStream;
   61:  aload_2
   62:  invokevirtual   #50; //Method java/io/PrintStream.println:
(Ljava/lang/String;)V
   65:  return

  LineNumberTable: 
   line 7: 6
   line 8: 11
   line 9: 20
   line 10: 23
   line 11: 33
   line 12: 42
   line 13: 45
   line 15: 55
   line 16: 58
   line 18: 65
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   6      60      0    this       LFoo;
   11      55      1    myLocal       Ljava/lang/String;
   45      12      2    local2       Ljava/lang/String;
   23      43      2    local1       Ljava/lang/String;

We see that the two occurences of the &quot;local1&quot; variable erroneously have been 
combined into one entry, starting at byte 23 and ending at byte 66. This is 
obviously wrong, since &quot;local1&quot; has no value in the &quot;local2&quot; block. Secondly, 
the &quot;local2&quot; variable end is wrongly offset by one instruction offset.</column>
            <column name="report_time">2005-06-21 10:13:24</column>
            <column name="report_timestamp">1119360000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">85a4b0a</column>
            <column name="commit_timestamp">1127940000</column>
            <column name="files">bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java</column>
            <column name="result">26:bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java</column>
        </table>
        <table name="aspectj">
            <column name="id">349</column>
            <column name="bug_id">101407</column>
            <column name="summary">Bug 101407  NullPointerException when selecting Save As in top menu</column>
            <column name="description">The Steps of Reproduce:
1. Open BIRT
2. New a project
3. In top menu of File, click New -&gt; Report to create a report
4. Drag a table element from Palette into the report of Layout view
5. Save the report
6. Drag mouse to select two cells in the table
7. Select the report in Navigator view
8. In the top menu, select Save As... 
9. In the Save As pop up dialog window, change the file name in the File name 
field, then click OK button


Expected Result:
 There is no error to click OK button

Actual Result:
 Error window pops up and the error log as follows:
java.lang.NullPointerException
	at org.eclipse.gef.editparts.AbstractEditPart.getRoot
(AbstractEditPart.java:587)
	at org.eclipse.gef.editparts.AbstractEditPart.getRoot
(AbstractEditPart.java:587)
	at org.eclipse.gef.editparts.AbstractEditPart.getViewer
(AbstractEditPart.java:637)
	at 
org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableU
til.getSelectionCells(TableUtil.java:258)
	at 
org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableE
ditPart.canMerge(TableEditPart.java:1244)
	at 
org.eclipse.birt.report.designer.internal.ui.editors.schematic.actions.MergeAct
ion.calculateEnabled(MergeAction.java:51)
	at org.eclipse.gef.ui.actions.WorkbenchPartAction.isEnabled
(WorkbenchPartAction.java:111)
	at org.eclipse.ui.actions.RetargetAction.setActionHandler
(RetargetAction.java:249)
	at org.eclipse.ui.actions.RetargetAction.partActivated
(RetargetAction.java:144)
	at org.eclipse.ui.internal.PartListenerList$1.run
(PartListenerList.java:49)
	at org.eclipse.core.internal.runtime.InternalPlatform.run
(InternalPlatform.java:616)
	at org.eclipse.core.runtime.Platform.run(Platform.java:747)
	at org.eclipse.ui.internal.PartListenerList.firePartActivated
(PartListenerList.java:47)
	at org.eclipse.ui.internal.WorkbenchPage.firePartActivated
(WorkbenchPage.java:1370)
	at org.eclipse.ui.internal.WorkbenchPage.setActivePart
(WorkbenchPage.java:2738)
	at org.eclipse.ui.internal.WorkbenchPage.requestActivation
(WorkbenchPage.java:2415)
	at org.eclipse.ui.internal.PartPane.requestActivation
(PartPane.java:304)
	at org.eclipse.ui.internal.EditorPane.requestActivation
(EditorPane.java:127)
	at org.eclipse.ui.internal.PartPane.handleEvent(PartPane.java:284)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:796)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:820)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:801)
	at org.eclipse.swt.widgets.Shell.setActiveControl(Shell.java:935)
	at org.eclipse.swt.widgets.Control.sendFocusEvent(Control.java:1768)
	at org.eclipse.swt.widgets.Control.WM_SETFOCUS(Control.java:4139)
	at org.eclipse.swt.widgets.Canvas.WM_SETFOCUS(Canvas.java:239)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:3032)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:3338)
	at org.eclipse.swt.internal.win32.OS.SetFocus(Native Method)
	at org.eclipse.swt.widgets.Control.forceFocus(Control.java:607)
	at org.eclipse.swt.widgets.Control.setFocus(Control.java:2054)
	at org.eclipse.swt.widgets.Composite.setFocus(Composite.java:447)
	at org.eclipse.gef.ui.parts.GraphicalEditor.setFocus
(GraphicalEditor.java:346)
	at org.eclipse.ui.part.MultiPageEditorPart.setFocus
(MultiPageEditorPart.java:545)
	at org.eclipse.ui.part.MultiPageEditorPart.setFocus
(MultiPageEditorPart.java:519)
	at org.eclipse.ui.part.MultiPageEditorPart.setFocus
(MultiPageEditorPart.java:545)
	at org.eclipse.ui.part.MultiPageEditorPart.setFocus
(MultiPageEditorPart.java:519)
	at org.eclipse.ui.part.MultiPageEditorPart.pageChange
(MultiPageEditorPart.java:433)
	at org.eclipse.birt.report.designer.ui.editors.ReportEditor.pageChange
(ReportEditor.java:1179)
	at 
org.eclipse.birt.report.designer.ui.editors.ReportEditor.rebuildReportDesign
(ReportEditor.java:584)
	at org.eclipse.birt.report.designer.ui.editors.ReportEditor.setInput
(ReportEditor.java:547)
	at 
org.eclipse.birt.report.designer.ui.editors.ReportEditor.performSaveAs
(ReportEditor.java:870)
	at org.eclipse.birt.report.designer.ui.editors.ReportEditor.doSaveAs
(ReportEditor.java:812)
	at org.eclipse.ui.internal.SaveAsAction.run(SaveAsAction.java:64)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:881)
	at 
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:915)
	at org.eclipse.jface.action.ActionContributionItem.access$2
(ActionContributionItem.java:866)
	at org.eclipse.jface.action.ActionContributionItem$7.handleEvent
(ActionContributionItem.java:785)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:796)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2772)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2431)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1377)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1348)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench
(Workbench.java:254)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:141)
	at org.eclipse.ui.internal.ide.IDEApplication.run
(IDEApplication.java:96)
	at org.eclipse.core.internal.runtime.PlatformActivator$1.run
(PlatformActivator.java:335)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run
(EclipseStarter.java:273)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run
(EclipseStarter.java:129)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:185)
	at org.eclipse.core.launcher.Main.run(Main.java:704)
	at org.eclipse.core.launcher.Main.main(Main.java:688)</column>
            <column name="report_time">2005-06-23 02:44:44</column>
            <column name="report_timestamp">1119510000</column>
            <column name="status">closed fixed</column>
            <column name="commit">97520cf</column>
            <column name="commit_timestamp">1127860000</column>
            <column name="files">bcel-builder/src/org/aspectj/apache/bcel/generic/LocalVariableGen.java
weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java
weaver/src/org/aspectj/weaver/bcel/LocalVariableTag.java</column>
            <column name="result">3:weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java
1423:bcel-builder/src/org/aspectj/apache/bcel/generic/LocalVariableGen.java
2160:weaver/src/org/aspectj/weaver/bcel/LocalVariableTag.java</column>
        </table>
        <table name="aspectj">
            <column name="id">350</column>
            <column name="bug_id">102933</column>
            <column name="summary">Bug 102933  problem with Object arrays and clone() with 1.4 .class compatibility</column>
            <column name="description"></column>
            <column name="report_time">2005-07-06 16:20:01</column>
            <column name="report_timestamp">1120680000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">fb428d0</column>
            <column name="commit_timestamp">1127830000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">2:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">351</column>
            <column name="bug_id">88900</column>
            <column name="summary">Bug 88900  Unnecessary warning for ITDs</column>
            <column name="description">Consider the following aspect:

public aspect RunnableDefaultImpl {
    public void Runnable.run() {
    }
}

(Note that it makes little sense to have a default implementation for
 Runnable. However, I am using it to allow easy reproduction of the bug.)

Compiling this aspect leads to the following warning:

...\test\RunnableDefaultImpl.aj:9 [warning]
 this affected type is not exposed to the weaver: java.lang.Runnable [Xlint:type
NotExposedToWeaver]
public void Runnable.run() {
                     ^^^

This warning isn't really necessary as weaver doesn't (and shouldn't) need
to have Runnable exposed. In fact, everything works as expected already.

Now it will be a good warning (or even error), if I was trying to introduce a
new method, such as in the following aspect:
public aspect RunnableDefaultImpl {
    public void Runnable.walk() {
    }
}</column>
            <column name="report_time">2005-03-23 13:37:57</column>
            <column name="report_timestamp">1111600000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">e76b370</column>
            <column name="commit_timestamp">1127830000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/ResolvedTypeMunger.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
332:weaver/src/org/aspectj/weaver/ResolvedTypeMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">352</column>
            <column name="bug_id">77076</column>
            <column name="summary">Bug 77076  Weaving into jar fails if some of the referred classes are unavailable</column>
            <column name="description">I am trying to profile JDBC access in a Spring-based application.
Since all the JDBC interaction is performed through Spring classes,
I need to weave into spring.jar. However, many of the classes 
referred by spring.jar aren't available to me (I am not using 
the functionality implemented by many of the classes). When I 
try to weave into spring.jar I get errors complaining that it 
can't find types for those classes.

I expected that ajc would ignore unknown classes unless weaving
would be affected by content/API of those classes.

Using jar files that refer to foreign classes that one may
never have/need is a common scenario. For example, spring.jar
refers to Velocity, Struts, JDO, Hibernate, Quartz classes;
I am unlikely to use all of these referred frameworks in an
application. This bug/limitation prevents using AspectJ with
such jars.

To reproduce the bug in a controlled environment, I created
the following aspect which should make the weaving process
a pass-thru filter (no join point is matched by the pointcut)

class TemporaryClass {
}

public aspect NoWeaveAspect {
    before() : call(* TemporaryClass.*(..)) &amp;&amp; within(org.spring..*) {
    }
}

Weaving this aspect with spring.jar should result in logically
identical jar file. However, when I compile using the following
command (or equivalent ant task), I get the following errors:

C:\work\aop\bugs\injar-with-nonexisting-classes&gt;ajc -version
AspectJ Compiler 1.2.1rc1 built on Friday Oct 22, 2004 at 13:31:47 GMT

C:\work\aop\bugs\injar-with-nonexisting-classes&gt;ajc -injars spring.jar -outjar s
pring-woven.jar NoWeaveAspect.java
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.quartz.xml.JobSchedulingDataProcessor
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.quartz.StatefulJob
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.quartz.SimpleTrigger
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe freemarker.cache.TemplateLoader
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.aopalliance.intercept.MethodInterceptor
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.quartz.CronTrigger
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.aopalliance.intercept.MethodInterceptor
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.quartz.JobDetail
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.quartz.Job
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.quartz.impl.jdbcjobstore.JobStoreCMT
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.apache.struts.action.PlugIn
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.apache.velocity.tools.generic.NumberTool
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.apache.struts.action.Action
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.apache.struts.tiles.TilesRequestProcessor
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.apache.struts.action.RequestProcessor
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.apache.velocity.runtime.resource.loader.ResourceLoader
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.apache.velocity.runtime.log.LogSystem
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe javax.faces.el.VariableResolver
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.apache.velocity.tools.generic.DateTool
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.apache.commons.attributes.AttributeRepositoryClass
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.aopalliance.intercept.MethodInterceptor
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.aopalliance.intercept.MethodInterceptor
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe net.sf.cglib.proxy.MethodInterceptor
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.aopalliance.intercept.MethodInterceptor
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.apache.commons.pool.PoolableObjectFactory
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.aopalliance.intercept.MethodInterceptor
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe net.sf.cglib.proxy.MethodInterceptor
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe net.sf.cglib.proxy.Dispatcher
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.aopalliance.intercept.MethodInvocation
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe net.sf.cglib.proxy.CallbackFilter
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe net.sf.cglib.proxy.NoOp
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe net.sf.hibernate.transaction.TransactionManagerLookup
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe net.sf.hibernate.connection.ConnectionProvider
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe net.sf.hibernate.UserType
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.apache.ojb.broker.accesslayer.ConnectionFactoryManagedImpl
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.aopalliance.intercept.MethodInterceptor
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe net.sf.cglib.proxy.MethodInterceptor
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe net.sf.cglib.proxy.CallbackFilter
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.aopalliance.intercept.MethodInterceptor
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.aopalliance.intercept.MethodInterceptor
(no source information available)
C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty
pe org.aopalliance.intercept.MethodInterceptor
(no source information available)

41 errors</column>
            <column name="report_time">2004-10-26 23:43:59</column>
            <column name="report_timestamp">1098850000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a4a9090</column>
            <column name="commit_timestamp">1127550000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/OutjarTest.java
weaver/src/org/aspectj/weaver/JoinPointSignature.java
weaver/src/org/aspectj/weaver/JoinPointSignatureIterator.java
weaver/src/org/aspectj/weaver/Member.java
weaver/src/org/aspectj/weaver/MemberImpl.java
weaver/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java
weaver/src/org/aspectj/weaver/ReferenceType.java
weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java
weaver/src/org/aspectj/weaver/ResolvedType.java
weaver/src/org/aspectj/weaver/WeaverMessages.java
weaver/src/org/aspectj/weaver/World.java
weaver/src/org/aspectj/weaver/bcel/BcelAccessForInlineMunger.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java
weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java
weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java
weaver/src/org/aspectj/weaver/patterns/TypePatternList.java
weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</column>
            <column name="result">2:weaver/src/org/aspectj/weaver/World.java
8:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java
14:weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java
15:weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java
16:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
28:weaver/src/org/aspectj/weaver/ResolvedType.java
29:weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java
30:weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java
94:weaver/src/org/aspectj/weaver/WeaverMessages.java
101:weaver/src/org/aspectj/weaver/patterns/TypePatternList.java
151:weaver/src/org/aspectj/weaver/JoinPointSignature.java
154:weaver/src/org/aspectj/weaver/MemberImpl.java
183:org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/OutjarTest.java
580:weaver/src/org/aspectj/weaver/bcel/BcelAccessForInlineMunger.java
903:weaver/src/org/aspectj/weaver/ReferenceType.java
1265:weaver/src/org/aspectj/weaver/Member.java</column>
        </table>
        <table name="aspectj">
            <column name="id">353</column>
            <column name="bug_id">109173</column>
            <column name="summary">Bug 109173  Weaving Adaptor enhancements for performance, configuration and diagnosis</column>
            <column name="description">Here are some suggested enhancements as a result of exhaustive testing in the 
Eclipse/OSGi environment.

1.	If no aspects are declared for a particular class loader, either 
because there are no visible aop.xml files or they contain no aspect 
definitions, then we should short-circuit the implementation of weaveClass() 
so that byte-code is not unnecessarily passed to the weaver. This is 
especially important under OSGi where there may be hundreds of class bundles, 
each with their own class loader only some of which are being woven. We can 
use the existing enabled flag.
2.	As previously discussed on aspectj-dev the META-INF directory is 
considered private in OSGi and is therefore an inappropriate location for 
aop.xml files declaring shared aspects. I therefore propose a System property 
to set the a resource names for finding aop.xml files which would default 
to META-INF/aop.xml e.g. -Dorg.aspectj.weaver.loadtime.configuration=META-
INF/aop.xml;org/aspectj/aop.xml.
3.	We should not be catching Throwable  in Aj. Instead we should catch 
known exceptions e.g. BCException and issue messages while letting other 
runtime exceptions pass back to the class loader. A user provided 
IMessageHandler implementation can decide under what circumstances to abort. 
Alternatively if Aj is considered to be a safe interface for weaving agents 
e.g. JVMTI then the dump logic it contains should be moved to the 
WeavingAdaptor so that it can be used directly from a class loader.</column>
            <column name="report_time">2005-09-09 12:49:04</column>
            <column name="report_timestamp">1126280000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">03b20bc</column>
            <column name="commit_timestamp">1127490000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/Aj.java
loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java
loadtime/src/org/aspectj/weaver/loadtime/IWeavingContext.java</column>
            <column name="result">2:loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
7:loadtime/src/org/aspectj/weaver/loadtime/Aj.java</column>
        </table>
        <table name="aspectj">
            <column name="id">354</column>
            <column name="bug_id">109283</column>
            <column name="summary">Bug 109283  Invalid &quot;indirect static access&quot; warning on EnumSet.noneOf</column>
            <column name="description">When compiling AspectJ enabled projects in Java 5.0 source mode with &quot;Indirect
access to static modifier&quot; warnings on, the following code incorrectly gives a
compiler warning (this doesn't occur in non-AspectJ enabled projects):

public class Test {
    enum Foo {
        Wibble,
        Wobble,
        Woo;
    }

    public static void main(String[] args) {
        EnumSet&lt;Foo&gt; set = EnumSet.noneOf(Foo.class);
    }
}</column>
            <column name="report_time">2005-09-12 08:37:45</column>
            <column name="report_timestamp">1126530000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">8a0f59a</column>
            <column name="commit_timestamp">1127400000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/AjcMemberMaker.java
weaver/src/org/aspectj/weaver/bcel/BcelPerClauseAspectAdder.java</column>
            <column name="result">2:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
29:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
75:weaver/src/org/aspectj/weaver/AjcMemberMaker.java
183:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java
1636:weaver/src/org/aspectj/weaver/bcel/BcelPerClauseAspectAdder.java</column>
        </table>
        <table name="aspectj">
            <column name="id">355</column>
            <column name="bug_id">76374</column>
            <column name="summary">Bug 76374  Problem with declare parents when using non-public classes</column>
            <column name="description">Non-public classes, when explicitly named, do not get woven.

The test case below exhibits this problem when the package declaration is
uncommented.

If the package declaration is commented out, the class is woven correctly.
If the package declaration is uncommented, a compilation failure occurs with
AspectJ 1.2.  According to Andrew Clement, AspectJ 1.2.1 compiles, but does not
weave.
If the &quot;MyInnerClass&quot; is changed to be public [regardless of the package
declaration status], the class is woven correctly.

Also:
When the &quot;MyInnerClass&quot; is moved out of &quot;MyClass&quot;, but kept in the MyClass.java
file, then the following behavior is exhibited:
If the package declaration is commented out, the class is woven correctly.
If the package declaration is uncommented out, a compilation failure occurs with
AspectJ 1.2.
Note, in this case, MyInnerClass cannot be declared as public.

It also appears that if the RunnableAspect is placed in the same package as
&quot;MyClass&quot;, weaving occurs correctly, regardless of any class access modifiers

&lt;MyClass.java&gt;

// package mypackage;

public class MyClass {
 public MyClass() {
   MyInnerClass mic = new MyInnerClass();
   if (mic instanceof Runnable)
     mic.run();
 }

 class MyInnerClass {
   public void run() {
     System.out.println(&quot;In MyInnerClass.run()!!&quot;);
   }
 }

 public static void main(String args[]) {
   new MyClass();
 }
}

&lt;/MyClass.java&gt;

&lt;RunnableAspect.aj&gt;

public aspect RunnableAspect {
 declare parents: MyClass$MyInnerClass implements Runnable;
 // declare parents: mypackage.MyClass$MyInnerClass implements Runnable;
}

&lt;/RunnableAspect.aj&gt;</column>
            <column name="report_time">2004-10-15 13:23:09</column>
            <column name="report_timestamp">1097860000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ca9c1f7</column>
            <column name="commit_timestamp">1127320000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">356</column>
            <column name="bug_id">104957</column>
            <column name="summary">Bug 104957  NullPointerException when running ajc on gij</column>
            <column name="description">When running ajc 1.2.1 on the GNU Interpreter for Java 4.0.1, I received this error:

java.lang.NullPointerException
   at
org.aspectj.apache.bcel.generic.InstructionComparator$1.equals(org.aspectj.apache.bcel.generic.Instruction,
org.aspectj.apache.bcel.g
eneric.Instruction) (/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)
   at org.aspectj.apache.bcel.generic.Instruction.equals(java.lang.Object)
(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)
   at java.util.AbstractMap.equals(java.lang.Object, java.lang.Object)
(/usr/lib/libgcj.so.6.0.0)
   at java.util.HashMap.put(java.lang.Object, java.lang.Object)
(/usr/lib/libgcj.so.6.0.0)
   at java.util.HashSet.add(java.lang.Object) (/usr/lib/libgcj.so.6.0.0)
   at
org.aspectj.apache.bcel.generic.InstructionHandle.addTargeter(org.aspectj.apache.bcel.generic.InstructionTargeter)
(/tmp/cache/local/
aspectj1.2/lib/aspectjweaver.jar.so)
   at
org.aspectj.apache.bcel.generic.BranchInstruction.notifyTarget(org.aspectj.apache.bcel.generic.InstructionHandle,
org.aspectj.apache.
bcel.generic.InstructionHandle,
org.aspectj.apache.bcel.generic.InstructionTargeter)
(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)
   at
org.aspectj.apache.bcel.generic.BranchInstruction.setTarget(org.aspectj.apache.bcel.generic.InstructionHandle)
(/tmp/cache/local/aspe
ctj1.2/lib/aspectjweaver.jar.so)
   at org.aspectj.apache.bcel.generic.BranchInstruction.BranchInstruction(short,
org.aspectj.apache.bcel.generic.InstructionHandle) (/tmp/c
ache/local/aspectj1.2/lib/aspectjweaver.jar.so)
   at org.aspectj.apache.bcel.generic.Select.Select(short, int[],
org.aspectj.apache.bcel.generic.InstructionHandle[], org.aspectj.apache.b
cel.generic.InstructionHandle)
(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)
   at org.aspectj.apache.bcel.generic.LOOKUPSWITCH.LOOKUPSWITCH(int[],
org.aspectj.apache.bcel.generic.InstructionHandle[], org.aspectj.apa
che.bcel.generic.InstructionHandle)
(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)
   at org.aspectj.apache.bcel.generic.SWITCH.SWITCH(int[],
org.aspectj.apache.bcel.generic.InstructionHandle[], org.aspectj.apache.bcel.gen
eric.InstructionHandle, int) (/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)
   at org.aspectj.apache.bcel.generic.SWITCH.SWITCH(int[],
org.aspectj.apache.bcel.generic.InstructionHandle[], org.aspectj.apache.bcel.gen
eric.InstructionHandle) (/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)
   at
org.aspectj.weaver.bcel.Utility.copyInstruction(org.aspectj.apache.bcel.generic.Instruction)
(/tmp/cache/local/aspectj1.2/lib/aspectj
weaver.jar.so)
   at
org.aspectj.weaver.bcel.LazyMethodGen.packBody(org.aspectj.apache.bcel.generic.MethodGen)
(/tmp/cache/local/aspectj1.2/lib/aspectjwea
ver.jar.so)
   at org.aspectj.weaver.bcel.LazyMethodGen.pack()
(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)
   at org.aspectj.weaver.bcel.LazyMethodGen.getMethod()
(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)
   at
org.aspectj.weaver.bcel.LazyClassGen.writeBack(org.aspectj.weaver.bcel.BcelWorld)
(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.
so)
   at
org.aspectj.weaver.bcel.LazyClassGen.getJavaClass(org.aspectj.weaver.bcel.BcelWorld)
(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.j
ar.so)
   at
org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor(org.aspectj.weaver.bcel.LazyClassGen)
(/tmp/cache/local/aspectj1.2/lib/aspectjwea
ver.jar.so)
   at
org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(org.aspectj.weaver.bcel.UnwovenClassFile,
org.aspectj.weaver.bcel.BcelObjectType, o
rg.aspectj.weaver.IWeaveRequestor)
(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)
   at
org.aspectj.weaver.bcel.BcelWeaver.weave(org.aspectj.weaver.IClassFileProvider)
(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so
)
   at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave() (Unknown Source)
   at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling()
(Unknown Source)
   at
org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(org.aspectj.org.eclipse.jdt.internal.compiler.env.ICompilationUnit[])
(Unknown Source)
   at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(java.util.List)
(Unknown Source)
   at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(org.aspectj.ajdt.internal.core.builder.AjBuildConfig,
org.aspectj.bridg
e.IMessageHandler, boolean) (Unknown Source)
   at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(org.aspectj.ajdt.internal.core.builder.AjBuildConfig,
org.aspectj.br
idge.IMessageHandler) (Unknown Source)
   at
org.aspectj.ajdt.ajc.AjdtCommand.doCommand(org.aspectj.bridge.IMessageHandler,
boolean) (Unknown Source)
   at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(java.lang.String[],
org.aspectj.bridge.IMessageHandler) (Unknown Source)
   at org.aspectj.tools.ajc.Main.run(java.lang.String[],
org.aspectj.bridge.IMessageHolder) (Unknown Source)
   at org.aspectj.tools.ajc.Main.runMain(java.lang.String[], boolean) (Unknown
Source)
   at org.aspectj.tools.ajc.Main.main(java.lang.String[]) (Unknown Source)
   at gnu.java.lang.MainThread.call_main() (/usr/lib/libgcj.so.6.0.0)
   at gnu.java.lang.MainThread.run() (/usr/lib/libgcj.so.6.0.0)

Unfortunately, the above stack trace contains no line number information;
however, by running the program under the gdb debugger, I was able to get a
backtrace with line numbers for the relevant part of the stack trace:

(gdb) bt
#0  0x011a0246 in
org.aspectj.apache.bcel.generic.InstructionComparator$1.equals(org.aspectj.apache.bcel.generic.Instruction,
org.aspectj.apache.bcel.generic.Instruction) (this=@5c71ea8, i1=@610fe70,
i2=@610fc60) at org/aspectj/apache/bcel/generic/InstructionComparator.java:79
#1  0x011a004e in
org.aspectj.apache.bcel.generic.Instruction.equals(java.lang.Object)
(this=@610fe70, that=@610fc60)
    at org/aspectj/apache/bcel/generic/Instruction.java:499
#2  0x031b5f9b in java.util.AbstractMap.equals(java.lang.Object,
java.lang.Object) (o1=@610fe70, o2=@610fc60)
    at ../../../libjava/java/util/AbstractMap.java:603
#3  0x031cc0ae in java.util.HashMap.put(java.lang.Object, java.lang.Object)
(this=@6483690, key=@610fe70, value=@2dfc0)
    at ../../../libjava/java/util/HashMap.java:349
#4  0x031cca00 in java.util.HashSet.add(java.lang.Object) (this=null,
o=@610fe70) at ../../../libjava/java/util/HashSet.java:151
#5  0x011b30ad in
org.aspectj.apache.bcel.generic.InstructionHandle.addTargeter(org.aspectj.apache.bcel.generic.InstructionTargeter)
(
    this=@6949d20, t=@610fe70) at
org/aspectj/apache/bcel/generic/InstructionHandle.java:208
#6  0x011861e6 in
org.aspectj.apache.bcel.generic.BranchInstruction.notifyTarget(org.aspectj.apache.bcel.generic.InstructionHandle,
org.aspectj.apache.bcel.generic.InstructionHandle,
org.aspectj.apache.bcel.generic.InstructionTargeter) (old_ih=null, new_ih=@6949d20,
    t=@610fe70) at org/aspectj/apache/bcel/generic/BranchInstruction.java:217
#7  0x01186133 in
org.aspectj.apache.bcel.generic.BranchInstruction.setTarget(org.aspectj.apache.bcel.generic.InstructionHandle)
(
    this=@610fe70, target=@6949d20) at
org/aspectj/apache/bcel/generic/BranchInstruction.java:205
#8  0x011857ef in
org.aspectj.apache.bcel.generic.BranchInstruction.BranchInstruction(short,
org.aspectj.apache.bcel.generic.InstructionHandle) (this=@610fe70, opcode=171,
target=@6949d20) at org/aspectj/apache/bcel/generic/BranchInstruction.java:86
#9  0x011d3489 in org.aspectj.apache.bcel.generic.Select.Select(short, int[],
org.aspectj.apache.bcel.generic.InstructionHandle[],
org.aspectj.apache.bcel.generic.InstructionHandle) (this=@610fe70, opcode=171,
match=@6f63b90, targets=@6eeabe0, target=@6949d20)
    at org/aspectj/apache/bcel/generic/Select.java:106
#10 0x011c3152 in
org.aspectj.apache.bcel.generic.LOOKUPSWITCH.LOOKUPSWITCH(int[],
org.aspectj.apache.bcel.generic.InstructionHandle[],
org.aspectj.apache.bcel.generic.InstructionHandle) (this=@610fe70,
match=@6f63b90, targets=@6eeabe0, target=@6949d20)
    at org/aspectj/apache/bcel/generic/LOOKUPSWITCH.java:80
#11 0x011d4f94 in org.aspectj.apache.bcel.generic.SWITCH.SWITCH(int[],
org.aspectj.apache.bcel.generic.InstructionHandle[],
org.aspectj.apache.bcel.generic.InstructionHandle, int) (this=@6a20978,
match=@5b1ccd0, targets=@6eeac08, target=@6949d20, max_gap=1)
    at org/aspectj/apache/bcel/generic/SWITCH.java:104
#12 0x011d5002 in org.aspectj.apache.bcel.generic.SWITCH.SWITCH(int[],
org.aspectj.apache.bcel.generic.InstructionHandle[],
org.aspectj.apache.bcel.generic.InstructionHandle) (this=@6a20978,
match=@5b1ccd0, targets=@6eeac08, target=@6949d20)
    at org/aspectj/apache/bcel/generic/SWITCH.java:109
#13 0x01332eb6 in
org.aspectj.weaver.bcel.Utility.copyInstruction(org.aspectj.apache.bcel.generic.Instruction)
(i=@610fc60)
    at org/aspectj/weaver/bcel/Utility.java:474
#14 0x01326f66 in
org.aspectj.weaver.bcel.LazyMethodGen.packBody(org.aspectj.apache.bcel.generic.MethodGen)
(this=@6d98000, gen=@6d983c0)
    at org/aspectj/weaver/bcel/LazyMethodGen.java:813
#15 0x01326d08 in org.aspectj.weaver.bcel.LazyMethodGen.pack() (this=@6d98000)
at org/aspectj/weaver/bcel/LazyMethodGen.java:790
#16 0x01324c81 in org.aspectj.weaver.bcel.LazyMethodGen.getMethod()
(this=@6d98000) at org/aspectj/weaver/bcel/LazyMethodGen.java:336
#17 0x0131b502 in
org.aspectj.weaver.bcel.LazyClassGen.writeBack(org.aspectj.weaver.bcel.BcelWorld)
(this=@610ff00, world=@5642d20)
    at org/aspectj/weaver/bcel/LazyClassGen.java:418
#18 0x0131b95e in
org.aspectj.weaver.bcel.LazyClassGen.getJavaClass(org.aspectj.weaver.bcel.BcelWorld)
(this=@610ff00, world=@5642d20)
    at org/aspectj/weaver/bcel/LazyClassGen.java:446
#19 0x01311589 in
org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor(org.aspectj.weaver.bcel.LazyClassGen)
(this=@a33c0, clazz=@610ff00)
&lt;snip&gt;

It might be difficult for me to provide a reproducable test case (it might
depend on the gij version, but I can try if wanted). However, happily, having
examined the bytecode of the BCEL classes from the first few lines of the stack
trace, I think I can explain why this exception occurs without needing to
provide a test case.

It's very simple. Whoever wrote the BCEL code in question, obviously never ran
it with a data set and on a virtual machine where a hash collision in the
HashSet would occur. Because, with this BCEL snapshot, if a hash collision does
occur, the object being added to the HashSet is *guaranteed* to cause a
NullPointerException in the Comparator method. This can be seen merely by
examining the code path described by this stack trace. The field &quot;targets&quot; in
the LOOKUPSWITCH object has not been initialized when notifyTarget is called, so
if there is a hash collision in the HashSet, the InstructionComparator will be
called - and it is guaranteed to call getTargets () and access its array length,
which will cause a NullPointerException.

I hope this explanation is sufficiently clear. If not, I will be happy to
provide further details.</column>
            <column name="report_time">2005-07-24 20:01:39</column>
            <column name="report_timestamp">1122250000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0e1bb19</column>
            <column name="commit_timestamp">1127320000</column>
            <column name="files">bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionComparator.java</column>
            <column name="result">37:bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionComparator.java</column>
        </table>
        <table name="aspectj">
            <column name="id">357</column>
            <column name="bug_id">108120</column>
            <column name="summary">Bug 108120  Complete implemenation of runtime pointcut parsing and matching</column>
            <column name="description">The weaver API for runtime pointcut parsing and matching needs extending for all
of the new pointcuts we have added in AJ5. Recommended approach is to implement
JavaLangReflectObjectType as a new ReferenceTypeDelegate, and a
JavaLangReflectWorld in place of BcelWorld.</column>
            <column name="report_time">2005-08-26 10:39:53</column>
            <column name="report_timestamp">1125070000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a39f595</column>
            <column name="commit_timestamp">1127310000</column>
            <column name="files">aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java
aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/PointcutImpl.java
aspectj5rt/java5-src/org/aspectj/lang/annotation/Pointcut.java
aspectj5rt/java5-src/org/aspectj/lang/reflect/Pointcut.java
bcel-builder/src/org/aspectj/apache/bcel/classfile/JavaClass.java
bcel-builder/src/org/aspectj/apache/bcel/generic/Type.java
bcel-builder/testsrc/org/aspectj/apache/bcel/classfile/tests/GetReflectMembersTest.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AtAspectJAnnotationFactory.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDesignator.java
tests/java5/ataspectj/annotationGen/RuntimePointcuts.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjAnnotationGenTests.java
weaver/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java
weaver/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java
weaver/java5-testsrc/org/aspectj/weaver/tools/Java15PointcutExpressionTest.java
weaver/src/org/aspectj/weaver/Shadow.java
weaver/src/org/aspectj/weaver/UnresolvedType.java
weaver/src/org/aspectj/weaver/World.java
weaver/src/org/aspectj/weaver/internal/tools/PointcutExpressionImpl.java
weaver/src/org/aspectj/weaver/patterns/AndPointcut.java
weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java
weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java
weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java
weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java
weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java
weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java
weaver/src/org/aspectj/weaver/patterns/HasMemberTypePattern.java
weaver/src/org/aspectj/weaver/patterns/IfPointcut.java
weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java
weaver/src/org/aspectj/weaver/patterns/NotPointcut.java
weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java
weaver/src/org/aspectj/weaver/patterns/OrPointcut.java
weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java
weaver/src/org/aspectj/weaver/patterns/PerCflow.java
weaver/src/org/aspectj/weaver/patterns/PerClause.java
weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java
weaver/src/org/aspectj/weaver/patterns/PerObject.java
weaver/src/org/aspectj/weaver/patterns/PerSingleton.java
weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java
weaver/src/org/aspectj/weaver/patterns/Pointcut.java
weaver/src/org/aspectj/weaver/patterns/PointcutExpressionMatching.java
weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java
weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java
weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java
weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java
weaver/src/org/aspectj/weaver/patterns/TypePattern.java
weaver/src/org/aspectj/weaver/patterns/TypePatternList.java
weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java
weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java
weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java
weaver/src/org/aspectj/weaver/reflect/AnnotationFinder.java
weaver/src/org/aspectj/weaver/reflect/JoinPointMatchImpl.java
weaver/src/org/aspectj/weaver/reflect/PointcutParameterImpl.java
weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegate.java
weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java
weaver/src/org/aspectj/weaver/reflect/ReflectionBasedResolvedMemberImpl.java
weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java
weaver/src/org/aspectj/weaver/reflect/ReflectionVar.java
weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java
weaver/src/org/aspectj/weaver/reflect/ShadowMatchImpl.java
weaver/src/org/aspectj/weaver/tools/JoinPointMatch.java
weaver/src/org/aspectj/weaver/tools/PointcutExpression.java
weaver/src/org/aspectj/weaver/tools/PointcutParameter.java
weaver/src/org/aspectj/weaver/tools/PointcutParser.java
weaver/src/org/aspectj/weaver/tools/PointcutPrimitive.java
weaver/src/org/aspectj/weaver/tools/ShadowMatch.java
weaver/testsrc/BcweaverModuleTests15.java
weaver/testsrc/org/aspectj/weaver/patterns/AndOrNotTestCase.java
weaver/testsrc/org/aspectj/weaver/patterns/ArgsTestCase.java
weaver/testsrc/org/aspectj/weaver/patterns/HandlerTestCase.java
weaver/testsrc/org/aspectj/weaver/patterns/KindedTestCase.java
weaver/testsrc/org/aspectj/weaver/patterns/PatternsTests.java
weaver/testsrc/org/aspectj/weaver/patterns/PointcutTestCase.java
weaver/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java
weaver/testsrc/org/aspectj/weaver/patterns/WithinCodeTestCase.java
weaver/testsrc/org/aspectj/weaver/patterns/WithinTestCase.java
weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java
weaver/testsrc/org/aspectj/weaver/reflect/ReflectionWorldTest.java
weaver/testsrc/org/aspectj/weaver/tools/PointcutExpressionTest.java
weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java
weaver/testsrc/reflect/tests/C.java</column>
            <column name="result">5:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
7:weaver/src/org/aspectj/weaver/World.java
14:weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java
20:weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java
21:weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java
28:weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java
30:weaver/src/org/aspectj/weaver/Shadow.java
38:weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java
42:weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java
44:weaver/testsrc/org/aspectj/weaver/patterns/AndOrNotTestCase.java
46:weaver/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java
48:weaver/testsrc/org/aspectj/weaver/patterns/WithinTestCase.java
50:weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java
53:weaver/src/org/aspectj/weaver/patterns/Pointcut.java
55:weaver/testsrc/org/aspectj/weaver/tools/PointcutExpressionTest.java
58:weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java
61:weaver/src/org/aspectj/weaver/patterns/TypePattern.java
62:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java
68:weaver/src/org/aspectj/weaver/patterns/IfPointcut.java
73:weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java
77:weaver/src/org/aspectj/weaver/patterns/OrPointcut.java
78:weaver/src/org/aspectj/weaver/patterns/NotPointcut.java
82:weaver/src/org/aspectj/weaver/patterns/AndPointcut.java
85:weaver/src/org/aspectj/weaver/internal/tools/PointcutExpressionImpl.java
87:weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java
88:weaver/src/org/aspectj/weaver/tools/PointcutExpression.java
89:weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java
91:bcel-builder/src/org/aspectj/apache/bcel/classfile/JavaClass.java
96:weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java
99:aspectj5rt/java5-src/org/aspectj/lang/reflect/Pointcut.java
102:weaver/src/org/aspectj/weaver/tools/PointcutParser.java
104:weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java
105:weaver/testsrc/org/aspectj/weaver/patterns/KindedTestCase.java
108:weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java
120:weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java
123:weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java
125:weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java
127:weaver/testsrc/org/aspectj/weaver/patterns/WithinCodeTestCase.java
136:weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java
149:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDesignator.java
151:weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java
162:weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java
169:weaver/testsrc/org/aspectj/weaver/patterns/HandlerTestCase.java
171:weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java
172:weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java
173:aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/PointcutImpl.java
186:weaver/testsrc/org/aspectj/weaver/patterns/ArgsTestCase.java
187:weaver/src/org/aspectj/weaver/patterns/PerClause.java
199:weaver/testsrc/org/aspectj/weaver/patterns/PointcutTestCase.java
208:weaver/src/org/aspectj/weaver/patterns/TypePatternList.java
210:bcel-builder/src/org/aspectj/apache/bcel/generic/Type.java
229:weaver/src/org/aspectj/weaver/UnresolvedType.java
243:weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java
257:weaver/src/org/aspectj/weaver/patterns/PerObject.java
273:weaver/src/org/aspectj/weaver/patterns/HasMemberTypePattern.java
277:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AtAspectJAnnotationFactory.java
290:weaver/src/org/aspectj/weaver/patterns/PerCflow.java
295:aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java
297:weaver/src/org/aspectj/weaver/patterns/PerSingleton.java
308:weaver/src/org/aspectj/weaver/patterns/PointcutExpressionMatching.java
313:weaver/src/org/aspectj/weaver/tools/PointcutPrimitive.java
363:weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java
538:tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjAnnotationGenTests.java
819:weaver/testsrc/org/aspectj/weaver/patterns/PatternsTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">358</column>
            <column name="bug_id">109486</column>
            <column name="summary">Bug 109486  Internal compiler error (ClassParser.java:242)</column>
            <column name="description">Testcase: A.aj containing:

final abstract aspect A {}

This causes the compiler to abort with an internal compiler error:

C:\Documents and Settings\mchapman\A.aj [error] Internal compiler error
org.aspectj.apache.bcel.classfile.ClassFormatException: Class can't be both
final and abstract
        at org.aspectj.apache.bcel.classfile.ClassParser.readClassInfo(ClassPars
er.java:242)
        at org.aspectj.apache.bcel.classfile.ClassParser.parse(ClassParser.java:
165)
        at org.aspectj.weaver.bcel.Utility.makeJavaClass(Utility.java:489)
        at org.aspectj.weaver.bcel.UnwovenClassFile.getJavaClass(UnwovenClassFil
e.java:63)
        at org.aspectj.weaver.bcel.UnwovenClassFile.getClassName(UnwovenClassFil
e.java:147)
        at org.aspectj.ajdt.internal.core.builder.AjState.noteResult(AjState.jav
a:497)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult(
AjBuildManager.java:748)
        at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(
AjCompilerAdapter.java:186)
        at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning
$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184(CompilerAdapter.a
j:89)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compil
er.java:528)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compil
er.java:329)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat
ion(AjBuildManager.java:728)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuild
Manager.java:206)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBu
ildManager.java:140)
        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)
        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)
        at org.aspectj.tools.ajc.Main.run(Main.java:324)
        at org.aspectj.tools.ajc.Main.runMain(Main.java:238)
        at org.aspectj.tools.ajc.Main.main(Main.java:82)

(no source information available)
C:\Documents and Settings\mchapman\A.aj:1 [error] The class A can be either abst
ract or final, not both
final abstract aspect A {}

ABORT

Exception thrown from AspectJ DEVELOPMENT


C:\Documents and Settings\mchapman&gt;ajc -version
AspectJ Compiler DEVELOPMENT built on Tuesday Sep 13, 2005 at 22:31:40 GMT

The expected behaviour is naturally just to get a regular compiler errror saying
&quot;The aspect A can be either abstract or final, not both&quot;.</column>
            <column name="report_time">2005-09-14 06:06:29</column>
            <column name="report_timestamp">1126690000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">87e5c2e</column>
            <column name="commit_timestamp">1126700000</column>
            <column name="files">bcel-builder/src/org/aspectj/apache/bcel/classfile/ClassParser.java
tests/bugs150/PR109486.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">2:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
70:bcel-builder/src/org/aspectj/apache/bcel/classfile/ClassParser.java</column>
        </table>
        <table name="aspectj">
            <column name="id">359</column>
            <column name="bug_id">103740</column>
            <column name="summary">Bug 103740  Compiler failure on @annotation</column>
            <column name="description">I'm using the ajc embedded in the latest dev build of AJDT (build 
20050713163417)

This small example illustrates the problem:
public abstract aspect AbstractRequestMonitor {

    public pointcut requestExecution(RequestContext requestContext) :
        execution(* RequestContext.execute(..)) &amp;&amp; this(requestContext);

    public abstract class RequestContext {
        public abstract Object execute();
    }
    
    after(RequestContext requestContext) throwing (Throwable t) : 
requestExecution(requestContext) {
    }
    
}

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

@Retention(RetentionPolicy.RUNTIME)
public @interface AroundAdvice {

}

public aspect ErrorHandling {

    declare soft: Exception: !@annotation(AroundAdvice) &amp;&amp; !withincode(* *
(..));
    
    Object around() : adviceexecution() &amp;&amp; !@annotation(AroundAdvice) {
        try {
            return proceed();
        } catch (Exception e) {
            return null;
        }
    }

}

Here's the stack trace I get:

org.aspectj.weaver.BCException: bad
	at org.aspectj.weaver.bcel.BcelRenderer.visit(BcelRenderer.java:228)
	at org.aspectj.weaver.ast.Literal.accept(Literal.java:29)
	at org.aspectj.weaver.bcel.BcelRenderer.recur(BcelRenderer.java:151)
	at org.aspectj.weaver.bcel.BcelRenderer.renderTest
(BcelRenderer.java:117)
	at org.aspectj.weaver.bcel.BcelAdvice.getTestInstructions
(BcelAdvice.java:445)
	at org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure
(BcelShadow.java:2585)
	at org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:182)
	at org.aspectj.weaver.Shadow.implementMungers(Shadow.java:480)
	at org.aspectj.weaver.Shadow.implement(Shadow.java:358)
	at org.aspectj.weaver.bcel.BcelClassWeaver.implement
(BcelClassWeaver.java:1703)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave
(BcelClassWeaver.java:389)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave
(BcelClassWeaver.java:94)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1362)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump
(BcelWeaver.java:1327)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify
(BcelWeaver.java:1106)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:981)
	at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave
(AjCompilerAdapter.java:286)
	at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling
(AjCompilerAdapter.java:165)
	at 
org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspec
tj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile
(Compiler.java:368)
	at 
org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation
(AjBuildManager.java:727)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild
(AjBuildManager.java:206)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild
(AjBuildManager.java:140)
	at org.aspectj.ajde.internal.CompilerAdapter.compile
(CompilerAdapter.java:121)
	at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run
(AspectJBuildManager.java:191)</column>
            <column name="report_time">2005-07-13 19:09:31</column>
            <column name="report_timestamp">1121300000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2ae4f53</column>
            <column name="commit_timestamp">1126530000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java</column>
            <column name="result">3:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
68:weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java</column>
        </table>
        <table name="aspectj">
            <column name="id">360</column>
            <column name="bug_id">108826</column>
            <column name="summary">Bug 108826  AJDT Error: Can't find type</column>
            <column name="description">In Eclipse 3.1, using the latest AspectJ build (1.5.0_M3a compiler and 1.3.0
plugin) I get an error &quot;can't find type test.T&quot; , using the following code:

===============
package test;

public class CantFindType {
    public &lt;T&gt; T[] method(T[] array) {
        return null;
    }
}
================

The error occurs, if the return type, or the parameter is an array of a generic
type.

The code compiles fine, but Eclipse shows the error, but doesn't show the folder
or the location for the error.</column>
            <column name="report_time">2005-09-06 08:13:03</column>
            <column name="report_timestamp">1126010000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2942ca0</column>
            <column name="commit_timestamp">1126280000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
6:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</column>
        </table>
        <table name="aspectj">
            <column name="id">361</column>
            <column name="bug_id">109124</column>
            <column name="summary">Bug 109124  VerifyError with inner classes</column>
            <column name="description"></column>
            <column name="report_time">2005-09-09 05:44:14</column>
            <column name="report_timestamp">1126260000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a9ca915</column>
            <column name="commit_timestamp">1126260000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelField.java</column>
            <column name="result">5:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
106:weaver/src/org/aspectj/weaver/bcel/BcelField.java</column>
        </table>
        <table name="aspectj">
            <column name="id">362</column>
            <column name="bug_id">109016</column>
            <column name="summary">Bug 109016  NullPointerException when building configuration</column>
            <column name="description">The exception below seems to be happening with any .lst file:

Message: NullPointerException thrown: null
Stack trace: java.lang.NullPointerException
	at
org.aspectj.ajde.internal.CompilerAdapter.configureBuildOptions(CompilerAdapter.java:296)
	at
org.aspectj.ajde.internal.CompilerAdapter.genBuildConfig(CompilerAdapter.java:170)
	at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:95)
	at
org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)</column>
            <column name="report_time">2005-09-07 21:09:51</column>
            <column name="report_timestamp">1126140000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5187437</column>
            <column name="commit_timestamp">1126210000</column>
            <column name="files">ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</column>
            <column name="result">2:ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</column>
        </table>
        <table name="aspectj">
            <column name="id">363</column>
            <column name="bug_id">108886</column>
            <column name="summary">Bug 108886  Getting Exception during compilation :  java.lang.RuntimeException: Internal Compiler Error: Unexpected null source location passed as 'see also' location.</column>
            <column name="description">Am attaching a small test case to reproduce the error 
(Not sure how to attach it - hopefully should be feasible to do so after I log
the bug).</column>
            <column name="report_time">2005-09-06 19:02:23</column>
            <column name="report_timestamp">1126050000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2d21db0</column>
            <column name="commit_timestamp">1126200000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java
weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java
weaver/src/org/aspectj/weaver/ResolvedType.java</column>
            <column name="result">4:weaver/src/org/aspectj/weaver/ResolvedType.java
35:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java
37:weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java
48:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
64:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</column>
        </table>
        <table name="aspectj">
            <column name="id">364</column>
            <column name="bug_id">109042</column>
            <column name="summary">Bug 109042  parameter ajc_aroundclosure is never read</column>
            <column name="description"></column>
            <column name="report_time">2005-09-08 08:13:40</column>
            <column name="report_timestamp">1126180000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">08d6a5d</column>
            <column name="commit_timestamp">1126190000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">3:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
6:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</column>
        </table>
        <table name="aspectj">
            <column name="id">365</column>
            <column name="bug_id">108902</column>
            <column name="summary">Bug 108902  Type mismatch: cannot convert from Collection to Collection</column>
            <column name="description">(From aspectj-users)

The program below produces the erroneous message:

    [iajc] D:\workdir\DPsample\main\src\com\designpattern\observer\ObserverProt
ocol.aj:39 [error] Type mismatch: cannot convert from Collection to Collection
    [iajc] return observers;
    [iajc]        ^^^^^

//Subject.java
interface Subject {
 public void addObserver(Observer observer);
 public void removeObserver(Observer observer);
 public Collection getObservers();
}
//Observer.java
interface Observer
{
 public void update();
}

//ObserverProtocol
public abstract aspect ObserverProtocol{
 abstract pointcut stateChange(Subject subject);
 after(Subject subject):stateChange(subject){
   Iterator it=subject.getObservers().iterator();
   while(it.hasNext()){
        Observer observer=(Observer)it.next();
        observer.update();
   }
 }
 private Collection Subject.observers=new ArrayList();
 public void Subject.addObserver(Observer observer){
        observers.add(observer);
 }
 public void Subject.removeObserver(Observer observer){
       observers.remove(observer);
 }
 public Collection Subject.getObservers()
 {
  return observers;
 }
}</column>
            <column name="report_time">2005-09-07 02:53:36</column>
            <column name="report_timestamp">1126080000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2505485</column>
            <column name="commit_timestamp">1126190000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java
tests/bugs150/pr108902/Observer.java
tests/bugs150/pr108902/Subject.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">13:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
336:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</column>
        </table>
        <table name="aspectj">
            <column name="id">366</column>
            <column name="bug_id">108816</column>
            <column name="summary">Bug 108816  AspectJ 1.5.0 Development Compiler Chokes on Advice with Cflow</column>
            <column name="description"></column>
            <column name="report_time">2005-09-06 03:18:39</column>
            <column name="report_timestamp">1125990000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">71771ab</column>
            <column name="commit_timestamp">1126010000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java</column>
            <column name="result">6:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
39:weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java</column>
        </table>
        <table name="aspectj">
            <column name="id">367</column>
            <column name="bug_id">99125</column>
            <column name="summary">Bug 99125  Repetitive method name/signature in class file</column>
            <column name="description">This is what the VM sais:

java.lang.ClassFormatError: Repetitive method name/signature in class file com/
netvisor/metadata_view/ComponentFactory
        at java.lang.ClassLoader.defineClass1(Native Method)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:620)
        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:
124)
        at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)
        at java.net.URLClassLoader.access$100(URLClassLoader.java:56)
        at java.net.URLClassLoader$1.run(URLClassLoader.java:195)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)


And this is why: I've got an interface (ComponentFactory) and an aspect that 
adds various ITD methods trough that interface. I've added some methods to both 
the interface and the aspect, some other methods are only added trough the 
aspect. (The situation is a bit more complex, I've got a base interface/aspect 
with these two methods and the subaspects implement the problematic two methods
.)

And those methods that are both in the interface and the aspect are the ones 
that get duplicated in the interface class file.

This is working fine in the old CVS branch (1.2.*).

Hope it helps, good luck!</column>
            <column name="report_time">2005-06-09 06:25:43</column>
            <column name="report_timestamp">1118310000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">df46c6f</column>
            <column name="commit_timestamp">1125680000</column>
            <column name="files">tests/bugs150/pr99125/p/I.java
tests/bugs150/pr99125/p/J.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java
weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
31:weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java
33:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">368</column>
            <column name="bug_id">101606</column>
            <column name="summary">Bug 101606  AspectJ compiler does not process unused code compiler options properly for aspects</column>
            <column name="description">In Eclipse (3.0) click 'Window' &gt; 'Preferences' &gt; 'Java' &gt; 'Compiler'.  Select 
the 'Unused Code' tab on the compiler preference page.  Change 'Unused or 
unread private members' to Warning or Error.  Create a project that contains 
an aspect with some private pointcuts.  You will see warnings or errors for 
these pointcuts saying that they are unused.</column>
            <column name="report_time">2005-06-24 05:17:53</column>
            <column name="report_timestamp">1119600000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2c88c59</column>
            <column name="commit_timestamp">1125670000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
3:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</column>
        </table>
        <table name="aspectj">
            <column name="id">369</column>
            <column name="bug_id">102212</column>
            <column name="summary">Bug 102212  [itds] abstract synchronized: compile error expected</column>
            <column name="description">when using intertype declaration, the compiler doesn't check for illegal
modifier combinations such as &quot;abstract synchronized&quot;.

another manifestation of this problem is when using intertype declaration to add
a synchronized method to an interface. the problem is more severe in this case
because conceptually, this method is not abstract at all.


interface Interface {}
abstract class Parent {}
class Child extends Parent implements Interface {}

aspect Bug {
  // illegal modifier combination not caught by ajc
  public abstract synchronized void Parent._abstract();

  public synchronized void Child._abstract() {}


  // the following has the same effect, but is easier to miss
  public /* implicit abstract */ synchronized void Interface._interface() {}


  // use Child to make java complain: &quot;illegal modifiers: 0x421&quot;
  // (this corresponds to &quot;public abstract synchronized&quot;)
  public static void main(String[] args) {
    new Child();
  }
}</column>
            <column name="report_time">2005-06-29 17:07:44</column>
            <column name="report_timestamp">1120080000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b17ff4e</column>
            <column name="commit_timestamp">1125670000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java
weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
4:weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java
51:weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
        </table>
        <table name="aspectj">
            <column name="id">370</column>
            <column name="bug_id">99136</column>
            <column name="summary">Bug 99136  xlint advice not applied appears twice with cflows</column>
            <column name="description">////////////// in the following code
aspect A{
  before(): call(* *(..)) &amp;&amp; cflow(execution(* *(..))) {}
}
////////////////////////////////////

two &quot;advice not appied&quot; xlint messages are produced, one for the before advice
and one for the cflow within the before advice.</column>
            <column name="report_time">2005-06-09 08:36:06</column>
            <column name="report_timestamp">1118320000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">047173e</column>
            <column name="commit_timestamp">1125660000</column>
            <column name="files">tests/bugs150/pr105479/Driver.java
tests/bugs150/pr105479/ReturnTypeTester.java
tests/harness/XLintcflow.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
tests/src/org/aspectj/systemtest/xlint/XLintTests.java
weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
            <column name="result">2:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
14:weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java
21:tests/src/org/aspectj/systemtest/xlint/XLintTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">371</column>
            <column name="bug_id">108062</column>
            <column name="summary">Bug 108062  NPE when opening resources from CVS resources history</column>
            <column name="description">NPE when opening resources (double-click) from CVS resources history view.

java.lang.NullPointerException
	at
org.eclipse.mylar.java.ui.editor.MylarJavaElementDescriptor.drawCompositeImage(MylarJavaElementDescriptor.java:40)
	at
org.eclipse.jface.resource.CompositeImageDescriptor.getImageData(CompositeImageDescriptor.java:205)
	at
org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:279)
	at
org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:233)
	at
org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:211)
	at
org.eclipse.mylar.ui.MylarImages.getImage(MylarImages.java:108)
	at org.eclipse.mylar.java.ui.editor.MylarCompilationUnitEditor.updatedTitleImage(MylarCompilationUnitEditor.java:55)
	at
org.eclipse.jdt.internal.ui.javaeditor.JavaEditorErrorTickUpdater$1.run(JavaEditorErrorTickUpdater.java:86)
	at
org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:152)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:28)
	at
org.eclipse.swt.widgets.Display.syncExec(Display.java:3413)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaEditorErrorTickUpdater.postImageChange(JavaEditorErrorTickUpdater.java:84)
	at
org.eclipse.jdt.internal.ui.javaeditor.JavaEditorErrorTickUpdater.updateEditorImage(JavaEditorErrorTickUpdater.java:77)
	at
org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSetInput(CompilationUnitEditor.java:1548)
	at
org.eclipse.ui.texteditor.AbstractTextEditor$16.run(AbstractTextEditor.java:2360)
	at
org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:346)
	at
org.eclipse.jface.operation.ModalContext.run(ModalContext.java:291)
	at org.eclipse.jface.window.ApplicationWindow$1.run(ApplicationWindow.java:624)
	at
org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:69)
	at org.eclipse.jface.window.ApplicationWindow.run(ApplicationWindow.java:621)
	at
org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2135)
	at
org.eclipse.ui.texteditor.AbstractTextEditor.internalInit(AbstractTextEditor.java:2378)
	at
org.eclipse.ui.texteditor.AbstractTextEditor.init(AbstractTextEditor.java:2405)
	at
org.eclipse.ui.internal.EditorManager.createSite(EditorManager.java:773)
	at
org.eclipse.ui.internal.EditorReference.createPartHelper(EditorReference.java:572)
	at
org.eclipse.ui.internal.EditorReference.createPart(EditorReference.java:365)
	at
org.eclipse.ui.internal.WorkbenchPartReference.getPart(WorkbenchPartReference.java:552)
	at
org.eclipse.ui.internal.EditorReference.getEditor(EditorReference.java:214)
	at
org.eclipse.ui.internal.WorkbenchPage.busyOpenEditorBatched(WorkbenchPage.java:2325)
	at
org.eclipse.ui.internal.WorkbenchPage.busyOpenEditor(WorkbenchPage.java:2258)
	at
org.eclipse.ui.internal.WorkbenchPage.access$9(WorkbenchPage.java:2250)
	at
org.eclipse.ui.internal.WorkbenchPage$9.run(WorkbenchPage.java:2236)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:69)
	at
org.eclipse.ui.internal.WorkbenchPage.openEditor(WorkbenchPage.java:2231)
	at
org.eclipse.ui.internal.WorkbenchPage.openEditor(WorkbenchPage.java:2204)
	at
org.eclipse.team.internal.ccvs.ui.actions.OpenLogEntryAction$1.run(OpenLogEntryAction.java:85)
	at
org.eclipse.team.internal.ccvs.ui.repo.RepositoryManager.run(RepositoryManager.java:651)
	at
org.eclipse.team.internal.ccvs.ui.actions.CVSAction$2.run(CVSAction.java:347)
	at
org.eclipse.team.internal.ccvs.ui.actions.CVSAction$3.run(CVSAction.java:356)
	at
org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:69)
	at org.eclipse.team.internal.ccvs.ui.actions.CVSAction.run(CVSAction.java:353)
	at
org.eclipse.team.internal.ccvs.ui.actions.OpenLogEntryAction.execute(OpenLogEntryAction.java:64)
	at
org.eclipse.team.internal.ccvs.ui.actions.CVSAction.run(CVSAction.java:117)
	at
org.eclipse.team.internal.ccvs.ui.HistoryView$6.handleEvent(HistoryView.java:199)
	at
org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:843)
	at
org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3080)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2713)
	at
org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1699)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1663)
	at
org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:367)
	at
org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)
	at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:103)
	at
org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:226)
	at
org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:376)
	at
org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:163)
	at
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at
java.lang.reflect.Method.invoke(Method.java:585)
	at org.eclipse.core.launcher.Main.invokeFramework(Main.java:334)
	at
org.eclipse.core.launcher.Main.basicRun(Main.java:278)
	at org.eclipse.core.launcher.Main.run(Main.java:973)
	at
org.eclipse.core.launcher.Main.main(Main.java:948)</column>
            <column name="report_time">2005-08-25 17:47:23</column>
            <column name="report_timestamp">1125010000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ad753aa</column>
            <column name="commit_timestamp">1125650000</column>
            <column name="files">bcel-builder/src/org/aspectj/apache/bcel/classfile/GenericSignatureParser.java
tests/bugs150/pr108602.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
1649:bcel-builder/src/org/aspectj/apache/bcel/classfile/GenericSignatureParser.java</column>
        </table>
        <table name="aspectj">
            <column name="id">372</column>
            <column name="bug_id">98290</column>
            <column name="summary">Bug 98290  no &quot;matches declare&quot; entry in structure model for single declare warning statement</column>
            <column name="description">A project containing one class and one aspect:

-----------------------------------------------------

package pack;

public class C {

	public static void main(String[] args) {
		new C().sayHello();
	}
	
	public void sayHello() {
		System.out.println(&quot;HELLO&quot;);
	}
}

----------------------------------------------------

package pack;

public aspect A {
		
	declare warning : 
		execution(* C.sayHello(..)) :
			&quot;blah blah&quot;;	
		
}

-----------------------------------------------------

has the &quot;matched by&quot; entry for A.aj, but doesn't have the &quot;matches declare&quot;
entry for C.java.

This means that in AJDT, C.sayHello isn't added to our map and consequently we
don't get any relationships showing in the Cross Reference view for A.aj.</column>
            <column name="report_time">2005-06-03 10:57:01</column>
            <column name="report_timestamp">1117810000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">619f8bc</column>
            <column name="commit_timestamp">1125600000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</column>
            <column name="result">44:weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
51:weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</column>
        </table>
        <table name="aspectj">
            <column name="id">373</column>
            <column name="bug_id">102459</column>
            <column name="summary">Bug 102459  provide more detail in -showWeaveInfo messages</column>
            <column name="description">When advice is executed, the object you have to work with is the joinpoint. This
can then be queried to get various information out of it. It would be nice, if
as part of the weaving you could get hold of the same information. 

This is particularly useful in the case of writing a coverage tool. In order to
measure where you've been, you have to know all the places you could possibly
go. The introduction of the -showWeaveInfo option means that we can record these
places, however, this would be greatly enhanced by providing similar information
as to that which is collected as the program is running.

The information which would be good is the same as that obtained from

JoinPoint.StaticPart.getSignature().toLongString().</column>
            <column name="report_time">2005-07-01 06:48:04</column>
            <column name="report_timestamp">1120210000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">c6bc7a2</column>
            <column name="commit_timestamp">1125600000</column>
            <column name="files">bridge/src/org/aspectj/bridge/WeaveMessage.java
tests/java5/ataspectj/ataspectj/ltwlog/MainVerboseAndShow.java
weaver/src/org/aspectj/weaver/Shadow.java</column>
            <column name="result">12:bridge/src/org/aspectj/bridge/WeaveMessage.java
26:weaver/src/org/aspectj/weaver/Shadow.java
186:tests/java5/ataspectj/ataspectj/ltwlog/MainVerboseAndShow.java</column>
        </table>
        <table name="aspectj">
            <column name="id">374</column>
            <column name="bug_id">59076</column>
            <column name="summary">Bug 59076  Reduce footprint of JoinPoint.StaticPart objects</column>
            <column name="description">Tests show that each object consumes 180+ bytes. For a large project (1000+ 
classes) where an aspect is used to implement a pervasive cross-cutting 
concern e.g. exception logging this can lead to &gt;1MB of additional heap space. 
Two possible approaches could be:
1. Break literal String used by Factory.makeXXXSig() methods into component 
parts e.g. package, class, method. ... names. These could then be shared 
automatically by the JVM as interned Strings.
2. Lazy instantiation of handler static JPs in the catch block.

Any enhancements could be enabled by a compiler option similar to -XlazyTjp.</column>
            <column name="report_time">2004-04-19 10:52:41</column>
            <column name="report_timestamp">1082390000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a5e645f</column>
            <column name="commit_timestamp">1125580000</column>
            <column name="files">runtime/src/org/aspectj/runtime/reflect/Factory.java
runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java
weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</column>
            <column name="result">2:runtime/src/org/aspectj/runtime/reflect/Factory.java
34:weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java
362:runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java</column>
        </table>
        <table name="aspectj">
            <column name="id">375</column>
            <column name="bug_id">74048</column>
            <column name="summary">Bug 74048  AJDT reports unnecessary compile time warnings for private static aspects</column>
            <column name="description"></column>
            <column name="report_time">2004-09-16 05:30:58</column>
            <column name="report_timestamp">1095330000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">16512b2</column>
            <column name="commit_timestamp">1125570000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
49:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</column>
        </table>
        <table name="aspectj">
            <column name="id">376</column>
            <column name="bug_id">59196</column>
            <column name="summary">Bug 59196  &quot;adviceexecution() &amp;&amp; args()&quot; pcd does not pick up around advice execution because args() does not match the AroundClosure parameter.</column>
            <column name="description">In the following sample, the advice defined in &quot;other_aspect&quot; does not pick up 
the execution of around advice defined in &quot;some_aspect&quot;. It matches only 
against the before advice defined in &quot;some_aspect&quot;.

The implicit AroundClosure parameter of an around advice seems to come in the 
way of args() matching. 

------------------------------------------------------ 
aspect some_aspect {
   pointcut call_m(int a, int b) : 
              call(int test.m(..)) &amp;&amp; args(a, b);
 
   before(int x, int y) : call_m(x, y) { ...  }
   int around(int x, int y) : call_m(x, y) { ... }
}
 
aspect other_aspect {
   before(int x, int y) : 
       adviceexecution() &amp;&amp; within(some_aspect) &amp;&amp; 
                                       args(x, y){ 
         ...
       }
}
--------------------------------------------------------

AspectJ doc has to state this explicitly.</column>
            <column name="report_time">2004-04-20 03:42:16</column>
            <column name="report_timestamp">1082450000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a66e0a2</column>
            <column name="commit_timestamp">1125560000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java</column>
            <column name="result">3:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
36:weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java</column>
        </table>
        <table name="aspectj">
            <column name="id">377</column>
            <column name="bug_id">71159</column>
            <column name="summary">Bug 71159  pointcut call(MethodPattern) matches non-visible methods in parent class</column>
            <column name="description">aspectjtools.jar / ajc v1.2

We believe that the call(methodpattern) pointcut has matching behaviour that is
inconsistent with what we expect from Java in relation to invocations of methods
on subclasses and superclasses.

Background: 
Our goal is to use an aspect to declare ajc compiler warnings on any invocation
to a target method, where the space of targets is defined as any visible method
of any class in a specified package P or its subpackages.

As well as straight invocations from types in packages oustide P and its
subpackages, we wish to match method invocations on P where the methods invoked
are inherited from P -- that is , they are obtained in a type that directly
extends a type in P or its subpackages.  

The fragment of the aspect we are using is:
public aspect Aspect1
{
  pointcut methodCalls() : 
    !within(Aspect1) &amp;&amp;
    call(* P..*.*(..)) ;         // 'P' is the target package space
  declare warning : methodCalls() : &quot;invoking&quot;;
  //...
}

Consider these cases:

Case 1 method inheritance: 
Superclass A in package P declares and implements a public method M.  A direct
subclass B (in a package outside P) directly extends A and inherits this method.
 Now, any calls inside B to M or this.M() are matched by the call() join point
above which seeks to match calls to P..*.*() This is as we would expect since
the implementation in package space P is actually being called.

Case 2 method overriding: 
Superclass A in package P declares and implements a public method M.  Direct
subclass B (in a package outside P) overrides A.M with its own implementation
M'. M' does not invoke M.  Now, calls inside B to M' or this.M'() are still
matched by the call() join point above which seeks to match calls to P..*.*()
even though M' does not invoke or depend on M.  We do not expect this result
since we do not think M is actually called.

Case 3 redeclaration of non-visible method with the same name:  
Superclass A in package P declares and implements a private method M.  Direct
subclass B (in a package outside P) introduces its own method M having the same
signature as A.M.  Now, calls in B to M or this.M() are still matched by the
call() join point above which seeks to match calls to P..*.*() even though A.M
is not visible to B and is never called by it. We do not expect this result
since we do not think A.M is ever called.

The only way we can explain this apparent behaviour is by reasoning that the
compiler is treating the subclass B &quot;as a type of&quot; its parent A and somehow
concluding that method calls on B can be equated with calls to methods of
identical signature on A.  However this seems at odds with the rules for Java
visibility and with our expectations for when the call(...) joinpoint should match.

We have experimented with execution(...) join points to perform this matching
but that has turned up a different set of problems which we are still analyzing.

Please can you shed any light on what the call joinpoint is doing here?

regards, Dave</column>
            <column name="report_time">2004-07-30 10:36:22</column>
            <column name="report_timestamp">1091200000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7e0c3cd</column>
            <column name="commit_timestamp">1125500000</column>
            <column name="files">tests/bugs150/pr71159/pkg1/A.java
tests/bugs150/pr71159/pkg1/B.java
tests/bugs150/pr71159/pkg1/C.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
9:weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</column>
        </table>
        <table name="aspectj">
            <column name="id">378</column>
            <column name="bug_id">107858</column>
            <column name="summary">Bug 107858  illegal argument to proceed crashes the parser</column>
            <column name="description">in a context where proceed requires zero arguments, calling it with an extra
argument crashes the compiler, but only if that argument is a field access:

class Foo {
  Foo field;
  void test() {}
}

public aspect Bug {
  void around() : call(void Foo.test()) {
    Foo foo = new Foo().field;
    proceed(foo); // caught at compile time
    proceed(new Foo().field); // crashes
  }
}


/home/user/sgelin3/dev/java/ajc/new_bug/Bug.java [error] Internal compiler error
java.lang.NullPointerException
        at
org.aspectj.ajdt.internal.compiler.ast.AccessForInlineVisitor.getAccessibleField(AccessForInlineVisitor.java:145)
        at
org.aspectj.ajdt.internal.compiler.ast.AccessForInlineVisitor.endVisit(AccessForInlineVisitor.java:108)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.FieldReference.traverse(FieldReference.java:609)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:467)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:212)</column>
            <column name="report_time">2005-08-24 10:53:45</column>
            <column name="report_timestamp">1124900000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6c8747b</column>
            <column name="commit_timestamp">1125500000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java
2:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">379</column>
            <column name="bug_id">104024</column>
            <column name="summary">Bug 104024  combining varargs and inner classes crashes the parser</column>
            <column name="description">class Outer {
  public class Inner {}
}


public class Bug {
  public void varargs(Object... varargs) {}

  public void test() {
    Outer.Inner inner = new Outer().new Inner();
    varargs(inner); // works
    varargs(new Outer().new Inner()); // crashes
  }
}</column>
            <column name="report_time">2005-07-15 11:16:07</column>
            <column name="report_timestamp">1121440000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f2af562</column>
            <column name="commit_timestamp">1125500000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">380</column>
            <column name="bug_id">95992</column>
            <column name="summary">Bug 95992  Problems resolving type name inside generic class</column>
            <column name="description">ajc reports an error when compiling the following code:

interface Base&lt;T&gt; {
    static interface Inner {
    }
}
class Test&lt;T extends Test.InnerTest&gt; implements Base&lt;T&gt; {
    static class InnerTest implements Inner {
    }
}

$ ajc -1.5 Test.java
Test.java:14 [error] Inner cannot be resolved to a type
static class InnerTest implements Inner {


Sun's javac compiles it without any error.
The error can be avoided by simply writing &quot;Base.Inner&quot; instead of just &quot;Inner&quot;.
Also, it compiles fine if the constraint &quot;extends Test.InnerTest&quot; is left away.</column>
            <column name="report_time">2005-05-19 14:12:24</column>
            <column name="report_timestamp">1116530000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b953c03</column>
            <column name="commit_timestamp">1125500000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">2:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">381</column>
            <column name="bug_id">108448</column>
            <column name="summary">Bug 108448  IllegalStateException: Undeclared type variable when hiding</column>
            <column name="description"></column>
            <column name="report_time">2005-08-31 02:35:46</column>
            <column name="report_timestamp">1125470000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2c9ea11</column>
            <column name="commit_timestamp">1125490000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelField.java
weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java
weaver/src/org/aspectj/weaver/bcel/BcelMethod.java
weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java
weaver/testsrc/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXTestCase.java</column>
            <column name="result">9:weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java
51:weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java
206:weaver/src/org/aspectj/weaver/bcel/BcelMethod.java
306:weaver/src/org/aspectj/weaver/bcel/BcelField.java
953:weaver/testsrc/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXTestCase.java</column>
        </table>
        <table name="aspectj">
            <column name="id">382</column>
            <column name="bug_id">108377</column>
            <column name="summary">Bug 108377  Verify Error on intertype field indirection in intertype method</column>
            <column name="description">When I run this program:

public class A {
    public static void main(String[] args) {
	System.out.println(new A().foo());
    }
}

aspect Aspect1 {
    public A A.a;
    public String A.value;

    public String A.foo() {
	return a.value;
    }
}

I get the error:

Exception in thread &quot;main&quot; java.lang.VerifyError: (class: Aspect1, method:
ajc$interMethod$Aspect1$A$foo signature: (LA;)Ljava/lang/String;) Incompatible
type for getting or setting field
        at A.&lt;init&gt;(A.java:1)
        at A.main(A.java:3)

Javap reveals that the field name is missing the class name part:

   1:   getfield        #50; //Field a:LA;
   4:   getfield        #46; //Field A.value:Ljava/lang/String;

If I replace a.value by this.a.value, the correct code is generated:

   1:   getfield        #37; //Field A.a:LA;
   4:   getfield        #46; //Field A.value:Ljava/lang/String;</column>
            <column name="report_time">2005-08-30 11:01:24</column>
            <column name="report_timestamp">1125410000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">be750d5</column>
            <column name="commit_timestamp">1125480000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">2:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">383</column>
            <column name="bug_id">108050</column>
            <column name="summary">Bug 108050  Execution not matching override in doubly derived method</column>
            <column name="description">The following sample code fails because the compiler isn't matching the
execution of doPost in MockServlet4. The declare warning for &quot;servlet request&quot;
doesn't match  in that case, nor does advice on the join point actually run at
runtime (though this simplified code only shows the problem with declare
warning). This was working until fairly recently (certainly in M2, even in AJDT
from August 11).

public abstract class MockServlet extends HttpServlet {
    
    protected void doPost() {
    }

    private static aspect FindMatches {
        declare warning: execution(* HttpServlet.do*(..)): &quot;servlet request&quot;;
        declare warning: execution(* HttpServlet+.do*(..)): &quot;servlet request2&quot;;    	
    }
}

class HttpServlet {
    protected void doPost() {
    }    
}

public class MockDelayingServlet extends MockServlet {
    private static final long serialVersionUID = 1; 
}

public class MockServlet4 extends MockDelayingServlet 
{
    protected void doPost()
    {
    } 
}

compiler output (should have 6 warnings, including two for MockServlet4):

C:\devel\workspace\test\src\MockServlet.java:16 [warning] servlet request
protected void doPost() {
^^^^^^^^^^^^^^^^^^^^^^^^^
        method-execution(void MockServlet.doPost())
        see also: C:\devel\workspace\test\src\MockServlet.java:20::0
C:\devel\workspace\test\src\MockServlet.java:16 [warning] servlet request2
protected void doPost() {
^^^^^^^^^^^^^^^^^^^^^^^^^
        method-execution(void MockServlet.doPost())
        see also: C:\devel\workspace\test\src\MockServlet.java:21::0
C:\devel\workspace\test\src\MockServlet.java:26 [warning] servlet request
protected void doPost() {
^^^^^^^^^^^^^^^^^^^^^^^^^
        method-execution(void HttpServlet.doPost())
        see also: C:\devel\workspace\test\src\MockServlet.java:20::0
C:\devel\workspace\test\src\MockServlet.java:26 [warning] servlet request2
protected void doPost() {
^^^^^^^^^^^^^^^^^^^^^^^^^
        method-execution(void HttpServlet.doPost())
        see also: C:\devel\workspace\test\src\MockServlet.java:21::0
C:\devel\workspace\test\src\MockServlet4.java:9 [warning] servlet request2
protected void doPost()
^^^^^^^^^^^^^^^^^^^^^^^
        method-execution(void MockServlet4.doPost())
        see also: C:\devel\workspace\test\src\MockServlet.java:21::0

5 warnings</column>
            <column name="report_time">2005-08-25 16:22:28</column>
            <column name="report_timestamp">1125000000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">27e68f3</column>
            <column name="commit_timestamp">1125060000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/JoinPointSignature.java
weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
208:weaver/src/org/aspectj/weaver/JoinPointSignature.java
360:weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</column>
        </table>
        <table name="aspectj">
            <column name="id">384</column>
            <column name="bug_id">107713</column>
            <column name="summary">Bug 107713  ClassCastException popup</column>
            <column name="description">Whenever I change any file and save(auto-compile) I get this in a popup.

ClassCastException thrown: 
org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType cannot be cast to 
org.aspectj.weaver.bcel.BcelObjectType

This started happening when I wrote these aspects.

Before this started happening the IDE showed this line as an error.

b.support.firePropertyChange( property,
			( oldval == null ) ? oldval : new String(oldval),
	                      new String(newval));


----------------------------------------------------------------
/**
 * 
 */
package com.blueprint.util.mixin.test;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.lang.reflect.Field;
import com.blueprint.util.mixin.test.*;
import org.aspectj.lang.Signature;

public aspect PropertySupportAspect {
	
		PropertyChangeSupport PropertySupport.support = new 
PropertyChangeSupport(this);

		public interface PropertySupport{
			  public void addPropertyChangeListener( 
PropertyChangeListener listener );
			  public void addPropertyChangeListener( String 
propertyName,
				                                     
PropertyChangeListener listener );
			  public void removePropertyChangeListener( String 
propertyName,
				                                        
PropertyChangeListener listener );
			  public void removePropertyChangeListener( 
PropertyChangeListener listener );
			  public void hasListeners( String propertyName );
		}
		
		public void PropertySupport.addPropertyChangeListener
(PropertyChangeListener listener){
		    support.addPropertyChangeListener(listener);
		}
		
		public void PropertySupport.addPropertyChangeListener( String 
propertyName,
		                                                       
PropertyChangeListener listener){

			support.addPropertyChangeListener(propertyName, 
listener);
	    }
	    
		public void PropertySupport.removePropertyChangeListener( 
String propertyName,
			                                                      
PropertyChangeListener listener) {
			support.removePropertyChangeListener(propertyName, 
listener);
	    }
		
		public void PropertySupport.removePropertyChangeListener
(PropertyChangeListener listener) {
		    support.removePropertyChangeListener(listener);
		}
		
		public void PropertySupport.hasListeners(String propertyName) {
		    support.hasListeners(propertyName);
		}

		pointcut callSetter( Bean b ) 
	    : call( public void com.blueprint.util.test.Bean.setName( 
String ) ) &amp;&amp; target( b );
		
		void around( Bean b ) : callSetter( b )  {
		    String propertyName = getField( 
thisJoinPointStaticPart.getSignature() ).
		    							
									getName
();
			System.out.println( &quot;The property is [&quot; + propertyName 
+ &quot;]&quot; );
			String oldValue = b.getName();
		    proceed( b );
		    firePropertyChange( b, propertyName, oldValue, b.getName
());
		}

	    private Field getField( Signature signature ){
	    	Field field = null;
			System.out.println( &quot;Getting the field name of [&quot; 
+signature.getName() + &quot;]&quot; );
	    	
	    	try{
	    		String methodName = signature.getName();
	    		field = signature.getDeclaringType().
							
	getDeclaredField( methodName.
									
			   substring( 3,
									
		                  methodName.length() ).
									
		                  			toLowerCase());
	    		field.setAccessible(true);
	    	}catch( NoSuchFieldException nsfe ){
	    		nsfe.printStackTrace();
	    	}
			return field;
		}

		void firePropertyChange( Bean b,
					 String property,
					 String oldval,
					 String newval) {
		System.out.println( &quot;The property is [&quot; + property + &quot;]&quot;);
		System.out.println( &quot;The old value is [&quot; + oldval + &quot;]&quot;);
		System.out.println( &quot;The new value is [&quot; + newval + &quot;]&quot;);
		b.support.firePropertyChange( property,
					( oldval == null ) ? oldval : new 
String(oldval),
			            new String(newval));
		}
		
}
----------------------------------------------------------------
import java.io.Serializable;

public class Bean implements Serializable{
	
	private String name;

	public String getName() {
		return name;
	}
	public void setName( String name ) {
		this.name = name;
	}
}
----------------------------------------------------------------
public aspect BeanSupport {
     declare parents: Bean implements PropertySupportAspect.PropertySupport;
}
----------------------------------------------------------------</column>
            <column name="report_time">2005-08-23 06:56:58</column>
            <column name="report_timestamp">1124790000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">100d9e0</column>
            <column name="commit_timestamp">1125050000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java
weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</column>
            <column name="result">21:weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java
52:weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</column>
        </table>
        <table name="aspectj">
            <column name="id">385</column>
            <column name="bug_id">104720</column>
            <column name="summary">Bug 104720  VerifyError after weaving around trivial switch statement</column>
            <column name="description">After compiling the attached source file and class file with

ajc -inpath . -outjar t.jar Tracer.aj

(on any of 1.2.1, 1.5.0M2 or the June 2005 snapshot) and then attempting to run
it with

gij -classpath ./t.jar:$CLASSPATH Test

the following error is obtained:

Exception in thread &quot;main&quot; java.lang.VerifyError: verification failed at PC 1 in
Test:newTest_aroundBody2((I)LTest;): branch out of range
   at java.lang.VMClassLoader.resolveClass(java.lang.Class)
(/usr/lib/libgcj.so.6.0.0)
   at java.lang.Class.initializeClass() (/usr/lib/libgcj.so.6.0.0)
   at java.lang.Class.forName(java.lang.String, boolean, java.lang.ClassLoader)
(/usr/lib/libgcj.so.6.0.0)
   at gnu.java.lang.MainThread.run() (/usr/lib/libgcj.so.6.0.0)

An excerpt from the output of

javap -private -classpath t.jar -c Test

shows that the generated switch is indeed bogus:

private static final Test newTest_aroundBody2(int);
  Code:
   0:   iload_0
   1:   tableswitch{ //0 to 0
                0: -1157627302;
                default: 16 }
   20:  invokespecial   #3; //Method &quot;&lt;init&gt;&quot;:()V
   23:  areturn</column>
            <column name="report_time">2005-07-21 15:16:55</column>
            <column name="report_timestamp">1121970000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">bf767a9</column>
            <column name="commit_timestamp">1124970000</column>
            <column name="files">bcel-builder/src/org/aspectj/apache/bcel/generic/SWITCH.java
bcel-builder/src/org/aspectj/apache/bcel/generic/TABLESWITCH.java</column>
            <column name="result">109:bcel-builder/src/org/aspectj/apache/bcel/generic/TABLESWITCH.java
336:bcel-builder/src/org/aspectj/apache/bcel/generic/SWITCH.java</column>
        </table>
        <table name="aspectj">
            <column name="id">386</column>
            <column name="bug_id">82989</column>
            <column name="summary">Bug 82989  Compiler error due to a wrong exception check in try blocks</column>
            <column name="description">Compiler error on correct code when an aspect performs a method introdiction.
The method introduction contains an invocation to a method from the class and
such an invocation is inside an appropriate try block.
The ajc compiler performs a wrong check on the exception types.
To understand better, please see the attached example</column>
            <column name="report_time">2005-01-17 12:07:27</column>
            <column name="report_timestamp">1105980000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">cc6e681</column>
            <column name="commit_timestamp">1124910000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java
weaver/src/org/aspectj/weaver/AjcMemberMaker.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
4:tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java
32:weaver/src/org/aspectj/weaver/AjcMemberMaker.java</column>
        </table>
        <table name="aspectj">
            <column name="id">387</column>
            <column name="bug_id">79523</column>
            <column name="summary">Bug 79523  BCException: illegal change to pointcut declaration: calls(&lt;nothing&gt;)</column>
            <column name="description"></column>
            <column name="report_time">2004-11-25 16:31:26</column>
            <column name="report_timestamp">1101420000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">93fdce1</column>
            <column name="commit_timestamp">1124480000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</column>
            <column name="result">5:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
26:weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</column>
        </table>
        <table name="aspectj">
            <column name="id">388</column>
            <column name="bug_id">104529</column>
            <column name="summary">Bug 104529  @SuppressWarnings( &quot;unchecked&quot; ) is not ignoring type safety checks</column>
            <column name="description">AJDT is ignoring the @SuppressWarnings( &quot;unchecked&quot; ) annotation.  It is giving 
me a type safety warning when I don't specify the type when declaring a generic 
even though I have the @SuppressWarnings( &quot;unchecked&quot; ) annotation specified.</column>
            <column name="report_time">2005-07-20 12:46:55</column>
            <column name="report_timestamp">1121880000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7b32570</column>
            <column name="commit_timestamp">1124480000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">4:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">389</column>
            <column name="bug_id">86057</column>
            <column name="summary">Bug 86057  expect error when overriding final pointcuts</column>
            <column name="description">I get no compiler error when I &quot;override&quot;/redefine a final pointcut:

------------
public class Main {
    static void walk() {}
    static void run() {}
    public static void main(String[] args) {
        walk();
        run();
    }
}
abstract aspect AA {
    public final pointcut publicPointcut() : call(void walk());
    before() : publicPointcut() { System.out.print(&quot;here: &quot; + thisJoinPoint); }
}
aspect AA1 extends AA {
    // expecting error here b/c pointcut is final
    public pointcut publicPointcut() : call(void run());
}
------------
When run, it picks out run() rather than walk().</column>
            <column name="report_time">2005-02-21 17:25:49</column>
            <column name="report_timestamp">1109020000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">86ce1f7</column>
            <column name="commit_timestamp">1124470000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/ResolvedType.java
weaver/src/org/aspectj/weaver/WeaverMessages.java</column>
            <column name="result">2:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
274:weaver/src/org/aspectj/weaver/ResolvedType.java
390:weaver/src/org/aspectj/weaver/WeaverMessages.java</column>
        </table>
        <table name="aspectj">
            <column name="id">390</column>
            <column name="bug_id">78261</column>
            <column name="summary">Bug 78261  field pattern with &quot;void&quot; type should be compile-time error</column>
            <column name="description">We really should barf early on

  get(void i)

as opposed to just compiling through and treating it as something that'll never
match.  I rated this as minor since this is just an error message issue.</column>
            <column name="report_time">2004-11-10 01:58:38</column>
            <column name="report_timestamp">1100070000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2b23e91</column>
            <column name="commit_timestamp">1124460000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">391</column>
            <column name="bug_id">91114</column>
            <column name="summary">Bug 91114  [jdt-parser] Parser error on System.out.printf(&quot;...&quot; + (after-before) + &quot;...&quot;)</column>
            <column name="description">Following code fragment:

*****************************
class Foo {
        public void bar () {
                long before = 0;
                long after = 0;
                System.out.println(&quot;... &quot; + (before - after) + &quot; ...&quot;);

        }
}
*****************************

leads to following parser error

*****************************
[...].java:25 [error] Syntax error on token &quot;-&quot;, invalid AssignmentOperator
System.out.println(&quot;... &quot; + (before - after) + &quot; ...&quot;);
*****************************

Problems seems to vanish when I rename the before variable.</column>
            <column name="report_time">2005-04-12 08:03:15</column>
            <column name="report_timestamp">1113310000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">169a488</column>
            <column name="commit_timestamp">1124460000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">392</column>
            <column name="bug_id">64568</column>
            <column name="summary">Bug 64568  Wildcarding in ITDs needs clearer compiler error message.</column>
            <column name="description">If a user attempts to define an ITD using a type pattern (illegal since
AspectJ 1.1) they get back a compiler error message of the following
form :-

MyAspect.java:4 error Syntax error on token &quot;*&quot;, around expected
public String foo.bar.*.name;

A clearer error message informing the user of their use of illegal 
syntax would help.</column>
            <column name="report_time">2004-05-28 11:21:04</column>
            <column name="report_timestamp">1085760000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5e9aca9</column>
            <column name="commit_timestamp">1124460000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">393</column>
            <column name="bug_id">106634</column>
            <column name="summary">Bug 106634  regression: argument causes BcelGenericSignatureToTypeXConverter.java:203</column>
            <column name="description">the following reported a compile error using
AspectJ Compiler DEVELOPMENT built on Monday Jun 20, 2005 at 08:14:57 GMT
but now crashes using
AspectJ Compiler DEVELOPMENT built on Wednesday Aug 10, 2005 at 13:12:53 GMT


import java.util.Vector; // works if java.util.* is used

public class Bug extends Vector { // works if Vector is not extended
  void test(DoesNotExist argument) {} // works without the argument
}


also, the bug only appears if the -1.5 flag is used.</column>
            <column name="report_time">2005-08-10 11:04:45</column>
            <column name="report_timestamp">1123690000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">477c575</column>
            <column name="commit_timestamp">1123760000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">2:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">394</column>
            <column name="bug_id">106461</column>
            <column name="summary">Bug 106461  org.aspectj.weaver.patterns.WildTypePattern.maybeGetCleanName(WildTypePattern.java:500)</column>
            <column name="description"></column>
            <column name="report_time">2005-08-09 08:46:59</column>
            <column name="report_timestamp">1123590000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5735e96</column>
            <column name="commit_timestamp">1123670000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/patterns/PatternParser.java
weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</column>
            <column name="result">1:weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java
4:weaver/src/org/aspectj/weaver/patterns/PatternParser.java
19:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">395</column>
            <column name="bug_id">104212</column>
            <column name="summary">Bug 104212  static method call from subclass signature is wrong</column>
            <column name="description">a very bad bug... or ?

in the snip below, getMethod() says null and the factory is actually thinking
that test() is a static method of AspectJBugMain instead of Assert...

wondering why we don't catch that in the test suite or what could happen
recently around that. Or is it something I am confused about ? (i doubt a
jp.getSignature().getMethod is supposed to return null in some cases though..)

@Aspect
public class Sam {

    @Pointcut(&quot;call(* *.*(..))&quot;)
            public void methodCalls() {
    }

    @Around(&quot;methodCalls() &amp;&amp; !within(alex.sam.Sam) &amp;&amp; within(alex..*)&quot;)
            public Object aroundMethodCalls(ProceedingJoinPoint jp) throws
Throwable {
        String typeName = jp.getSignature().getDeclaringTypeName();
        System.out.println(&quot;declType &quot; + typeName);
        System.out.println(&quot;method &quot; +
((MethodSignature)jp.getSignature()).getMethod());

        return jp.proceed();
    }

}

class Assert {
    public static void test() {
        System.out.println(&quot;RUN Assert.test&quot;);
    }
}

class AspectJBugMain extends Assert {
    public static void main(String[] args) {
        test();
    }
//    public static void test() {
//        System.out.println(&quot;RUN AspectJBugMain.test&quot;);
//    }
}</column>
            <column name="report_time">2005-07-18 09:25:01</column>
            <column name="report_timestamp">1121690000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">619a6ad</column>
            <column name="commit_timestamp">1122040000</column>
            <column name="files">tests/java5/ataspectj/ataspectj/Bug104212.java
tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjSyntaxTests.java
weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</column>
            <column name="result">5:weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
46:weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
104:weaver/src/org/aspectj/weaver/bcel/BcelWorld.java
192:tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjSyntaxTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">396</column>
            <column name="bug_id">103266</column>
            <column name="summary">Bug 103266  NPE on syntax error</column>
            <column name="description">This example program generates an NPE on CVS HEAD and M2. I will attach the 
ajcore file.

public abstract aspect WorkerExample {

    after() returning (RequestContext newContext) : call(RequestContext+.new
(..)) {        
        System.out.println(&quot;constructing &quot;+newContext+&quot; 
at &quot;+thisJoinPoint.toLongString()+&quot; 
from &quot;+thisEnclosingJoinPointStaticPart+&quot;:&quot;);
    }

    public abstract class RequestContext {
        public final Object execute() {
            return doExecute();
        }
        
        /** template method */
        public abstract Object doExecute();
    }

    public static void main(String args[]) {
        new Runnable() {
            public void run() {}
        }.run();
    };
}

aspect ConcreteAlpha extends WorkerExample {

    Object around(final Object runnable) : execution(void Runnable.run()) &amp;&amp; 
this(runnable) {
        System.out.println(&quot;monitoring operation: &quot;+runnable+&quot; 
at &quot;+thisJoinPoint+&quot;, for &quot;+thisJoinPoint.getThis());
        RequestContext requestContext = new RequestContext() {
            public Object doExecute() {
                return proceed(runnable);
            }
            
        };
        return requestContext.execute();
    }
    
}

aspect ConcreteBeta extends WorkerExample {
    
    Object around() : call(void awqeyuwqer()) {
        RequestContext requestContext = new ConnectionRequestContext() {
            public Object doExecute() {                
                return proceed();
            }
            
        };
        return requestContext.execute();
    }

    
}</column>
            <column name="report_time">2005-07-10 01:40:14</column>
            <column name="report_timestamp">1120970000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">bba9c50</column>
            <column name="commit_timestamp">1121680000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/MakeDeclsPublicVisitor.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">8:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
218:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/MakeDeclsPublicVisitor.java</column>
        </table>
        <table name="aspectj">
            <column name="id">397</column>
            <column name="bug_id">83935</column>
            <column name="summary">Bug 83935  @AJ and formal binding impl</column>
            <column name="description">Some notes on formal binding impl for @AJ

In code style, the advice signature is always looking the same
(..bindings.., org.aspectj.lang.Part thisJoinPointStaticPart, JoinPoint
thisJoinPoint, org.aspectj.lang.Part thisEnclosingJoinPointStaticPart)

In @ style, it is user defined.

The current impl is handling the formal binding in a way that only
args/this/target can be bound.
I had to add some conditionals to handles cases like that:
void myAdvice(JoinPoint jp, Object target) {..}
where target() binding is at index 1, while the index 0 is not an unbound but
actually &quot;virtually&quot; bound to the joinpoint.

Pointcut are thus having a virtuallyBoundedNames String[] that is the list of
arguments for which we don't want any complain if it not bound.
This one is populated during  @ extraction, and Pointcut.concretize() make sure
the info is not lost when composition occurs (with PerClause f.e.)

The only issue is that currently, binding JP/SJP/ESJP themselves is not possible
f.e. &quot;... &amp;&amp; args(jp)&quot; myAdvice(JoinPoint jp, JoinPoint currentJp)
Is that a big issue ?
May be impact adviceexecution() and could impact some use cases around mock testing.</column>
            <column name="report_time">2005-01-28 10:29:18</column>
            <column name="report_timestamp">1106930000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">639b4fd</column>
            <column name="commit_timestamp">1121090000</column>
            <column name="files">tests/java5/ataspectj/ataspectj/MultipleBindingTest.java
tests/java5/ataspectj/ataspectj/SingletonAspectBindingsTest.java
tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjSyntaxTests.java
weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</column>
            <column name="result">9:weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
48:tests/java5/ataspectj/ataspectj/SingletonAspectBindingsTest.java
162:tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjSyntaxTests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">398</column>
            <column name="bug_id">100260</column>
            <column name="summary">Bug 100260  [generics][itds] methods inherited from a generic parent</column>
            <column name="description">when using an intertype declaration to add a method to a generic class, the
method is not correctly inherited. the bug doesn't apply to fields.

Strangely enough, raw types (generic types instantiated without specifying a
type parameter) inherit the methods properly:


class Generic_Parent&lt;T&gt; {}

class Child extends Generic_Parent&lt;Integer&gt; {}

class Generic_Child&lt;T&gt; extends Generic_Parent&lt;Integer&gt; {}

aspect Injector {
  public void Generic_Parent.inherited_method() {}
  public int Generic_Parent.inherited_field;

  public void test() {
    int inherited_field;
    inherited_field = new Generic_Child().inherited_field; // works
    inherited_field = new Generic_Child&lt;Integer&gt;().inherited_field; // works
    inherited_field = new Child().inherited_field; // works

    new Generic_Child().inherited_method(); // works
    new Generic_Child&lt;Integer&gt;().inherited_method(); // unresolved
    new Child().inherited_method(); // unresolved
  }
}</column>
            <column name="report_time">2005-06-15 14:29:21</column>
            <column name="report_timestamp">1118860000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b54831f</column>
            <column name="commit_timestamp">1118920000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result">1:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
        </table>
        <table name="aspectj">
            <column name="id">399</column>
            <column name="bug_id">100227</column>
            <column name="summary">Bug 100227  [generics][itds] inner class with generic enclosing class</column>
            <column name="description">ajc crashes with a NullPointerException when an intertype declaration tries to
modify an inner class, if the enclosing (outer) class is generic:

class Outer {
  class Inner {}
}

class Generic_Outer&lt;T&gt; {
  class Inner {}
}

aspect Injector {
  int Outer.outer; // works
  int Outer.Inner.inner; // works
  int Generic_Outer.outer; // works
  int Generic_Outer.Inner.inner; // crashes
}


/home/user/sgelin3/dev/java/ajc/new_bug/Bug.java [error] Internal compiler error
java.lang.NullPointerException
        at
org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding(EclipseFactory.java:202)
        at
org.aspectj.ajdt.internal.compiler.ast.InterTypeFieldDeclaration.build(InterTypeFieldDeclaration.java:173)
        at
org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause(AspectDeclaration.java:1020)
        at
org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause(AjLookupEnvironment.java:306)
        at
org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:122)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:302)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:316)
...</column>
            <column name="report_time">2005-06-15 12:24:09</column>
            <column name="report_timestamp">1118850000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7d5002a</column>
            <column name="commit_timestamp">1118910000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/TypeX.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
9:tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
13:weaver/src/org/aspectj/weaver/TypeX.java</column>
        </table>
        <table name="aspectj">
            <column name="id">400</column>
            <column name="bug_id">99168</column>
            <column name="summary">Bug 99168  [generics][itds] ITD on generic inner class crashes ajc</column>
            <column name="description">inter-type declaration on a generic inner class crashes the compiler:

class Outer {
  class Inner {}
  class Generic_Inner&lt;T&gt; {}
}

class Generic_Outer&lt;T&gt; {
}

aspect Injector {
  int Outer.outer; // works
  int Outer.Inner.inner; // works
  int Generic_Outer.outer; // works
  int Outer.Generic_Inner.inner; // crashes
}


/home/user/sgelin3/dev/java/ajc/new_bug/Bug.java [error] Internal compiler error
java.lang.RuntimeException: can't handle: class Generic_Inner#RAW
        extends NULL TYPENULL SUPERINTERFACES
        enclosing type : OuterNULL FIELDSNULL METHODS


        at
org.aspectj.ajdt.internal.compiler.lookup.InterTypeScope.makeSourceTypeBinding(InterTypeScope.java:35)
        at
org.aspectj.ajdt.internal.compiler.lookup.InterTypeScope.&lt;init&gt;(InterTypeScope.java:28)
        at
org.aspectj.ajdt.internal.compiler.ast.InterTypeDeclaration.resolve(InterTypeDeclaration.java:101)
        at
org.aspectj.ajdt.internal.compiler.ast.InterTypeFieldDeclaration.resolve(InterTypeFieldDeclaration.java:141)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1076)
        at
org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve(AspectDeclaration.java:110)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1125)
...</column>
            <column name="report_time">2005-06-09 11:21:17</column>
            <column name="report_timestamp">1118330000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">588023e</column>
            <column name="commit_timestamp">1118760000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeScope.java</column>
            <column name="result">1:org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeScope.java</column>
        </table>
        <table name="aspectj">
            <column name="id">401</column>
            <column name="bug_id">84260</column>
            <column name="summary">Bug 84260  import static fails when importing a method</column>
            <column name="description">I got the following error:
==============================================
MyClass2.java:3 [error] The import MyClass.myMethod cannot be resolved
import static MyClass.myMethod;
==============================================

other import static statements (Strings/Enums) appear to work.</column>
            <column name="report_time">2005-02-02 14:23:31</column>
            <column name="report_timestamp">1107370000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f747b82</column>
            <column name="commit_timestamp">1118230000</column>
            <column name="files">tests/bugs150/pr84260/A.java
tests/bugs150/pr84260/I1.java
tests/bugs150/pr84260/I2.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">402</column>
            <column name="bug_id">98646</column>
            <column name="summary">Bug 98646  parser cannot parse varargs correctly</column>
            <column name="description">the following cannot be parsed:

call(* *(int, Integer...))

see in modules/weaver/.../PointcutVisitorTest (uncomment the testTemp())
See &quot;FIXME AV for Adrian&quot; comments in PatternParser. Half fix but then fails for
other tests.

Adrian can you have a look at it ?
Thanks</column>
            <column name="report_time">2005-06-07 05:55:18</column>
            <column name="report_timestamp">1118140000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">743566f</column>
            <column name="commit_timestamp">1118150000</column>
            <column name="files">weaver/src/org/aspectj/weaver/patterns/BasicTokenSource.java
weaver/src/org/aspectj/weaver/patterns/PatternParser.java
weaver/testsrc/org/aspectj/weaver/patterns/VisitorTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">403</column>
            <column name="bug_id">94167</column>
            <column name="summary">Bug 94167  NPE in reflect implementation</column>
            <column name="description">Proposed fix (I'd like input on how to best add test cases for this so I can 
submit a tested patch); I believe this will work because if you uncomment the 
work-around line, it works):

Change line 63 from:
				method = declaringType.getDeclaredMethod
(getName(),getParameterTypes());

to

				method = getDeclaringType().getDeclaredMethod
(getName(),getParameterTypes());

Test source:

package reflect;

import org.aspectj.lang.*;
import org.aspectj.lang.reflect.*;
import java.lang.reflect.*;

aspect Test {
    before() : call(* *(..)) &amp;&amp; !within(Test) {
       MethodSignature sig = (MethodSignature)thisJoinPoint.getSignature();
       //sig.getDeclaringType(); // uncomment to work-around
       Method method = sig.getMethod();
   }
}

public class MinimalErr {
    public static void main(String args[]) {
	try {
	    Inner.foo();
	} catch (Throwable t) {
	    t.printStackTrace();
	}
    }
    public static class Inner {
	public static void foo() {}
    }
}</column>
            <column name="report_time">2005-05-09 13:37:42</column>
            <column name="report_timestamp">1115660000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3824b1c</column>
            <column name="commit_timestamp">1118150000</column>
            <column name="files">runtime/src/org/aspectj/runtime/reflect/AdviceSignatureImpl.java
runtime/src/org/aspectj/runtime/reflect/MethodSignatureImpl.java
tests/bugs150/PR94167.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">404</column>
            <column name="bug_id">81846</column>
            <column name="summary">Bug 81846  EclipseAdapterUtils.java:83</column>
            <column name="description">java.lang.ArrayIndexOutOfBoundsException: 3

Unfortunately I can't provide much more information, please see the attached 
compiler dump.</column>
            <column name="report_time">2004-12-23 07:27:36</column>
            <column name="report_timestamp">1103800000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a675b65</column>
            <column name="commit_timestamp">1117640000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">405</column>
            <column name="bug_id">96371</column>
            <column name="summary">Bug 96371  Patch to support loading aop.xml properly</column>
            <column name="description">AspectJ 5 load-time weaving in CVS HEAD isn't loading aop.xml files properly 
from a jar file without specifying the global -D flag. The following patch 
fixes the problem for me so I can load aop.xml files from jars on the 
classpath without a global flag:

ClassLoaderWeavingAdaptor.java:109:
-             Enumeration xmls = loader.getResources(&quot;/META-INF/aop.xml&quot;);
+            Enumeration xmls = loader.getResources(&quot;META-INF/aop.xml&quot;);


I.e., getResources doesn't work with a leading separator, at least not on the 
Sun VM or JRockIt on Windows. Writing a unit test for this would require 
significant changes to the loadtime module, so I wrote a standalone test of 
the API:

public class TestApi extends TestCase {
    public void testLoadResource() throws Exception {
        URL urlList[] = { new URL
(&quot;file:testsrc/org/aspectj/weaver/loadtime/test/sample.jar&quot;) };
        ClassLoader loader = new URLClassLoader(urlList);	
          
        Enumeration xmls = loader.getResources(&quot;META-INF/aop.xml&quot;);
        //this version fails:
        //Enumeration xmls = loader.getResources(&quot;/META-INF/aop.xml&quot;);

        assertTrue(xmls.hasMoreElements());
    }
}</column>
            <column name="report_time">2005-05-23 17:22:52</column>
            <column name="report_timestamp">1116880000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f14646f</column>
            <column name="commit_timestamp">1117450000</column>
            <column name="files">loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java
loadtime5/java5-src/org/aspectj/weaver/loadtime/ClassPreProcessorAgentAdapter.java
tests/java5/ataspectj/ataspectj/SingletonAspectBindingsTest.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">406</column>
            <column name="bug_id">94086</column>
            <column name="summary">Bug 94086  Exploding compile time with if() statements in pointcut</column>
            <column name="description">Compile time explodes when adding if(...) statements to pointcuts.
This is the same with ajc 1.2.1 and 1.5M2 although 1.5M2 is a little bit faster,
but compile time still explodes.

Example:
    pointcut pc2() :
        (execution(* Test.a(..)) &amp;&amp; if(sl.isEnabled()) )
        || (execution(* Test.a(..)) &amp;&amp; if(sl.isEnabled()) )

compiled in about 1 second.

Up to 7 such conditions , eg.
    pointcut Pc7() :
        (execution(* Test.a(..)) &amp;&amp; if (sl.isEnabled()))
        || (execution(* Test.b(..)) &amp;&amp; if (sl.isEnabled()))
        || (execution(* Test.c(..)) &amp;&amp; if (sl.isEnabled()))
        || (execution(* Test.d(..)) &amp;&amp; if (sl.isEnabled()))
        || (execution(* Test.e(..)) &amp;&amp; if (sl.isEnabled()))
        || (execution(* Test.f(..)) &amp;&amp; if (sl.isEnabled()))
        || (execution(* Test.g(..)) &amp;&amp; if (sl.isEnabled()));

are also compiled quite quickly (~ 3 seconds with both ajc 1.2.1 and 1.5M2).

Now, adding another condition (8 lines) causes 6 seconds compile time. Adding
yet another condition line (= 9 ex. lines) causes ~ 1 min compile time!
(10 such lines even more than 8 minutes)

Sample source code below
------------------------

// ########## Aspect.aj ###############

public aspect Aspect {
    private static final SimpleLogger sl
        = new SimpleLogger();

    pointcut PC() :
        (execution(* Test.a(..)) &amp;&amp; if (sl.isEnabled()))
        || (execution(* Test.b(..)) &amp;&amp; if (sl.isEnabled()))
        || (execution(* Test.c(..)) &amp;&amp; if (sl.isEnabled()))
        || (execution(* Test.d(..)) &amp;&amp; if (sl.isEnabled()))
        || (execution(* Test.e(..)) &amp;&amp; if (sl.isEnabled()))
        || (execution(* Test.f(..)) &amp;&amp; if (sl.isEnabled()))
        || (execution(* Test.g(..)) &amp;&amp; if (sl.isEnabled()))
        || (execution(* Test.h(..)) &amp;&amp; if (sl.isEnabled()))
        || (execution(* Test.i(..)) &amp;&amp; if (sl.isEnabled()))
        || (execution(* Test.j(..)) &amp;&amp; if (sl.isEnabled()))
        ;

    before() : PC() {
        sl.log(&quot;Before&quot;);
    }

    after() : PC() {
        sl.log(&quot;After&quot;);
    }
}

// ########## Test.java ###############</column>
            <column name="report_time">2005-05-09 04:45:22</column>
            <column name="report_timestamp">1115630000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">88d477d</column>
            <column name="commit_timestamp">1116240000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">407</column>
            <column name="bug_id">84312</column>
            <column name="summary">Bug 84312  Finish implementation of *runtime* retention checking</column>
            <column name="description">See FIXME in BindingAnnotationTypePattern.resolveBinding() and
EclipseSourceType.getAnnotationTypes()</column>
            <column name="report_time">2005-02-03 05:47:10</column>
            <column name="report_timestamp">1107430000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f9eebd4</column>
            <column name="commit_timestamp">1115900000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java
weaver/src/org/aspectj/weaver/patterns/BindingAnnotationTypePattern.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">408</column>
            <column name="bug_id">86832</column>
            <column name="summary">Bug 86832  Internal compiler error (generics?)</column>
            <column name="description">Attached is project that will generate an &quot;Internal compiler error&quot; for a single
class that extends &quot;ArrayList&lt;Object&gt;&quot;. If the class extends just &quot;ArrayList&quot;
the compiler error does not occur. 

Note that the &quot;extends ArrayList&lt;Object&gt;&quot; class compiles successuflly without
the aspectj nature.


--- exception ---

Severity	Description	Resource	In Folder	Location	Creation Time
2	Internal compiler error
java.lang.NullPointerException
	at
org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.detectHierarchyCycle(ClassScope.java:945)
	at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference.internalResolveType(ParameterizedSingleTypeReference.java:143)
	at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference.resolveType(ParameterizedSingleTypeReference.java:208)
	at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveSuperType(TypeReference.java:112)
	at
org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.findSupertype(ClassScope.java:1092)
	at
org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:747)
	at
org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:884)
	at
org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:249)
	at
org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:91)
	at
org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:331)
	at
org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:348)
	at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:682)
	at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:168)
	at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:102)
	at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)
	at
org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:165)
	FlattenedListExtendsArrayListObject.java
opentrader.infra/src/org/opentrader/infra/springframework		February 28, 2005
9:59:42 AM</column>
            <column name="report_time">2005-02-28 09:59:49</column>
            <column name="report_timestamp">1109600000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0cb826c</column>
            <column name="commit_timestamp">1115890000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">409</column>
            <column name="bug_id">82755</column>
            <column name="summary">Bug 82755  [ajdoc] update ajdoc to support Java 5 language features</column>
            <column name="description">Java 5 langauge features such as enums and annotations need to be supported by 
ajdoc.</column>
            <column name="report_time">2005-01-13 10:49:15</column>
            <column name="report_timestamp">1105630000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7b7c7b2</column>
            <column name="commit_timestamp">1115880000</column>
            <column name="files">ajdoc/src/org/aspectj/tools/ajdoc/Declaration.java
ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">410</column>
            <column name="bug_id">93345</column>
            <column name="summary">Bug 93345  unresolved joinpoint in cflow causes ClassCastException on BcelWeaver:933</column>
            <column name="description">I'm getting ClassCastException while compiling following code:

---- Test.java ----
class AClass {
//      void method() {}
}

aspect AnAspect {
        pointcut annt() : cflow( execution(* *(..)) );

        before() : annt() {
                System.out.println(&quot;before annt&quot;);
        }
}
----

Here's output of the compiler:
--- out ---
java.lang.ClassCastException: org.aspectj.weaver.ResolvedMember
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:933)
        at
org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:244)
        at
org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:119)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:385)
  [cut]
------

The problem is caused by cflow on unresolved (not existing) jointpoint.
When you uncomment the method() in AnClass, the problem disappears.


I found this bug when I was introducing an aspect (which has
pointcuts based on annotations) to fresh object-oriented system
without annotated classes. When I started to annotate the classes
problem disappeared. Following code illustates (simplified) situation:

--- Test2.java ---
import java.lang.annotation.*;

@Target(ElementType.METHOD)
@interface Ann {}

class AClass {
        // @Ann
        void method() {}
}

aspect AnAspect {
        pointcut annt() : cflow( execution(@Ann * *(..)) );

        before() : annt() {
                System.out.println(&quot;before annt&quot;);
        }
}
----


I'm attaching those sources and ajcore files.

Best regards, Michal</column>
            <column name="report_time">2005-04-30 08:49:47</column>
            <column name="report_timestamp">1114870000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f603458</column>
            <column name="commit_timestamp">1115640000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java
tests/src/org/aspectj/systemtest/ajc150/StaticImports.java
tests/src/org/aspectj/systemtest/ajc150/SuppressedWarnings.java
weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">411</column>
            <column name="bug_id">87282</column>
            <column name="summary">Bug 87282  Compilation error on generic member introduction</column>
            <column name="description">The compiler aborts with the following introduction code:

aspect introductionToA{
 
  private ArrayList&lt;B&gt; A.m_Array = new ArrayList&lt;B&gt;();  

  public void A.addB(B tmp){
    m_Array.add(tmp);
  }
}

The error message is &quot;[error] The method add(E) in the type ArrayList&lt;E&gt; is not
applicable for the arguments (B) m_Array.add(tmp)&quot;

Compiling with AspectJ Development version (2005/02/18).</column>
            <column name="report_time">2005-03-07 11:27:29</column>
            <column name="report_timestamp">1110210000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">51c018d</column>
            <column name="commit_timestamp">1115390000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">412</column>
            <column name="bug_id">91053</column>
            <column name="summary">Bug 91053  Generics problem with Set - does not compile with AspectJ 5</column>
            <column name="description">I tried different things to remove compiler warnings about generics which you
get when you switch to JDK 5 and use collections. At last I fall back to JDK
1.4. The following code compiles with AspectJ 5 and JDK compliance level 1.4:

public aspect SubjectAspect {
    
    private Set Subject.observers = new HashSet();

    public void Subject.addObserver(SubjectObserver observer) {
        observers.add(observer);
    }
    ...
}

After switching to compliance level 5.0 I get an error message
&quot;The method add(E) in the type Set&lt;E&gt; is not applicable for the arguments
(SubjectObserver)&quot;.
I don't know if it is a similar problem like #87550 but I means for older
projects which use collections that they can't switch to JDK 1.5</column>
            <column name="report_time">2005-04-11 17:15:13</column>
            <column name="report_timestamp">1113250000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">952dda9</column>
            <column name="commit_timestamp">1115390000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java
weaver/src/org/aspectj/weaver/TypeX.java
weaver/src/org/aspectj/weaver/World.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">413</column>
            <column name="bug_id">91267</column>
            <column name="summary">Bug 91267  NPE at EclipseFactory.java:143 when using generic methods in aspects</column>
            <column name="description">When I compile any of these two aspects with ajc -1.5, an exception is thrown by
the compiler:


import java.util.*;

public aspect TestBug1 {
    static &lt;T&gt; void addToEnv(Map&lt;String,T&gt; env, String key, T value) {
	env.put(key, value);
    }
}


import java.util.*;

public aspect TestBug2 {
    static &lt;T&gt; T lookupEnv(Map&lt;String,T&gt; env, String key) {
	return env.get(key);
    }
}


If the methods are placed into classes instead of aspects, all works fine.

The exception thrown is the following:

java.lang.NullPointerException
        at
org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.getName(EclipseFactory.java:143)
        at
org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding(EclipseFactory.java:166)
        at
org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBindings(EclipseFactory.java:176)
        at
org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember(EclipseFactory.java:254)
        at
org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember(EclipseFactory.java:249)
        at
org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.fillDeclaredMembers(EclipseSourceType.java:115)
        at
org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getDeclaredPointcuts(EclipseSourceType.java:146)
        at
org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause(AspectDeclaration.java:977)
        at
org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause(AjLookupEnvironment.java:303)
        at
org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:119)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:331)
        at
org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:348)
        at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:683)
        at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:168)
        at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:102)
        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:109)
        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)
        at org.aspectj.tools.ajc.Main.run(Main.java:291)
        at org.aspectj.tools.ajc.Main.runMain(Main.java:227)
        at org.aspectj.tools.ajc.Main.main(Main.java:80)</column>
            <column name="report_time">2005-04-13 09:29:09</column>
            <column name="report_timestamp">1113400000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7389d9f</column>
            <column name="commit_timestamp">1115370000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java
weaver/src/org/aspectj/weaver/TypeX.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">414</column>
            <column name="bug_id">91719</column>
            <column name="summary">Bug 91719  Work with Oli B to pull in examples of generating all the LINT messages</column>
            <column name="description"></column>
            <column name="report_time">2005-04-18 05:21:33</column>
            <column name="report_timestamp">1113820000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">70b9ffd</column>
            <column name="commit_timestamp">1115220000</column>
            <column name="files">tests/bugs/seven/lint/Main.java
tests/src/org/aspectj/systemtest/xlint/XLintTests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">415</column>
            <column name="bug_id">92906</column>
            <column name="summary">Bug 92906  showWeaveInfo for declare annotations</column>
            <column name="description">declaring annotations (declare @type, @constructor, @method and @field)
currently doesn't show a message when the -showWeaveInfo option is set in ajc.

Appropriate messages should be displayed.</column>
            <column name="report_time">2005-04-27 09:55:33</column>
            <column name="report_timestamp">1114610000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">abc9a58</column>
            <column name="commit_timestamp">1115200000</column>
            <column name="files">ajde/testsrc/org/aspectj/ajde/ShowWeaveMessagesTestCase.java
bridge/src/org/aspectj/bridge/WeaveMessage.java
weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java
weaver/src/org/aspectj/weaver/bcel/Utility.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">416</column>
            <column name="bug_id">92630</column>
            <column name="summary">Bug 92630  Null Pointer Exception thrown by ajc compiler</column>
            <column name="description"></column>
            <column name="report_time">2005-04-25 15:26:05</column>
            <column name="report_timestamp">1114460000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">02f75ba</column>
            <column name="commit_timestamp">1114530000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">417</column>
            <column name="bug_id">91912</column>
            <column name="summary">Bug 91912  Request for a new type of relationship in the structure model</column>
            <column name="description">Declare soft relationships are currently 'advises' and 'advised by' 
relationships.  Would it be possible to add 'softens' and 'softened by' 
(or 'softens exception at' and 'exception softened by') relationships to the 
structure model?</column>
            <column name="report_time">2005-04-19 11:32:29</column>
            <column name="report_timestamp">1113920000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7a61380</column>
            <column name="commit_timestamp">1114100000</column>
            <column name="files">asm/src/org/aspectj/asm/IRelationship.java
weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">418</column>
            <column name="bug_id">92053</column>
            <column name="summary">Bug 92053  @args causes a VerifyError: Unable to pop operand off an empty stack</column>
            <column name="description">I'm getting a VerifyError exception when I try to use @args
in following code:

------------------ Test3.java -------------------------
import java.lang.annotation.*;

@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@interface Ann {}

@Ann
class AClass{}

public class Test3 {
        void abc(AClass y) {}

        public static void main(String[] args) {
                new Test3().abc(new AClass());
        }
}


aspect Annotations {
        before(Ann ann) : call(* Test3.*(..)) &amp;&amp; @args(ann) {
                System.out.println(&quot;Before: &quot; + thisJoinPoint);
        }
}
----

On JRockIt5 jre and AspectJ 1.5.0M2 I get following result:
-----------
java.lang.VerifyError: (class: Test3, method: main signature:
([Ljava/lang/String;)V) Unable to pop operand off an empty stack
-----------

I'm getting similar error with sun jre and with older versions
of AspectJ5 (20050324155000 and from 10th feb).</column>
            <column name="report_time">2005-04-20 07:19:59</column>
            <column name="report_timestamp">1114000000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3f942a4</column>
            <column name="commit_timestamp">1114010000</column>
            <column name="files">tests/java5/annotations/binding/bugs/Test3.java
tests/src/org/aspectj/systemtest/ajc150/AnnotationBinding.java
weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">419</column>
            <column name="bug_id">91858</column>
            <column name="summary">Bug 91858  NullPointerException when declare @type is spelt with capital letter</column>
            <column name="description">I have the following code in an AspectJ project:

declare @Type: MainClass : @MyAnnotation;

I believe the correct syntax should be:

declare @type: MainClass : @MyAnnotation;

However when I saved my aspect with the first version I got the following 
NullPointerException:

java.lang.NullPointerException
	at 
org.aspectj.ajdt.internal.compiler.ast.DeclareAnnotationDeclaration.postParse
(DeclareAnnotationDeclaration.java:83)
	at 
org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.postParse
(ClassScope.java:175)
	at 
org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.buildFieldsAndM
ethods(ClassScope.java:154)
	at 
org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.build
FieldsAndMethods(CompilationUnitScope.java:63)
	at 
org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindi
ngs(AjLookupEnvironment.java:104)
	at 
org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile
(Compiler.java:331)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile
(Compiler.java:348)
	at 
org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation
(AjBuildManager.java:683)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild
(AjBuildManager.java:191)
	at 
org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild
(AjBuildManager.java:109)
	at org.aspectj.ajde.internal.CompilerAdapter.compile
(CompilerAdapter.java:117)
	at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run
(AspectJBuildManager.java:165)</column>
            <column name="report_time">2005-04-19 05:38:48</column>
            <column name="report_timestamp">1113900000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">78abc76</column>
            <column name="commit_timestamp">1114000000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/DeclareAnnotationDeclaration.java
tests/src/org/aspectj/systemtest/ajc150/DeclareAnnotationTests.java
weaver/src/org/aspectj/weaver/patterns/PatternParser.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">420</column>
            <column name="bug_id">82171</column>
            <column name="summary">Bug 82171  enable ASM interoperability with JavaCore via uniform element handles</column>
            <column name="description"></column>
            <column name="report_time">2005-01-04 14:13:17</column>
            <column name="report_timestamp">1104870000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">df7fff4</column>
            <column name="commit_timestamp">1113500000</column>
            <column name="files">asm/src/org/aspectj/asm/AsmManager.java
asm/src/org/aspectj/asm/IElementHandleProvider.java
asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java
asm/src/org/aspectj/asm/internal/FullPathHandleProvider.java
asm/src/org/aspectj/asm/internal/ProgramElement.java
docs/sandbox/api-clients/org/aspectj/samples/AsmRelationshipMapExtensionTest.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AsmInterTypeRelationshipProvider.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java
weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java
weaver/src/org/aspectj/weaver/ShadowMunger.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">421</column>
            <column name="bug_id">90588</column>
            <column name="summary">Bug 90588  compiler verifyerror and an NPE</column>
            <column name="description"></column>
            <column name="report_time">2005-04-07 06:32:11</column>
            <column name="report_timestamp">1112870000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d697649</column>
            <column name="commit_timestamp">1113400000</column>
            <column name="files">tests/bugs150/pr90588/AbstractClass.java
tests/bugs150/pr90588/ConcreteClass.java
tests/src/org/aspectj/systemtest/knownfailures/KnownfailuresTests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">422</column>
            <column name="bug_id">85297</column>
            <column name="summary">Bug 85297  Improvements to incremental compilation</column>
            <column name="description"></column>
            <column name="report_time">2005-02-15 12:31:18</column>
            <column name="report_timestamp">1108490000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">e460b1e</column>
            <column name="commit_timestamp">1112710000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/IStateListener.java
tests/src/org/aspectj/systemtest/incremental/IncrementalTests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">423</column>
            <column name="bug_id">88862</column>
            <column name="summary">Bug 88862  Declare annotation on ITDs</column>
            <column name="description">I'll use this bug to capture info on the implementation...</column>
            <column name="report_time">2005-03-23 09:47:03</column>
            <column name="report_timestamp">1111590000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0d14ccf</column>
            <column name="commit_timestamp">1111610000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/AnnotationBinding.java
tests/src/org/aspectj/systemtest/ajc150/Annotations.java
weaver/src/org/aspectj/weaver/NewFieldTypeMunger.java
weaver/src/org/aspectj/weaver/ResolvedMember.java
weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java
weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java
weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">424</column>
            <column name="bug_id">84333</column>
            <column name="summary">Bug 84333  BCException: Bad type name: TypeX.nameToSignature(TypeX.java:635)</column>
            <column name="description"></column>
            <column name="report_time">2005-02-03 10:14:20</column>
            <column name="report_timestamp">1107440000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">fb01cad</column>
            <column name="commit_timestamp">1111610000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">425</column>
            <column name="bug_id">84122</column>
            <column name="summary">Bug 84122  Allow aspectPath to contain directories</column>
            <column name="description">The -aspectpath option to the compiler only allows jar/zip files, not
directories. But inpath and classpath allow directories.

This capability would improve the handling of aspects spanning multiple projects
in Eclipse. AJDT can currently only support jar/zip files on the aspect path,
which requires one of the projects to create an outjar instead of writing to the
bin directory as usual.

The iajc ant task could then also be enhanced to support aspectpath directories.</column>
            <column name="report_time">2005-02-01 05:03:27</column>
            <column name="report_timestamp">1107250000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">68f6350</column>
            <column name="commit_timestamp">1111600000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java
tests/options/aspectpath/MyClass.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">426</column>
            <column name="bug_id">76055</column>
            <column name="summary">Bug 76055  Some Pointcut PatternNodes are missing getters to traverse syntax tree</column>
            <column name="description">In order to find out which other pointcuts are referenced by a pointcut definition  
i need to access the private members of the CflowPointcut, IfPointcut and
NotPointcut PatternNodes found in the weaver module.

Unlike the OrPointcut and AndPointcut classes, they are missing the appropriate
getter methods.</column>
            <column name="report_time">2004-10-12 03:43:52</column>
            <column name="report_timestamp">1097570000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b0f270e</column>
            <column name="commit_timestamp">1111590000</column>
            <column name="files">weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java
weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">427</column>
            <column name="bug_id">88652</column>
            <column name="summary">Bug 88652  an array type as the last parameter in a signature does not match on the varargs declared method</column>
            <column name="description">I get this warning in my code, though I actually do not specify an array type.

The signature I want to match is the following constructor signature:

public Touple(Object formulaHandle, Object... propositions) {...}

Touple implements IRelation

The pointcut I use is the following:

pointcut p(): call(Touple.new(..));

This should actually match the signature, shouldn't it?
AspectJ however complains with this warning:

an array type as the last parameter in a signature does not match on the varargs 
declared method: void ltlrv.Touple.&lt;init&gt;(java.lang.Object, java.lang.Object[]) 
[Xlint:cantMatchArrayTypeOnVarargs]

Also, even if I *had* stated an array type, it should match even then IMHO, 
since arrays and varargs are actually the same in the Java implementation.</column>
            <column name="report_time">2005-03-21 12:05:42</column>
            <column name="report_timestamp">1111420000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b5f4d09</column>
            <column name="commit_timestamp">1111500000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java
weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java
weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java
weaver/src/org/aspectj/weaver/patterns/TypePattern.java
weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">428</column>
            <column name="bug_id">87376</column>
            <column name="summary">Bug 87376  NPE when unresolved type of a bound var in a pointcut expression (EclipseFactory.java:224)</column>
            <column name="description">see attached mini-project to reproduce</column>
            <column name="report_time">2005-03-08 10:11:13</column>
            <column name="report_timestamp">1110290000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">85aa152</column>
            <column name="commit_timestamp">1110460000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java
tests/bugs150/pr87376/I.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">429</column>
            <column name="bug_id">86789</column>
            <column name="summary">Bug 86789  annotations and &quot;circularity in declare precedence&quot;</column>
            <column name="description"></column>
            <column name="report_time">2005-02-27 16:24:12</column>
            <column name="report_timestamp">1109540000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f90186c</column>
            <column name="commit_timestamp">1110380000</column>
            <column name="files">weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">430</column>
            <column name="bug_id">83565</column>
            <column name="summary">Bug 83565  BCException &quot;bad type name&quot; thrown when compiling</column>
            <column name="description">I just downloaded AJDT version 1.2.0.20050124144759 and I am running Eclipse
3.1M4.  I tried to use aspectJ on an existing Java 5 project.  There are no
aspects in it yet, just straight Java 5.  The project runs just fine as a
standard Java project. 

When add the AspectJ nature and I try to compile the project, no class files are
generated and I get this error generated on a type that is parameterized:

Internal compiler error
org.aspectj.weaver.BCException: Bad type name: 

	at org.aspectj.weaver.TypeX.nameToSignature(TypeX.java:634)

	at org.aspectj.weaver.TypeX.forName(TypeX.java:87)

	at
org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding(EclipseFactory.java:155)

	at
org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBindings(EclipseFactory.java:163)

	at
org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember(EclipseFactory.java:229)

	at
org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember(EclipseFactory.java:224)

	at
org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit(AsmHierarchyBuilder.java:675)

	at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.traverse(ConstructorDeclaration.java:447)

	at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1133)

	at
org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:314)

	at
org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild(AsmHierarchyBuilder.java:171)

	at
org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit(AsmHierarchyBuilder.java:111)

	at
org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit(EclipseFactory.java:354)

	at
org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(AjCompilerAdapter.java:138)

	at
org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:373)

	at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:682)

	at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:168)

	at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:102)

	at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)

	at
org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:165)


The source code of the file that generates this error is:

package mj.compiler.ast;

import java.util.Vector;

import mj.compiler.Driver;
import mj.compiler.Visitor;

public class Sequence&lt;T extends AST&gt; extends AST {
	
	private Vector&lt;T&gt; elements = new Vector&lt;T&gt;();
	
	public Sequence() {
		super(0, 0);
    }
	
	public Sequence(T element) {
		super(element);
		elements.add(element);
    }
    
	public int length()       { return elements.size(); }
	public T elementAt(int i) { return elements.elementAt(i); }

    public Sequence add(T element) {
    	elements.add(element);
		return this;
    }
    
    public Sequence add(int pos, T element) {
    	elements.add(pos, element);
    	return this;
    }
    
    public Sequence addAll(Sequence&lt;T&gt; others) {		
		if(  others == null ) return this;
		elements.addAll(others.elements);
		return this;
    }
    
    public void visitChildren(Visitor v) {
    	for( AST element : elements ) {
    		element.visit(v);
        }
    }
    
    public void replaceChild(AST old, AST gnu) {
    	T NEW = (T)gnu;
    	for(int i = 0; i &lt; elements.size(); i++ ) {
    		if( elements.get(i) == old ) {
    			elements.set(i, NEW);
    			return;
    		}
    	}
    	throw new Driver.CompileError(&quot;Can't find child in replaceChild.&quot;);
    }

	/*** START GENERATED VISITOR PROTOCOL ***///TODO
    public void visit(mj.compiler.Visitor v) {
        v.visitSequence(this);
    }
	/*** END GENERATED VISITOR PROTOCOL ***/
}


Hope this helps something.

ps- I am able to create and run a very simple AspectJ project with an aspect,
advice, and some Java 5 syntax.</column>
            <column name="report_time">2005-01-24 17:13:15</column>
            <column name="report_timestamp">1106600000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5765d53</column>
            <column name="commit_timestamp">1106850000</column>
            <column name="files">ajde/testdata/bug-83565/Bug.java
ajde/testsrc/org/aspectj/ajde/AjdeTests.java
ajde/testsrc/org/aspectj/ajde/GenericsTest.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">431</column>
            <column name="bug_id">83626</column>
            <column name="summary">Bug 83626  @AJ</column>
            <column name="description">Andy wants a patch format + a bugzilla for @AJ work due to some funny license issue.
Here it is as drafted</column>
            <column name="report_time">2005-01-25 11:20:09</column>
            <column name="report_timestamp">1106670000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7b4c7d7</column>
            <column name="commit_timestamp">1106750000</column>
            <column name="files">bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">432</column>
            <column name="bug_id">83563</column>
            <column name="summary">Bug 83563  pertypewithin() handing of inner classes</column>
            <column name="description"></column>
            <column name="report_time">2005-01-24 14:59:36</column>
            <column name="report_timestamp">1106600000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">1b01255</column>
            <column name="commit_timestamp">1106680000</column>
            <column name="files">tests/bugs150/PR83563_1.java
tests/bugs150/PR83563_2.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150TestsNoHarness.java
weaver/src/org/aspectj/weaver/PerTypeWithinTargetTypeMunger.java
weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">433</column>
            <column name="bug_id">83303</column>
            <column name="summary">Bug 83303  complier error when mixing inheritance, overriding and polymorphism</column>
            <column name="description">Given this scenario:
- class A define method m1 (with proteceted visibility)
- class B extends class A and implements interface I and override method m1 (but
with public visibility)
- interface I define method m1 (with public  visibility)

The code is correct and compile using java 1.4

Let's modify the scenario:
move the method B.m1 into a method introduction on aspect C, such that
- class B extends class A
- apsect C intosuces method m1 into B (with public visibility) and makes B
implemts I (declare parents)
- A and I as before

The compiler reports this error:
B.java:1 [error] The inherited method A.m1() cannot hide the public abstract
method in I
class B extends A {</column>
            <column name="report_time">2005-01-20 08:47:23</column>
            <column name="report_timestamp">1106230000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5d281fd</column>
            <column name="commit_timestamp">1106230000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java
tests/bugs150/PR83303.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150TestsNoHarness.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">434</column>
            <column name="bug_id">82340</column>
            <column name="summary">Bug 82340  Visibility selector ignored for pointcuts</column>
            <column name="description">Using ajdoc under AJDT 1.1.12 or AspectJ 1.2.1 at the commandline has the 
following aspect has problems.

public abstract aspect Aspect {

	private pointcut privatePointcut ();
	protected pointcut protectedPointcut ();
	public pointcut publicPointcut ();
	
	private void privateMethod () {
		
	}
	
	public void protectedMethod () {
		
	}
	
	public void publicMethod () {
		
	}
}

1. Asking for &quot;protected&quot; gives all pointcuts (public, protected _and_ private)
2. The Aspect entry is wrong: &quot;public abstract class Aspect&quot;
3. The &quot;Methods inherited ...&quot; section has a leading comma: &quot;, clone, equals, 
finalize, ...&quot;</column>
            <column name="report_time">2005-01-06 12:25:09</column>
            <column name="report_timestamp">1105030000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b460597</column>
            <column name="commit_timestamp">1105630000</column>
            <column name="files">ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java
ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java
ajdoc/testdata/bug82340/Pointcuts.java
ajdoc/testdata/coverage/foo/NoMembers.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/PointcutVisibilityTest.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">435</column>
            <column name="bug_id">82218</column>
            <column name="summary">Bug 82218  fails to doc spacewar using AJDT 1.2.0M2</column>
            <column name="description">Using AJDT 1.2.0M2 {with Java 5 JRE on XP SP2}, install Spacewar example and
generate to Spacewar/docs.  
Result: output has no cross-references (and displays special AJDT tags), and
stderr lists this exception:

java.lang.StringIndexOutOfBoundsException: String index out of range: -1
	at java.lang.AbstractStringBuilder.insert(AbstractStringBuilder.java:980)
	at java.lang.StringBuffer.insert(StringBuffer.java:447)
	at
org.aspectj.tools.ajdoc.HtmlDecorator.insertDeclarationsDetails(HtmlDecorator.java:350)
	at
org.aspectj.tools.ajdoc.HtmlDecorator.addAspectDocumentation(HtmlDecorator.java:234)
	at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFile(HtmlDecorator.java:188)
	at
org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecl(HtmlDecorator.java:116)
	at
org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecls(HtmlDecorator.java:54)
	at
org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromInputFiles(HtmlDecorator.java:43)
	at org.aspectj.tools.ajdoc.Main.main(Main.java:210)</column>
            <column name="report_time">2005-01-05 04:49:41</column>
            <column name="report_timestamp">1104920000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f70b383</column>
            <column name="commit_timestamp">1105590000</column>
            <column name="files">ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java
ajdoc/src/org/aspectj/tools/ajdoc/Util.java
ajdoc/testdata/coverage/foo/ModelCoverage.java
ajdoc/testdata/coverage/foo/NoMembers.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/JDKVersionTest.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">436</column>
            <column name="bug_id">78021</column>
            <column name="summary">Bug 78021  Injecting exception into while loop with break statement causes catch block to be ignored</column>
            <column name="description">In order to test exception scenarios in an existing framework, I have
created an aspect to inject an exception.  The exception is injected into
some code running within a try/catch/finally block.  After the exception is
thrown, I am expecting control to pass to the catch block.  However, what
is happening is that the catch block code is not executed, control passes
through the finally block and the (undeclared) exception is thrown to the
calling method.

Here is a distilled test case:

public class MainClass {

       protected Integer counter;
       private int j;

       public static void main(String[] args) {

               MainClass mh = new MainClass();
               try {
                       mh.doSomething();
               } catch (Exception e) {
                       System.out.println(&quot;Exception thrown by
doSomething!!!!!&quot;);
                       e.printStackTrace();
               }
       }

       public void doSomething() {
               int i = 0;
               while (i++ &lt; 1) {
                       counter=null;

                       try {
                               counter = getCounter();
                               if (counter == null) {
                                       break;
                               }

                               commit();
                       } catch (Throwable e) {
                               System.out.println(&quot;Caught exception &quot; +
e);
                       } finally {
                               System.out.println(&quot;In finally block&quot;);
                       }
               }
       }

       protected Integer getCounter() {
               return new Integer(j++);
       }

       protected void commit() throws SQLException {
               System.out.println(&quot;Main.commit&quot;);
       }
}

The following aspect injects the exception:

public aspect SimpleExceptionThrowingAspect {

   pointcut commitOperation() : call (* MainClass+.commit(..));

   before() throws SQLException : commitOperation() {
        throw new SQLException(&quot;Dummy SQL Exception&quot;, &quot;55102&quot;);
   }
}

Expected output is:
       Caught exception java.sql.SQLException: Dummy SQL Exception
       In finally block

Actual output is:
       In finally block
       Exception thrown by doSomething!!!!!
       java.sql.SQLException: Dummy SQL Exception        at
nz.govt.moh.test.SimpleExceptionThrowingAspect.ajc$before$nz_govt_moh_test_SimpleExceptionThrowingAspect$1$292c82f1(SimpleExceptionThrowingAspect.aj:10)

       at nz.govt.moh.test.MainClass.doSomething(MainClass.java:32)
       at nz.govt.moh.test.MainClass.main(MainClass.java:14)


Removing the &quot;break;&quot; statement from MainClass.java causes the expected
output to be produced.</column>
            <column name="report_time">2004-11-06 13:47:16</column>
            <column name="report_timestamp">1099770000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">603b063</column>
            <column name="commit_timestamp">1105440000</column>
            <column name="files">tests/bugs150/PR78021.java
tests/bugs150/PR79554.java
tests/src/org/aspectj/systemtest/AllTests.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150TestsNoHarness.java
tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java
tests/src/org/aspectj/systemtest/ajc150/AllTestsJava5_binaryWeaving.java
tests/src/org/aspectj/systemtest/ajc150/TestUtils.java
weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">437</column>
            <column name="bug_id">82134</column>
            <column name="summary">Bug 82134  AspectJ 5 M2 should implement backwards compatibility for binary aspect form</column>
            <column name="description"></column>
            <column name="report_time">2005-01-04 09:40:55</column>
            <column name="report_timestamp">1104850000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">797b6a6</column>
            <column name="commit_timestamp">1105110000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc150/AllTestsJava5_binaryWeaving.java
tests/src/org/aspectj/systemtest/ajc150/MigrationTests.java
weaver/src/org/aspectj/weaver/AdviceKind.java
weaver/src/org/aspectj/weaver/AjAttribute.java
weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java
weaver/src/org/aspectj/weaver/VersionedDataInputStream.java
weaver/src/org/aspectj/weaver/WeaverStateInfo.java
weaver/src/org/aspectj/weaver/bcel/BcelAttributes.java
weaver/src/org/aspectj/weaver/bcel/BcelField.java
weaver/src/org/aspectj/weaver/bcel/BcelMethod.java
weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java
weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java
weaver/src/org/aspectj/weaver/patterns/AndAnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/AndPointcut.java
weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java
weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java
weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java
weaver/src/org/aspectj/weaver/patterns/BindingAnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/BindingTypePattern.java
weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java
weaver/src/org/aspectj/weaver/patterns/Declare.java
weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java
weaver/src/org/aspectj/weaver/patterns/DeclareParents.java
weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java
weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java
weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java
weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java
weaver/src/org/aspectj/weaver/patterns/IfPointcut.java
weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java
weaver/src/org/aspectj/weaver/patterns/ModifiersPattern.java
weaver/src/org/aspectj/weaver/patterns/NamePattern.java
weaver/src/org/aspectj/weaver/patterns/NotAnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/NotPointcut.java
weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java
weaver/src/org/aspectj/weaver/patterns/OrAnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/OrPointcut.java
weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java
weaver/src/org/aspectj/weaver/patterns/PerCflow.java
weaver/src/org/aspectj/weaver/patterns/PerClause.java
weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java
weaver/src/org/aspectj/weaver/patterns/PerObject.java
weaver/src/org/aspectj/weaver/patterns/PerSingleton.java
weaver/src/org/aspectj/weaver/patterns/Pointcut.java
weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java
weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java
weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java
weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java
weaver/src/org/aspectj/weaver/patterns/TypePattern.java
weaver/src/org/aspectj/weaver/patterns/TypePatternList.java
weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java
weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java
weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java
weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java
weaver/testsrc/org/aspectj/weaver/bcel/PatternWeaveTestCase.java
weaver/testsrc/org/aspectj/weaver/bcel/PointcutResidueTestCase.java
weaver/testsrc/org/aspectj/weaver/patterns/AndOrNotTestCase.java
weaver/testsrc/org/aspectj/weaver/patterns/DeclareErrorOrWarningTestCase.java
weaver/testsrc/org/aspectj/weaver/patterns/ModifiersPatternTestCase.java
weaver/testsrc/org/aspectj/weaver/patterns/NamePatternTestCase.java
weaver/testsrc/org/aspectj/weaver/patterns/SignaturePatternTestCase.java
weaver/testsrc/org/aspectj/weaver/patterns/TypePatternListTestCase.java
weaver/testsrc/org/aspectj/weaver/patterns/TypePatternTestCase.java
weaver/testsrc/org/aspectj/weaver/patterns/WithinTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">438</column>
            <column name="bug_id">81863</column>
            <column name="summary">Bug 81863  Annotation matching using within() PCD doesn't appear to be working.</column>
            <column name="description"></column>
            <column name="report_time">2004-12-23 10:54:16</column>
            <column name="report_timestamp">1103820000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">8a8930f</column>
            <column name="commit_timestamp">1104940000</column>
            <column name="files">tests/java5/annotations/within/PlainWithin.java
tests/src/org/aspectj/systemtest/ajc150/AnnotationPointcutsTests.java
tests/src/org/aspectj/systemtest/ajc150/AnnotationRuntimeTests.java
weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java
weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java
weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java
weaver/src/org/aspectj/weaver/patterns/TypePattern.java
weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java
weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">439</column>
            <column name="bug_id">82062</column>
            <column name="summary">Bug 82062  WeaveMessage should provide more information</column>
            <column name="description">It would be wonderful if the WeaveMessage object would provide two additional
things:

- the affected class name
- the aspect name

I could use this to determine which aspect is woven into which class during
load-time weaving (need this for dependency management).</column>
            <column name="report_time">2005-01-01 15:07:54</column>
            <column name="report_timestamp">1104610000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9897659</column>
            <column name="commit_timestamp">1104840000</column>
            <column name="files">bridge/src/org/aspectj/bridge/WeaveMessage.java
weaver/src/org/aspectj/weaver/Advice.java
weaver/src/org/aspectj/weaver/Shadow.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java
weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">440</column>
            <column name="bug_id">80916</column>
            <column name="summary">Bug 80916  In some cases the structure model doesn't contain the &quot;matches declare&quot; relationship</column>
            <column name="description">With a project containing one class and one aspect:

public class HelloClass {

	public static void main(String[] args) {
		new HelloClass().sayHello();
	}
	
	public void sayHello() {
		System.out.println(&quot;Hello&quot;);
	}
	
}


public aspect A1 {

	pointcut test() : get(* System.out);
	
	declare warning : test() &amp;&amp; !within(A1)
		 : &quot;test warning&quot;;
	
	pointcut anotherTest() : 
		execution(void HelloClass.sayHello(..));
	
	after() returning : anotherTest() {
		System.out.println(&quot;returning....&quot;);
	}
		
}

The following is returned from the structure model:

asmRelMap entry: HelloClass.sayHello(), relationship: advised by, target: 
A1.afterReturning(): anotherTest..
asmRelMap entry: A1.afterReturning(): anotherTest.., relationship: uses 
pointcut, target: A1.anotherTest()
asmRelMap entry: A1.afterReturning(): anotherTest.., relationship: advises, 
target: HelloClass.sayHello()
asmRelMap entry: HelloClass.sayHello(), relationship: advised by, target: 
A1.afterReturning(): anotherTest..
asmRelMap entry: A1.anotherTest(), relationship: pointcut used by, target: 
A1.afterReturning(): anotherTest..
asmRelMap entry: A1.declare warning: &quot;test warning&quot;, relationship: matched by, 
target: HelloClass.sayHello()

In other words, the model is saying that there are two entries the same:

asmRelMap entry: HelloClass.sayHello(), relationship: advised by, target: 
A1.afterReturning(): anotherTest..

whereas one of these should be the &quot;matches declare&quot; relationship relating to 
the declare warning.

Changing the aspect to be:


public aspect A1 {

	pointcut test() : get(* System.out);
	
	declare warning : test() &amp;&amp; !within(A1)
		 : &quot;test warning&quot;;
	
	pointcut anotherTest() : 
		execution(void HelloClass.sayHello(..));
	
	after() returning : anotherTest() {
		System.out.println(&quot;returning....&quot;);
	}
	
	after() returning : test() {
		System.out.println(&quot;returning again!&quot;);
	}
	
}

means that the IRelationshipMap does now contain the &quot;matches declare&quot; 
relationship.

This is all with AspectJ 5 M1.</column>
            <column name="report_time">2004-12-14 06:01:38</column>
            <column name="report_timestamp">1103020000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">427c0d3</column>
            <column name="commit_timestamp">1103550000</column>
            <column name="files">weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">441</column>
            <column name="bug_id">80249</column>
            <column name="summary">Bug 80249  Order of types passed to compiler determines weaving behavior</column>
            <column name="description">Currently, the order in which you specify types when passing them to the
compiler can affect how they are woven:

For example, if we have class A and class B extends A - Also, an aspect that
'declare parents: A+ implements Serializable' then depending on whether we see A
first, we may or may not make B serializable.

The fix is that when we weave a type, we first weave its supertype then its
superinterfaces (if they were also passed to the compiler).

The problematic construct is declare parents - so we only process the types in a
special order if there are declare parents around.  Also, because we can't
currently do decp when binary weaving, the order processing logic is only being
put into the source weaving pipeline.</column>
            <column name="report_time">2004-12-06 05:20:15</column>
            <column name="report_timestamp">1102330000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9052d5d</column>
            <column name="commit_timestamp">1102330000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java
tests/decp/A.java
tests/decp/AspectX.java
tests/decp/B.java
tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">442</column>
            <column name="bug_id">77163</column>
            <column name="summary">Bug 77163  Load time weaver default verbose setting</column>
            <column name="description">The default setting for the load time weaver is (as of 1.2.1rc1) to produce
weaving messages rather than ignore them.  I think the default should be changed
to ignore them.  

Also, I cannot override the default setting with -Daj.weaver.versose=&quot;False&quot;. 
This is the implied syntax from docs/examples/build.xml.  If this has changed
then build.xml should be updated.  Otherwise, the weaver should be fixed to use it!</column>
            <column name="report_time">2004-10-27 20:09:52</column>
            <column name="report_timestamp">1098920000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">edd6539</column>
            <column name="commit_timestamp">1099650000</column>
            <column name="files">weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java
weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">443</column>
            <column name="bug_id">77799</column>
            <column name="summary">Bug 77799  NullPointerException in StructureSearchManager</column>
            <column name="description">Calling Ajde.getDefault().getStructureSearchManager().findMatches(...)
for an AspectJ project that has not been built results in a NullPointerException
in StructureSearchManager.findMatchesHelper(...) (line 58)

Simple patch is attached.</column>
            <column name="report_time">2004-11-04 01:48:22</column>
            <column name="report_timestamp">1099550000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">aab9c2c</column>
            <column name="commit_timestamp">1099580000</column>
            <column name="files">ajde/src/org/aspectj/ajde/ui/StructureSearchManager.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">444</column>
            <column name="bug_id">76798</column>
            <column name="summary">Bug 76798  Add versions to woven class files - enabling better backwards compatibility.</column>
            <column name="description">We don't currently include a version in the class files that come out of the
weaver.  This can cause problems.  For example, if we add a new attribute to a
class file in a future version of AspectJ, then that attribute will cause older
versions of AspectJ to blow up if they encounter it.  If we include a version in
the class file we can rev the version number when we add attributes (or change
the class file form in another way), and by checking that version number in the
weaver we can better determine whether we should fail if we encounter a new
attribute (or other change), or if it is safe to continue processing.

I will add a new WeaverVersion attribute that includes 2 shorts.  Major and Minor.

Encountering a major version in a class file that is greater than the version a
particular weaver is designed to understand will cause compilation to fail.

Encountering a minor version in a class file that is greater than the minor
version a particular weaver is designed to understand will not cause compilation
to fail - we will assume it is safe to continue.</column>
            <column name="report_time">2004-10-22 07:04:41</column>
            <column name="report_timestamp">1098440000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6aa7516</column>
            <column name="commit_timestamp">1098440000</column>
            <column name="files">weaver/src/org/aspectj/weaver/AjAttribute.java
weaver/src/org/aspectj/weaver/bcel/BcelAttributes.java
weaver/src/org/aspectj/weaver/bcel/BcelField.java
weaver/src/org/aspectj/weaver/bcel/BcelMethod.java
weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java
weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java
weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">445</column>
            <column name="bug_id">73895</column>
            <column name="summary">Bug 73895  unnecessary cast causing problems</column>
            <column name="description">class: org.aspectj.weaver.ResolvedTypeX$Name
method: isCoerceableFrom(..)

I am having trouble with the line:

ResolvedMember[] b = ((Name)other).getDeclaredMethods(); //??? is this cast
always safe

As the comment suggests this cast is NOT always safe. In my case the cast is not
safe because I have some additional implementations for ResolvedTypeX (some
optimizations).

Solution: just remove the cast since the method &quot;getDeclaredMethods&quot; is already
defined abstract in the type of &quot;other&quot; (ResolvedTypeX). So the cast seems to be
obsolete anyway.</column>
            <column name="report_time">2004-09-14 13:08:41</column>
            <column name="report_timestamp">1095180000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">8a64fa2</column>
            <column name="commit_timestamp">1098370000</column>
            <column name="files">weaver/src/org/aspectj/weaver/ResolvedTypeX.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">446</column>
            <column name="bug_id">74952</column>
            <column name="summary">Bug 74952  before,after !(cflow(within(Trace*))) prints nothing</column>
            <column name="description">Reference: &quot;cflow(within(C)) vs (within(C)||cflowbelow(within(C)) in
aspectj-users mailing list.

The aspect TraceClass below doesn't print any message when the pointcut is
defined to &quot;!cflow(within(Trace*))&quot;. The other defintion &quot;!(within(Trace*) ||
cflowbelow(within(Trace*)))&quot; works fine. Wes Isberg in his reply explained that
cflow should never be used alone but he thought &quot;there is a bug or two in here&quot;

class SomeClass 
{
    static public void main (String [] args) {
    }
} // SomeClass

aspect TraceClass {

    // members
    static private int level = 0;

    static private void offset() {
        int i;
        for (i = 0; i &lt; level; ++i) {
            System.out.print(&quot;  &quot;);
        }
    } // offset

    pointcut pc() : 
        !cflow(within(Trace*))
//        !(within(Trace*) || cflowbelow(within(Trace*)))
        ;
    before () : pc() {
        offset();
        System.out.println(&quot;-&gt; &quot; + thisJoinPoint);
        ++level;
    }
    after  () : pc() {
        --level;
        offset();
        System.out.println(&quot;&lt;- &quot; + thisJoinPoint);
    }
} // TraceClass

In order to try to figure out what is happening within TraceClass, I added a
second aspect, TraceTrace, just to trace TraceClass.

aspect TraceTrace {

    // members
    static private int level = 0;

    static private void offset() {
        int i;
        for (i = 0; i &lt; level; ++i) {
            System.out.print(&quot;  &quot;);
        }
    } // offset

    pointcut pc() : within(TraceClass);
    before () : pc() {
        offset();
        System.out.println(&quot;=&gt; &quot; + thisJoinPoint);
        ++level;
    }
    after  () : pc() {
        --level;
        offset();
        System.out.println(&quot;&lt;= &quot; + thisJoinPoint);
    }
} // TraceTrace

Here is what TraceTrace prints when TraceClass uses &quot;!cflow(within(Trace*))&quot;

=&gt; staticinitialization(TraceClass.&lt;clinit&gt;)
  =&gt; set(int TraceClass.level)
  &lt;= set(int TraceClass.level)
  =&gt; preinitialization(TraceClass())
    =&gt; initialization(TraceClass())
      =&gt; execution(TraceClass())
      &lt;= execution(TraceClass())
    &lt;= initialization(TraceClass())
  &lt;= staticinitialization(TraceClass.&lt;clinit&gt;)

The after advice is not executed for preinitialization.</column>
            <column name="report_time">2004-09-24 11:04:58</column>
            <column name="report_timestamp">1096040000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a303a09</column>
            <column name="commit_timestamp">1098360000</column>
            <column name="files">tests/bugs/WhatsGoingOn.java
tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">447</column>
            <column name="bug_id">76096</column>
            <column name="summary">Bug 76096  Anonymous classes unaware of introductions into abstract classes (error can't find type $Local$)</column>
            <column name="description"></column>
            <column name="report_time">2004-10-12 12:17:35</column>
            <column name="report_timestamp">1097600000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6beb43f</column>
            <column name="commit_timestamp">1098180000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java
tests/bugs/pr76096/ConcreteClassA.java
tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">448</column>
            <column name="bug_id">75568</column>
            <column name="summary">Bug 75568  ajc changes classfile timestamps even if compilation fails (regression)</column>
            <column name="description">It appears that ajc 1.2 updates a classfile timestamps even if the compilation 
fails. This breaks the integration with the Ant build system. E.g. using the 
ant &quot;javac&quot; task with the Ajc11CompilerAdapter interface, the compilation may 
fail on the first attempt and succeed on the second attempt, - because ajc has 
touched the timestamp and Ant hence decides that nothing needs to be recompiled.

This did not happen in ajc 1.1.

To reproduce:
1. In the examples/observer folder, run a build:
 ajc -sourceroots . 
2. Edit the &quot;Demo.java&quot; class and insert the line &quot;DONT COMPILE&quot;
3. Run the compilation again. The compiler displays the correct error message 
but the Demo.class file has been updated with the compile-time timestamp.</column>
            <column name="report_time">2004-10-04 10:12:39</column>
            <column name="report_timestamp">1096900000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0a77939</column>
            <column name="commit_timestamp">1097760000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java
org.aspectj.ajdt.core/testdata/src1/C1.java
org.aspectj.ajdt.core/testdata/src1/C2.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/ProceedOnErrorTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">449</column>
            <column name="bug_id">74238</column>
            <column name="summary">Bug 74238  Applet which uses cflow pointcut gets AccessControlException</column>
            <column name="description">When I used cflow pointcut for my applet, I couldn't launch the Applet.

java.lang.ExceptionInInitializerError
        at SandAspect.ajc$preClinit(SandAspect.aj)
        at SandAspect.&lt;clinit&gt;(SandAspect.aj)
        at SandApplet.init(SandApplet.java)
        at sun.applet.AppletPanel.run(AppletPanel.java:353)
        at java.lang.Thread.run(Thread.java:534)
Caused by: java.security.AccessControlException: access denied (java.util.Proper
tyPermission aspectj.runtime.cflowstack.usethreadlocal read)
        at java.security.AccessControlContext.checkPermission(AccessControlConte
xt.java:269)
        at java.security.AccessController.checkPermission(AccessController.java:
401)
        at java.lang.SecurityManager.checkPermission(SecurityManager.java:524)
        at java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:12
76)
        at java.lang.System.getProperty(System.java:612)
        at org.aspectj.runtime.internal.CFlowStack.selectFactoryForVMVersion(CFl
owStack.java:124)
        at org.aspectj.runtime.internal.CFlowStack.&lt;clinit&gt;(CFlowStack.java:59)
        ... 5 more

It because CFlowStack uses System.getProperty method with no try..catch block. 
Applet doesn't have permission to read system property:
&quot;aspectj.runtime.cflowstack.usethreadlocal&quot;.

workaround:
modify CFlowStack.java(1.5) line 123,124 like this
-----
private static String getSystemPropertyWithNoSecurityException(
  String aPropertyName, String aDefaultValue){
  try{
    return System.getProperty(aPropertyName, aDefaultValue);
  } catch(java.lang.SecurityException e){
    return aDefaultValue;
  }
}

private static void selectFactoryForVMVersion() {
  String override = getSystemPropertyWithNoSecurityException(
    &quot;aspectj.runtime.cflowstack.usethreadlocal&quot;
    , &quot;unspecified&quot;
  );
-----
I think defining getSystemPropertyWithNoSecurityException(or more
simple name :-)) method in some utility class and using it where you call
System.getProperty are better way.</column>
            <column name="report_time">2004-09-19 05:51:49</column>
            <column name="report_timestamp">1095590000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6e155a6</column>
            <column name="commit_timestamp">1097740000</column>
            <column name="files">ajde/testdata/SecurityManagerTest/src/HelloWorld.java
runtime/src/org/aspectj/runtime/internal/CFlowCounter.java
runtime/src/org/aspectj/runtime/internal/CFlowStack.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">450</column>
            <column name="bug_id">72157</column>
            <column name="summary">Bug 72157  declare soft can cause programs with invalid exception behaviour to be generated</column>
            <column name="description">Compiling the program below results in the constructor for the class SCE2
throwing Exception, which it is not declared to throw either in the source code
or in the generated bytecode. If the 'declare soft' statement is removed, then
the super() call in the SCE2 constructor is correctly reported as throwing an
undeclared exception; it seems that the 'declare soft' statement turns off the
exception checking of the super() call despite there being no join point which
covers this call that would actually soften the exception.

I'm using 'DEVELOPMENT built on Monday Aug 16, 2004 at 13:50:47 GMT'.

public class SuperConsExc {
    public SuperConsExc() throws Exception {
	throw new Exception();
    }

    public static void main(String[] args) {
	new SCE2();
    }
}

class SCE2 extends SuperConsExc {
    public SCE2() {
	super();
    }
}

aspect SCEAspect {
    declare soft: Exception: within(SCE2);
}</column>
            <column name="report_time">2004-08-18 06:39:42</column>
            <column name="report_timestamp">1092830000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">eca1429</column>
            <column name="commit_timestamp">1094650000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java
tests/bugs/ConvertToUnchecked.java
tests/bugs/PR72157.java
tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">451</column>
            <column name="bug_id">73433</column>
            <column name="summary">Bug 73433  AspectJ does not correctly support -cp</column>
            <column name="description">Discovered by Andy Brodie.

-cp is a shorthand for -classpath supported by the JDT compiler.  AspectJ does
not correctly support -cp option.  Look at this example:

C:\aspectj1.2&gt;ajc -inpath injar.jar -outjar outjar.jar -cp lib\aspectjrt.jar
[error] can't find type org.aspectj.lang.JoinPoint


1 error

C:\aspectj1.2&gt;ajc -inpath injar.jar -outjar outjar.jar -classpath lib\aspectjrt.jar

This is due to the arg parser in AspectJ only recognizing -classpath.  It
doesn't fail when it encounters -cp, it just ignores it and passes it down to
JDT for processing.  The fix is to recognize -cp too.</column>
            <column name="report_time">2004-09-08 05:46:09</column>
            <column name="report_timestamp">1094640000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">8e4d898</column>
            <column name="commit_timestamp">1094640000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">452</column>
            <column name="bug_id">73334</column>
            <column name="summary">Bug 73334  Avoid clashes in the org.eclipse namespace by renaming our duplicates.</column>
            <column name="description">We have recently renamed our 'copy' of BCEL to use a different package prefix so
that our version never clashes with another version that might be around on a
users system.

This enhancement is to do the same thing for our 'copy' of the org.eclipse.jdt
code (in the shadows project).  As part of packaging the shadows project to
create the 'jdtcore' jar files (bin and src) we will rename the packages from:

org.eclipse.jdt.***

to

org.aspectj.org.eclipse.jdt.**

This has a really nice side effect that we can make our version of the compiler
accessible in the IDE.  It should now be possible for AJDT to work more closely
with it and get features like eager parsing to work.

Care will be taken that we don't accidentally make the merge process a nightmare.</column>
            <column name="report_time">2004-09-06 11:41:58</column>
            <column name="report_timestamp">1094490000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b133299</column>
            <column name="commit_timestamp">1094490000</column>
            <column name="files">ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java
ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java
ajde/testsrc/org/aspectj/ajde/ExtensionTests.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/compiler/IAjTerminalSymbols.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/core/AspectJCore.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjClassFile.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ClassFileBasedByteCodeProvider.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/IOutputClassFileNameProvider.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/InterimCompilationResult.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverAdapter.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AjConstructorDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AjMethodDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectClinit.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AstUtil.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/DeclareDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/EclipseAttributeAdapter.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/IfMethodDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/IfPseudoToken.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperFixerVisitor.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperReference.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeConstructorDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeFieldDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/KnownFieldReference.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/KnownMessageSend.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/MakeDeclsPublicVisitor.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDesignator.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ProceedVisitor.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PseudoToken.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PseudoTokens.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/SuperFixerVisitor.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjTypeConstants.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseScope.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceLocation.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseTypeMunger.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/HelperInterfaceBinding.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InlineAccessFieldBinding.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeFieldBinding.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMemberFinder.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMethodBinding.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeScope.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PointcutBinding.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PrivilegedFieldBinding.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PrivilegedHandler.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/SimpleSyntheticAccessMethodBinding.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/parser/DeclarationFactory.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBatchImageBuilder.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildNotifier.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjIncrementalImageBuilder.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseClassPathManager.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseSourceContext.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/StatefulNameEnvironment.java
org.aspectj.ajdt.core/testsrc/WeaveTests.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/AjdtCommandTestCase.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AsmBuilderTest.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">453</column>
            <column name="bug_id">72671</column>
            <column name="summary">Bug 72671  Bootclasspath specification for compiling is not possible</column>
            <column name="description">I have following bug running  eclipse 3.0 and ajdt 1.1.12

I have following class:
 
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

import org.w3c.dom.DOMConfiguration;
import org.w3c.dom.DOMError;
import org.w3c.dom.DOMErrorHandler;
import org.w3c.dom.Document;
import org.w3c.dom.DocumentFragment;
import org.w3c.dom.NodeList;
import org.w3c.dom.ls.DOMImplementationLS;
import org.w3c.dom.ls.LSInput;
import org.w3c.dom.ls.LSOutput;
import org.w3c.dom.ls.LSParser;

import com.dcbank.common.DOMImplementationLSSingleton;

public class DOMHelper {

   public static final String CLASS_ID = &quot;%full_filespec:
DOMHelper.java~1:java:1 %&quot;;
   
   public static void save(Document document, String filename)
   throws ClassNotFoundException, InstantiationException,  
IllegalAccessException, FileNotFoundException {
   
      document.normalizeDocument();
   }

}

which compiles very fine with JDK 1.4.2_02 on Windows XP, 
as soon as the  dom2-xml-apis.jar and dom3-xercesImpl.jar are added at the
beginning of the jre container, or are included in
the jar-library list before the system jar. 

As soon as I convert this project to an AspectJ project, the code does not
compile anymore. The aspectJ compiler does not find the  normalizeDocument,
which is included in the one of the two additional jars.
method any more.

kind regards
Arno Schmidmeier</column>
            <column name="report_time">2004-08-26 06:56:09</column>
            <column name="report_timestamp">1093520000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d1551bd</column>
            <column name="commit_timestamp">1094480000</column>
            <column name="files">ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">454</column>
            <column name="bug_id">72528</column>
            <column name="summary">Bug 72528  around advice throws java.lang.VerifyError at runtime</column>
            <column name="description">I have an aspect that captures around() a pcd and returns an Object[], though
the actual methods being instrumented might return any valid POJO array, i
understand that AspectJ will take care of casting at assignment.

I expected the following code to work properly, but at runtime i get a
java.lang.VerifyError as shown below:

F:\wd\Hello&gt;ajbrowser HelloWorld.lst
java.lang.VerifyError: (class: de/rohith/PrinterWorld, method: returnArrayWithCl
oning signature: ()[Ljava/lang/Integer;) Incompatible argument to function
        at de.rohith.HelloWorld.main(HelloWorld.java:18)
Exception in thread &quot;main&quot;

I suspect the compiler fails to notice the return types of the methods being
caught at compile time.

I have tested this code with both ajbrowser as well as AJDT, both result in the
same error output.

-----------HelloWorldAspect.java---------------
package de.rohith;

import java.lang.Object;

public aspect HelloWorldAspect {
    
	private int callDepth = -1;

    public HelloWorldAspect() {
    }
    
    pointcut hello(): !within(HelloWorldAspect);
    
    pointcut method(): execution(public (*[]) de..*(..));
    
    pointcut cloning(): call(* java.lang.Object.clone());

    declare warning: method() &amp;&amp; hello(): &quot;*[] returning method called&quot; ;
    
    Object[] around(): cflow(method()) &amp;&amp; cloning() &amp;&amp; hello() {
    	print(&quot;&quot;, thisEnclosingJoinPointStaticPart);
    	Object[] ret = proceed(); 
    	return (Object[])ret.clone();
    }

    private void print(String prefix, Object message) {
        for (int i = 0, spaces = callDepth * 2; i &lt; spaces; i++) {
            System.out.print(&quot; &quot;);
        }
        System.out.println(prefix + message);
    }

}


-----------PrinterWorld.java------------
package de.rohith;
public class PrinterWorld {
	private Integer[] intArray = new Integer[2];
	public PrinterWorld() {
		
	}
    public void print() {
        System.out.println(&quot;Hello World!&quot;); 
    }
    
    public Integer returnInt() {
    	return new Integer(3);
    }
    
    public Integer[] returnArrayWithCloning() {
    	for (int i = 0; i &lt; intArray.length; i++) {
			intArray[i] = new Integer(i++);
		}
    	return (Integer[])intArray.clone();
    }
    
    public Integer[] returnArrayWithoutCloning() {
    	return intArray;
    }
}

-----------HelloWorld.java------------
package de.rohith;

public class HelloWorld {

    public static void main(String[] args) {
        PrinterWorld p = new PrinterWorld();
        p.print(); 
        Integer i = p.returnInt();
        Integer[] intArray = p.returnArrayWithCloning();
        Integer[] array2 = p.returnArrayWithoutCloning();
    }
}</column>
            <column name="report_time">2004-08-24 14:21:34</column>
            <column name="report_timestamp">1093370000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">27d204c</column>
            <column name="commit_timestamp">1094220000</column>
            <column name="files">tests/bugs/ArrayCloning.java
tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java
weaver/src/org/aspectj/weaver/ResolvedTypeX.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">455</column>
            <column name="bug_id">46298</column>
            <column name="summary">Bug 46298  Aspectj generate code does not de-compile cleanly.</column>
            <column name="description"></column>
            <column name="report_time">2003-11-07 14:40:53</column>
            <column name="report_timestamp">1068230000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">4921f0c</column>
            <column name="commit_timestamp">1094050000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">456</column>
            <column name="bug_id">49743</column>
            <column name="summary">Bug 49743  performance improvements for runtime library</column>
            <column name="description">I am heavily using the runtime signature information from
thisJoinPoint.getSignature() and the toString() method of it. This causes heavy
String operations each time the toString method is called. Would it be possible
to cache the resulting string for example in MethodSignatureImpl and similar
classes for other signatures?</column>
            <column name="report_time">2004-01-08 17:37:54</column>
            <column name="report_timestamp">1073600000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">438e61c</column>
            <column name="commit_timestamp">1094030000</column>
            <column name="files">runtime/src/org/aspectj/runtime/reflect/AdviceSignatureImpl.java
runtime/src/org/aspectj/runtime/reflect/CatchClauseSignatureImpl.java
runtime/src/org/aspectj/runtime/reflect/ConstructorSignatureImpl.java
runtime/src/org/aspectj/runtime/reflect/Factory.java
runtime/src/org/aspectj/runtime/reflect/FieldSignatureImpl.java
runtime/src/org/aspectj/runtime/reflect/InitializerSignatureImpl.java
runtime/src/org/aspectj/runtime/reflect/MethodSignatureImpl.java
runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java
runtime/src/org/aspectj/runtime/reflect/SourceLocationImpl.java
runtime/src/org/aspectj/runtime/reflect/StringMaker.java
runtime/testsrc/RuntimeModuleTests.java
runtime/testsrc/org/aspectj/runtime/reflect/RuntimePerformanceTest.java
runtime/testsrc/org/aspectj/runtime/reflect/SignatureTest.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">457</column>
            <column name="bug_id">72699</column>
            <column name="summary">Bug 72699  Bogus error message: The abstract method ajc$pointcut$$tracingScope$a2 in type Tracing can only be defined by an abstract class</column>
            <column name="description">When attempting to compile the following aspect the resulting error message 
should say something like &quot;The abstract method pointcut tracingScope in type 
Tracing can only be defined by an abstract aspect&quot;

public aspect Tracing {
	public abstract pointcut tracingScope();

}</column>
            <column name="report_time">2004-08-26 11:46:30</column>
            <column name="report_timestamp">1093540000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5e08765</column>
            <column name="commit_timestamp">1093610000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java
tests/bugs/BogusMessage.java
tests/bugs/BogusMessage2.java
tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">458</column>
            <column name="bug_id">72150</column>
            <column name="summary">Bug 72150  AJC possible bug with static nested classes</column>
            <column name="description"></column>
            <column name="report_time">2004-08-18 03:27:01</column>
            <column name="report_timestamp">1092810000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b5e6307</column>
            <column name="commit_timestamp">1093600000</column>
            <column name="files">tests/bugs/java5/arrayCloning/A.java
tests/bugs/java5/arrayCloning/C.java
tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java
weaver/src/org/aspectj/weaver/TypeX.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">459</column>
            <column name="bug_id">72531</column>
            <column name="summary">Bug 72531  declare warning warns at wrong points</column>
            <column name="description"></column>
            <column name="report_time">2004-08-24 14:42:12</column>
            <column name="report_timestamp">1093370000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">82eae55</column>
            <column name="commit_timestamp">1093380000</column>
            <column name="files">tests/bugs/pr72531/de/rohith/HelloWorld.java
tests/bugs/pr72531/de/rohith/HelloWorldAspect.java
tests/bugs/pr72531/de/rohith/PrinterWorld.java
tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java
weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java
weaver/testsrc/org/aspectj/weaver/patterns/TypePatternTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">460</column>
            <column name="bug_id">72154</column>
            <column name="summary">Bug 72154  Support for simple dump file</column>
            <column name="description">When the compiler terminates abnormally (exception) or behaves unexpectedly 
(warning/error/abort) a simple dump of the compiler state should be produced 
to aid problem diagnosis. The content and conditions under which the dump is 
produced should be configurable by the user but the facility should be enabled 
by default for exceptions. Consequently its inclusion should have negligible 
impact on compiler performance and footprint. The file should be attached to 
bug reports to give a complete and objective description of the users 
environment and support problem resolution where a testcase cannot be provided.

One approach is to write a uniquely name file (using date &amp; time) in the 
current directory e.g ajcore.20040818.105200.txt which should be human 
readable (it can be zipped if large) to allow the user to potentially diagnose 
their own problems or remove potentially sensitive data before submission. It 
should contain basic information such as AspectJ version, system properties 
and command line as well as failure information such as _full_ exception stack 
trace, compiler messages and internal compiler state.</column>
            <column name="report_time">2004-08-18 06:00:35</column>
            <column name="report_timestamp">1092820000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f503523</column>
            <column name="commit_timestamp">1093270000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java
org.aspectj.ajdt.core/testdata/DumpTestCase/src/HelloWorld.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/CompilerDumpTestCase.java
weaver/src/org/aspectj/weaver/Dump.java
weaver/src/org/aspectj/weaver/World.java
weaver/testsrc/org/aspectj/weaver/BcweaverTests.java
weaver/testsrc/org/aspectj/weaver/DumpTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">461</column>
            <column name="bug_id">71811</column>
            <column name="summary">Bug 71811  AJDoc: should be able to set encoding like javadoc</column>
            <column name="description">ajdoc doesn't support the -encoding -docencoding and -charset options of javadoc.

Especially, it doesn't pass on the -encoding to ajc.
If your project uses a source file encoding (e.g. UTF-8) 
differing form the platform standard, and some java identifiers 
use characters byond the standard ASCII range, you won't be able 
to use ajdoc at all.</column>
            <column name="report_time">2004-08-11 13:40:26</column>
            <column name="report_timestamp">1092250000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5f80c8c</column>
            <column name="commit_timestamp">1092960000</column>
            <column name="files">ajdoc/src/org/aspectj/tools/ajdoc/Main.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">462</column>
            <column name="bug_id">49657</column>
            <column name="summary">Bug 49657  Weaver results in rt error if affected base class not exposed</column>
            <column name="description">I was weaving a 3rd party library and wrote an aspect that should affect both a 
base class and a derived class, but inadvertently wove only the derived class.  
This resulted in the following error. I would like the weaver to catch this 
kind of error at weave (link) time, rather than creating code that results in a 
rt error... I get this error in 1.1.1 final and in a fairly recent version from 
CVS HEAD:

java.lang.AbstractMethodError
	at ajee.logging.LogManager.ajc$interMethodDispatch1
$ajee_logging_LogManager$ajee_logging_Loggable$getLogger(LogManager.java)
	at 
ajee.tracing.ExecutionTracer.ajc$before$ajee_tracing_ExecutionTracer$926
(ExecutionTracer.java:62)
	at library.Derived.&lt;init&gt;(Derived.java:46)

This line is a call to super();

I've attached a small example that reproduces another error that I think is 
related:
C:\devel\test\ctors\twoPass&gt;build

C:\devel\test\ctors\twoPass&gt;call ajc -outjar fullBase.jar sample\Base.java sampl
e\Derived.java
Exception in thread &quot;main&quot; java.lang.ExceptionInInitializerError
        at sample.Derived.&lt;init&gt;(Derived.java:6)
        at sample.Derived.main(Derived.java:13)
Caused by: org.aspectj.lang.NoAspectBoundException
        at sample.Trace.aspectOf(Trace.aj)
        at sample.Trace.&lt;init&gt;(Trace.aj:5)
        at sample.Trace.ajc$postClinit(Trace.aj)
        at sample.Trace.&lt;clinit&gt;(Trace.aj:5)
        ... 2 more</column>
            <column name="report_time">2004-01-07 17:27:35</column>
            <column name="report_timestamp">1073510000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">dbe1024</column>
            <column name="commit_timestamp">1092930000</column>
            <column name="files">org.aspectj.ajdt.core/testdata/partialHierarchy/sample/Base.java
org.aspectj.ajdt.core/testdata/partialHierarchy/sample/Derived.java
org.aspectj.ajdt.core/testdata/partialHierarchy/sample/Iface.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/PartiallyExposedHierarchyTestCase.java
weaver/src/org/aspectj/weaver/ResolvedTypeX.java
weaver/src/org/aspectj/weaver/WeaverMessages.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">463</column>
            <column name="bug_id">71723</column>
            <column name="summary">Bug 71723  Inconsistency in scoping of protected members in ITDs</column>
            <column name="description">When introducing new member functions to existing classes via inter-type
declarations, the scoping rules that apply to the ITD bodies are the same as for
the aspect - for example, private members of the target class cannot be accessed
unless the aspect is privileged.

Similarly, protected members of classes in different packages should not be
visible in ITDs unless the aspect is privileged.

This rule is only enforced for protected members declared in the target class -
protected members that are inherited are visible from ITDs in aspects in
different packages.

The following is an example of this:

----------------------
package foo;

public class Foo extends AncientFoo {
    protected int i() { return 42; }
    public static void main(String[] args) {
	new Foo().doStuff();
    }
    public void doStuff() { }
    protected int ancientI() { return 42; }
}

class AncientFoo {
    protected int ancientI() { return -42; }
    protected int ancientJ() { return 0; }
}
----------

package bar;
import foo.Foo;

aspect Bar {
    public void Foo.doing() {
	try {
	    System.out.println(i()); // fails in ajc
	    System.out.println(ancientI()); // fails in ajc
	    System.out.println(ancientJ()); // succeeds
	    System.out.println(clone()); // succeeds
	}
	catch(Throwable t) { }
    }
    before(Foo f) : call(* doStuff(..)) &amp;&amp; target(f) {
	f.doing();
    }
}
-------------------

All four calls in Foo.doing() should fail, as they refer to protected members of
foo.Foo from package bar. However, only the first 2 - the ones directly
declared/overridden in foo.Foo - are detected as errors, and removing them makes
the rest compile and execute.

Best wishes,
Pavel</column>
            <column name="report_time">2004-08-10 13:32:45</column>
            <column name="report_timestamp">1092160000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">dfb15c1</column>
            <column name="commit_timestamp">1092830000</column>
            <column name="files">tests/bugs/pr71723/foo/Foo.java
tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">464</column>
            <column name="bug_id">71076</column>
            <column name="summary">Bug 71076  Missing Javadoc comments that aren't missing</column>
            <column name="description">Reported in the AJDT newsgroup:

Go to Preferences &gt; Java &gt; Compiler &gt; Javadoc and set &quot;Missing javadoc comments&quot;
to &quot;Warning&quot;.

You then get warnings against things you wouldn't expect, such as after advice.

/**
 * A comment
 */
public aspect World {
	pointcut greeting() : execution(* Hello.sayHello(..));
	
	/**
	 * A comment
	 */
	after() returning : greeting() {
		System.out.println(&quot;world&quot;);
	}
}

This gives two warnings, one for the aspect itself, and one for the after
returning advice. The warnings occur both with and without the existence of
Javadoc comments!</column>
            <column name="report_time">2004-07-29 09:58:13</column>
            <column name="report_timestamp">1091110000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5b90224</column>
            <column name="commit_timestamp">1092830000</column>
            <column name="files">org.aspectj.ajdt.core/testdata/javadoc/World.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/JavadocTest.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">465</column>
            <column name="bug_id">62642</column>
            <column name="summary">Bug 62642  proper handling of ExceptionInIntializer inside &lt;clinit&gt; in presence of after throwing advice</column>
            <column name="description">When a &lt;clinit&gt; of a class contains after throwing advice that may catch
ExceptionInInitializer errors due to an embedded advice aspectOf() that
fails,  the ExceptionInIntializer error does not get properly reported.

For the example below:

public class Main {
  static int x = 13;
  int y;

  public Main() {
     y= 14;
  }

  public static void main(String args[])
    { Main m = new Main();
      m.y = 3;
      System.out.println(&quot;hi&quot;);
    }
}


aspect Aspect {

  before () :  within(*)
    { System.out.println(&quot;BEFORE &quot; + thisJoinPointStaticPart.getKind() +
                         &quot; at &quot; + thisJoinPointStaticPart.getSourceLocation());
    }

  after ()  : within(*)
    { System.out.println(&quot;AFTER &quot; + thisJoinPointStaticPart.getKind() +
                         &quot; at &quot; + thisJoinPointStaticPart.getSourceLocation());
    }
}


....  

when compiled with ajc, and then run,  the following exception is given,

Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError
        at Main.&lt;clinit&gt;(Main.java:1)

when really one wants the following:

Exception in thread &quot;main&quot; java.lang.ExceptionInInitializerError
        at Main. ...
Caused by: org.aspectj.lang.NoAspectBoundException: Aspect
        at Aspect.aspectOf ..
        

-------------

Here is a fix ... I give the decompiled &lt;clinit&gt; for Main.java and indicate with
comments,
  look for ***LJH ****,  what can be woven to fix it.   Basically, the catch
block for after throwing,  when in &lt;clinit&gt;,  should first check if the
caught exception if a ExceptionInInitializerError, and if so just throw it.

----------- static
    {
        org.aspectj.runtime.reflect.Factory r1;
        java.lang.Throwable r2, r31;
        int $i0;

        r1 = new Factory(&quot;Main.java&quot;, Class.forName(&quot;Main&quot;));
        ajc$tjp_0 = r1.makeSJP(&quot;field-set&quot;, r1.makeFieldSig(&quot;8-x-Main-int-&quot;), 2);
        ajc$tjp_1 = r1.makeSJP(&quot;staticinitialization&quot;,
r1.makeInitializerSig(&quot;8--Main-&quot;), 2);
        ajc$tjp_10 = r1.makeSJP(&quot;preinitialization&quot;,
r1.makeConstructorSig(&quot;1--Main----&quot;), 5);
        ajc$tjp_2 = r1.makeSJP(&quot;field-set&quot;, r1.makeFieldSig(&quot;0-y-Main-int-&quot;), 6);
        ajc$tjp_3 = r1.makeSJP(&quot;constructor-execution&quot;,
r1.makeConstructorSig(&quot;1--Main----&quot;), 6);
        ajc$tjp_4 = r1.makeSJP(&quot;constructor-call&quot;,
r1.makeConstructorSig(&quot;1--Main----&quot;), 10);
        ajc$tjp_5 = r1.makeSJP(&quot;field-set&quot;, r1.makeFieldSig(&quot;0-y-Main-int-&quot;), 11);
        ajc$tjp_6 = r1.makeSJP(&quot;field-get&quot;,
r1.makeFieldSig(&quot;19-out-java.lang.System-java.io.PrintStream-&quot;), 12);
        ajc$tjp_7 = r1.makeSJP(&quot;method-call&quot;,
r1.makeMethodSig(&quot;1-println-java.io.PrintStream-java.lang.String:-arg0:--void-&quot;),
12);
        ajc$tjp_8 = r1.makeSJP(&quot;method-execution&quot;,
r1.makeMethodSig(&quot;9-main-Main-[Ljava.lang.String;:-args:--void-&quot;), 10);
        ajc$tjp_9 = r1.makeSJP(&quot;initialization&quot;,
r1.makeConstructorSig(&quot;1--Main----&quot;), 6);

 try
        {
            Aspect.aspectOf().ajc$before$Aspect$1$36f01b1c(ajc$tjp_1);
            $i0 = 13;

            try
            {
                Aspect.aspectOf().ajc$before$Aspect$1$36f01b1c(ajc$tjp_0);
                x = $i0;
            }
            catch (Throwable $r30)
            {
                /*** LJH insert here *****/
                if ($r30 instanceof ExceptionInIntializerError) //***
                  throw($r30); //***
                /***********/
                r31 = $r30;
                Aspect.aspectOf().ajc$after$Aspect$2$36f01b1c(ajc$tjp_0);
                throw r31;
            }

            Aspect.aspectOf().ajc$after$Aspect$2$36f01b1c(ajc$tjp_0);
        }
        catch (Throwable $r36)
        {
           /*** LJH insert here *****/
           if ($r36 instanceof ExceptionInIntializerError) //***
           throw($r36); //***
           /***********/
            r2 = $r36;
            Aspect.aspectOf().ajc$after$Aspect$2$36f01b1c(ajc$tjp_1);
            throw r2;
        }

        Aspect.aspectOf().ajc$after$Aspect$2$36f01b1c(ajc$tjp_1);
    }</column>
            <column name="report_time">2004-05-18 10:23:19</column>
            <column name="report_timestamp">1084890000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">84e4e53</column>
            <column name="commit_timestamp">1092750000</column>
            <column name="files">tests/bugs/pr62642.java
tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">466</column>
            <column name="bug_id">70241</column>
            <column name="summary">Bug 70241  outline view shows anonymous inner classes in different way than jdt outline</column>
            <column name="description">See screenshots.</column>
            <column name="report_time">2004-07-16 11:41:14</column>
            <column name="report_timestamp">1089990000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a2469c7</column>
            <column name="commit_timestamp">1092740000</column>
            <column name="files">ajde/testdata/extensions/InnerClasses.java
ajde/testsrc/org/aspectj/ajde/ExtensionTests.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">467</column>
            <column name="bug_id">67578</column>
            <column name="summary">Bug 67578  Privileged Aspect Access Problem Across Packages</column>
            <column name="description">From Irum Godil's aspectj-users posting:

package a;

public class ITD {
    private void returnNothing(Object a) {
    }
}

package b;

import a.*;

privileged aspect B {
  public void ITD.newFun() {
      returnNothing(&quot;a&quot;);
  }
}

returns:
C:\devel\test\priv\b\B.aj:8 error The method returnNothing(Object) from the 
type
 ITD is not visible
returnNothing(&quot;a&quot;);
^^^^^^

1 error

Which it should not (and AspectJ 1.0.6 does not give an error)

Work around: use this.returnNothing(&quot;a&quot;);</column>
            <column name="report_time">2004-06-17 01:45:19</column>
            <column name="report_timestamp">1087450000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6b1ef0f</column>
            <column name="commit_timestamp">1092670000</column>
            <column name="files">tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">468</column>
            <column name="bug_id">71878</column>
            <column name="summary">Bug 71878  Bad injar aspect name on Linux</column>
            <column name="description">If you checkout the &quot;JarUsingProject&quot; project from &quot;org.eclipse.ajdt.test/manual
testing&quot; in the AJDT 1.1.12 tree, and look at the advised-by entries in the
outline view and the context menu of the gutter annotation, on Windows you get
&quot;injar aspect: AbstractAspect.aj&quot;, but on Linux you get &quot;injar aspect:
C:\eclipse30AJDTPluginTest\eclipse\workspace\JarGeneratingProject\src\p1\AbstractAspect.aj&quot;.
The Windows-style path indicates the location of the original class files in the
JAR file, which was clearly built on Windows.</column>
            <column name="report_time">2004-08-12 12:24:31</column>
            <column name="report_timestamp">1092330000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2dfc738</column>
            <column name="commit_timestamp">1092410000</column>
            <column name="files">asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">469</column>
            <column name="bug_id">61374</column>
            <column name="summary">Bug 61374  Version the BCEL libraries to allow graceful failure when the wrong version is found.</column>
            <column name="description"></column>
            <column name="report_time">2004-05-07 08:45:15</column>
            <column name="report_timestamp">1083930000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">228fc8d</column>
            <column name="commit_timestamp">1092300000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
weaver/src/org/aspectj/weaver/bcel/BcelAttributes.java
weaver/src/org/aspectj/weaver/bcel/BcelCflowAccessVar.java
weaver/src/org/aspectj/weaver/bcel/BcelCflowStackFieldAdder.java
weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
weaver/src/org/aspectj/weaver/bcel/BcelField.java
weaver/src/org/aspectj/weaver/bcel/BcelFieldRef.java
weaver/src/org/aspectj/weaver/bcel/BcelMethod.java
weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java
weaver/src/org/aspectj/weaver/bcel/BcelRenderer.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java
weaver/src/org/aspectj/weaver/bcel/BcelVar.java
weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java
weaver/src/org/aspectj/weaver/bcel/BcelWorld.java
weaver/src/org/aspectj/weaver/bcel/ExceptionRange.java
weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java
weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java
weaver/src/org/aspectj/weaver/bcel/Range.java
weaver/src/org/aspectj/weaver/bcel/ShadowRange.java
weaver/src/org/aspectj/weaver/bcel/Tag.java
weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java
weaver/src/org/aspectj/weaver/bcel/Utility.java
weaver/testsrc/org/aspectj/weaver/bcel/ArgsWeaveTestCase.java
weaver/testsrc/org/aspectj/weaver/bcel/MoveInstructionsWeaveTestCase.java
weaver/testsrc/org/aspectj/weaver/bcel/WeaveTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">470</column>
            <column name="bug_id">61768</column>
            <column name="summary">Bug 61768  scope for intertype methods</column>
            <column name="description">/* According to the documentation, the scope rules for
   intertype method declarations are interpreted
   from the originating aspect. The only exceptions
   (I thought) are the use of &quot;this&quot; and &quot;super&quot; which refer to
   the target type.

   According to that interpretation, the program below is type correct, but
   ajc generates two error messages, shown in comments
   at the relevant lines. Note that it's ok to access private static
   fields of the aspect, but not to use private classes of the aspect.

   If this is a feature and not a bug, what are the
   precise scope rules for intertype method declarations?
*/

aspect Aspect { 

    private static int y = 5;

    private class A { int x = 3; }

    private static void B.happy() {
	System.out.println(y);          // happy accessing private field y
    }

    private static void B.foo(A z) { 
	System.out.println(z.x); 	// ERROR: The type Aspect.A is not visible
    }

    public void B.bar() {
	B.foo(new A());                 // ERROR: The type A is not visible
    }

}

class B {
}

public class IT { 


    public static void main(String[] args) { 
	new B().bar();
    } 
 
}</column>
            <column name="report_time">2004-05-11 13:35:42</column>
            <column name="report_timestamp">1084300000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">8c5d743</column>
            <column name="commit_timestamp">1092240000</column>
            <column name="files">tests/bugs/oxford/PR61768.java
tests/bugs/oxford/PR62475.java
tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">471</column>
            <column name="bug_id">54421</column>
            <column name="summary">Bug 54421  Compile time declarations (warning and error) do not accept string concatenation (with +)</column>
            <column name="description">The following code does not compile because the message uses string 
concatenation (the + operator). 


public class WarningSample {

  public void method() {}
  public void anotherMethod() {
    this.method();
  }

}

aspect WarningAspect {

  pointcut illegalCall(): call(* WarningSample.method())
                &amp;&amp; within(WarningSample);

  // the same thing happens with declare error
  declare warning: illegalCall() : &quot;Hey, don't &quot; +
      &quot;do that, that is not nice. You should do something else&quot;;

}</column>
            <column name="report_time">2004-03-11 03:00:18</column>
            <column name="report_timestamp">1078990000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d43a391</column>
            <column name="commit_timestamp">1092230000</column>
            <column name="files">tests/bugs/decwStrings.java
tests/bugs/decwStringsErroneous.java
tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java
weaver/src/org/aspectj/weaver/patterns/PatternParser.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">472</column>
            <column name="bug_id">68991</column>
            <column name="summary">Bug 68991  intertype initialisers should match field set pointcuts</column>
            <column name="description">/* initialisers of intertype fields should match field set pointcuts.

   In the example below, the output should be

set field set(int C.n)
set field set(int C.m)
get field get(int C.n)
set field set(int C.n)

   but the first field set (of C.n) is not picked up.
*/



aspect Aspect {

    private int C.n = 13;

    before() : get(* C.*) {
	System.out.println(&quot;get field &quot;+thisJoinPointStaticPart);
    }

    before() : set(* C.*)  {
	System.out.println(&quot;set field &quot;+thisJoinPointStaticPart);
    }

    public void C.foo() {
	n++;
    }

}

class C {
    int m = 20;
}

public class ITFieldsAdvice {

    public static void main(String[] args) {
	C c = new C();
	c.foo();
    }

}</column>
            <column name="report_time">2004-06-30 07:51:21</column>
            <column name="report_timestamp">1088600000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">64183c3</column>
            <column name="commit_timestamp">1092230000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeFieldDeclaration.java
tests/bugs/PR68991/Oxford.java
tests/bugs/PR68991/Simple.java
tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">473</column>
            <column name="bug_id">65319</column>
            <column name="summary">Bug 65319  ajc crashes when compiling the following program (binding this() and target())</column>
            <column name="description">class Test
{  
	public static void main(String args[])
	{		
		new Test().method();
	}
	public void method()
	{
		new Test2().method2();
	}
}
class Test2 {
	public void method2() {}
}
aspect Plain {
	before(Test x):  call(void *.* (..)) &amp;&amp; (this(x) || target(x))
	{
	}
}</column>
            <column name="report_time">2004-06-02 10:29:50</column>
            <column name="report_timestamp">1086190000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b75cd93</column>
            <column name="commit_timestamp">1092150000</column>
            <column name="files">tests/bugs/oxford/PR65319.java
tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java
weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java
weaver/src/org/aspectj/weaver/patterns/ExposedState.java
weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">474</column>
            <column name="bug_id">53981</column>
            <column name="summary">Bug 53981  proceed used as method name in around advice</column>
            <column name="description">Using a method named proceed(..) in around advice confuses the compiler (in at
least the 2-3 ways shown below).  

True of the current tree (untested in 1.1.1).  Workaround for now is to rename
the method.  

---- first problem: NPE in compiler
java.lang.NullPointerException
	at
org.aspectj.ajdt.internal.compiler.ast.MakeDeclsPublicVisitor.endVisit(MakeDeclsPublicVisitor.java:44)

public class Proceeding {
    public static void main(String[] args) { }
    static aspect A {
        interface IProceed {
            void proceed(Runnable next);
        }
        IProceed decorator;
        void around() : execution(void main(String[])) {
            decorator.proceed(new Runnable() {
                public void run() {
                    proceed();
                }
            });
        }
    }
}

---- second problem: incorrect error wrt number of arguments

public class Proceeding {
    public static void main(String[] args) {
    }
    static aspect A {
        void around() : execution(void main(String[])) {
            Proceeding.proceed(null); // BUG: treated as proceed(Object);
        }
    }
    static void proceed(Object o) {}
}

---- third hypothetical: we should document how ambiguity is resolved

public class Proceeding {
    public static void main(String[] args) {
    }
    static aspect A {
        void around() : execution(void main(String[])) {
            proceed(); // special form or Proceeding.proceed()?
        }
    }
    void proceed() {}
}</column>
            <column name="report_time">2004-03-06 22:43:04</column>
            <column name="report_timestamp">1078630000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">05dabd1</column>
            <column name="commit_timestamp">1092140000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java
tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">475</column>
            <column name="bug_id">59208</column>
            <column name="summary">Bug 59208  Weaver fails in BCEL  for large classes</column>
            <column name="description"></column>
            <column name="report_time">2004-04-20 05:23:13</column>
            <column name="report_timestamp">1082450000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">44a92e1</column>
            <column name="commit_timestamp">1092140000</column>
            <column name="files">tests/bugs/pr59208/Foo.java
tests/bugs/pr59208/FooProducer.java
tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java
weaver/src/org/aspectj/weaver/WeaverMessages.java
weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">476</column>
            <column name="bug_id">67592</column>
            <column name="summary">Bug 67592  value in the args[] array of thisjoinpoint can be changed by one advice decl and updated values seen in another advice decl</column>
            <column name="description">In ajc a use of thisJoinPoint corresponds to an object of type JoinPoint, where
a JoinPoint object has four components, which can be retrieved using
accessor methods.

  this                   getThis()
  target                 getTarget()
  args                   getArgs()
  staticJoinPoint        getStaticPart()

In the case of args, the object returned is an Object array.  This means
that an advice decl can overwrite the args,  and then another advice which
shares the same JoinPoint will see the changed args.   Here is a
small example.  In this aspect the
before advice changes arg[0] to always be &quot;Laurie&quot; and then the after
advice will always say that &quot;Laurie won a million pounds&quot;.

Is this the behaviour that is intended?   I would have thought that the
interface to args[] should be such that the values can only be read.  Otherwise
very strange interactions between advice decls could occur.

---------------------------------------------------------------------

public class Main {

  public static Main v = new Main();

  void lottery ( String arg )
    { System.out.println(&quot;The arg in lottery is &quot; + arg);
    }

  public static void main (String args[])
    { v.lottery(&quot;Oege&quot;);
      v.lottery(&quot;Ganesh&quot;);
    }

}

---------------------------------------------------------------------

public aspect Aspect {

  // This pair of advice decls demonstrates that an advice can change to
  //   the args of a join point.

  before () : call(* lottery(java.lang.String)) &amp;&amp; !within(Aspect)
    { System.out.println(&quot;BEFORE &quot; + thisJoinPoint +
                         &quot; at &quot; + thisJoinPointStaticPart.getSourceLocation());
      Object args[] = thisJoinPoint.getArgs();
      System.out.println(&quot;arg[0] is &quot; + args[0]);
      args[0] = &quot;Laurie&quot;;
      System.out.println(&quot;... now it is &quot; + thisJoinPoint.getArgs()[0]);
    }


  after ()  : call(* lottery(java.lang.String)) &amp;&amp; !within(Aspect)
    { System.out.println(&quot;AFTER &quot; + thisJoinPoint +
                         &quot; at &quot; + thisJoinPointStaticPart.getSourceLocation());
      if (thisJoinPoint.getArgs()[0].equals(&quot;Laurie&quot;))
        System.out.println(&quot;Laurie wins 1 million pounds!&quot;);
    }

}</column>
            <column name="report_time">2004-06-17 04:06:53</column>
            <column name="report_timestamp">1087460000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f6436e3</column>
            <column name="commit_timestamp">1092060000</column>
            <column name="files">runtime/src/org/aspectj/runtime/reflect/JoinPointImpl.java
runtime/testsrc/RuntimeModuleTests.java
runtime/testsrc/org/aspectj/runtime/reflect/JoinPointImplTest.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">477</column>
            <column name="bug_id">71377</column>
            <column name="summary">Bug 71377  Cannot advise private method call in around advice</column>
            <column name="description">Pointcuts should match call joint points in advice. However AspectJ does not 
match calls to _private_ methods in around advice. The same applies to get/set 
pointcuts for _private fields. This is probably because in the testcase below 
a call to &quot;privateMethod()&quot; in the body of the around advice is a call to an 
accessor method:

        
ajc$inlineAccessMethod$bug_nnnn_JoinPointInAroundAdvice$bug_nnnn_JoinPointInAro
undAdvice$privateMethod(&quot;around&quot;);

public aspect JoinPointInAroundAdvice {

	private static Set privateCalls = new HashSet();
	private static Set publicCalls = new HashSet();
	
	pointcut internalCall () :
		call(* JoinPointInAroundAdvice.privateMethod(..));
	
	before () : internalCall () {
		privateCalls.add(thisJoinPoint);
	}

	pointcut externalCall () :
		call(* JoinPointInAroundAdvice.publicMethod(..));
	
	before () : externalCall () {
		publicCalls.add(thisJoinPoint);
	}
	
	pointcut execTest () :
		execution(* JoinPointInAroundAdvice.test());
	
	before () : execTest () {
		privateMethod(&quot;before&quot;);
		publicMethod(&quot;before&quot;);
	}
	
	void around () : execTest () {
		privateMethod(&quot;around&quot;);
		publicMethod(&quot;around&quot;);
		proceed();
	}
	
//	void around () : execTest () {
//		Runnable runnable = new Runnable () {
//			public void run () {
//				privateMethod(&quot;around closure&quot;);
//				publicMethod;
//				proceed();
//			}
//		};
//		runnable.run();
//	}
	
	after () : execTest () {
		privateMethod(&quot;after&quot;);
		publicMethod(&quot;after&quot;);
	}
	
	private static void privateMethod (String from) {
		System.out.println(&quot;? privateMethod() &quot; + from);
	}
	
	public static void publicMethod (String from) {
		System.out.println(&quot;? publicMethod() &quot; + from);
	}
	
	public static void test () {
		System.out.println(&quot;? test()&quot;);
		privateMethod(&quot;test&quot;);
		publicMethod(&quot;test&quot;);
	}
	
	public static void main (String[] args) {
		test();
		
		if (privateCalls.size() != publicCalls.size()) {
			throw new RuntimeException(&quot;Missing join point&quot;);
		}
		else {
			System.out.println(&quot;Success.&quot;);
		}
	}
}</column>
            <column name="report_time">2004-08-04 10:21:05</column>
            <column name="report_timestamp">1091630000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">851da68</column>
            <column name="commit_timestamp">1092050000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java
tests/bugs/AroundAdviceJPs/FieldGetJoinPointsInAroundAdvice.java
tests/bugs/AroundAdviceJPs/FieldJoinPointsInAroundAdvice.java
tests/bugs/AroundAdviceJPs/JoinPointInAroundAdvice.java
tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java
weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">478</column>
            <column name="bug_id">44191</column>
            <column name="summary">Bug 44191  Need better error message for &quot;can't find type&quot;</column>
            <column name="description">I have experienced situations where IAJC outputs a message like this at the 
end of compilation.

    [iajc] can't find type org.xxx.SomeTest

In my case this was one time highly confusing since I did not expect the class 
in question to be referred anywhere in the project (I have to date still not 
located the reference). 

For such cases, it would be extremely nice if the error message would display 
WHY it need the class (i.e. the name of the refering class(es) or aspect(es) 
possibly with a reasonable cutoff as there is seldom need to list all 
referals). So I would like a message like this:

    [iajc] can't find type org.xxx.SomeTest referred by 
org.yyy.SomeClass,org.yy.SomeOtherClass ...</column>
            <column name="report_time">2003-10-04 20:23:15</column>
            <column name="report_timestamp">1065310000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">061395c</column>
            <column name="commit_timestamp">1091800000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java
weaver/src/org/aspectj/weaver/ResolvedTypeX.java
weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
weaver/src/org/aspectj/weaver/patterns/DeclareParents.java
weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">479</column>
            <column name="bug_id">42573</column>
            <column name="summary">Bug 42573  .lst file entries not resolved relative to list file: {boot}classpath, extdirs,</column>
            <column name="description">My -classpath entry in a config/.lst file was resolved relative to the working
directory rather than to the config/.lst file.  BuildArgParser.java looks like
this would also be true for bootclasspath and extdirs, but not for injars,
aspectpath, or sourceroots.</column>
            <column name="report_time">2003-09-04 18:40:22</column>
            <column name="report_timestamp">1062720000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">648c0f4</column>
            <column name="commit_timestamp">1091730000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java
util/src/org/aspectj/util/ConfigParser.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">480</column>
            <column name="bug_id">60015</column>
            <column name="summary">Bug 60015  NPE, Incorrect XLint:unmatchedSuperTypeInCall warning</column>
            <column name="description">(This is an incomplete bug report -- sorry no time not to further isolate.)

Running AJDT 1.1.6, I get dozens of these warnings:

----------
Warning does not match because declaring type is java.lang.Object, if match
desired use target(st.ata.mc.exim.DatastoreReader)
[Xlint:unmatchedSuperTypeInCall] Blah.aj project/src/package/dir line 22
----------

for something like this code:

----------
import pack.Interface;
...
pointcut dsrCall() : call(* Interface.*(..)); // WARNING HERE
...
----------

Each warning points to the pointcut (not the join point shadow).

NPE running from the command-line with the latest tree (will attach).</column>
            <column name="report_time">2004-04-26 16:49:10</column>
            <column name="report_timestamp">1083010000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ef7885f</column>
            <column name="commit_timestamp">1091540000</column>
            <column name="files">tests/bugs/IncorrectXlintOnInterface.java
weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">481</column>
            <column name="bug_id">57666</column>
            <column name="summary">Bug 57666  duplicate manifests cause resource-copying to gack</column>
            <column name="description">(Ah, the joy of build infrastructure...)

Mostly self-explanatory trace, from a build Monday Apr 5, 2004 at 08:46:01 GMT:

duplicate entry: META-INF/MANIFEST.MF
duplicate entry: META-INF/MANIFEST.MF
java.util.zip.ZipException: duplicate entry: META-INF/MANIFEST.MF
	at java.util.zip.ZipOutputStream.putNextEntry(ZipOutputStream.java:163)
	at java.util.jar.JarOutputStream.putNextEntry(JarOutputStream.java:90)
	at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeResource(AjBuildManager.java:344)
	at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromJarFile(AjBuildManager.java:288)
	at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination(AjBuildManager.java:253)
	at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:195)
	at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:94)
	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:102)
	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53)
	at org.aspectj.tools.ajc.Main.run(Main.java:280)
	at org.aspectj.tools.ajc.Main.runMain(Main.java:217)
	at org.aspectj.tools.ajc.Main.main(Main.java:79)</column>
            <column name="report_time">2004-04-06 17:22:16</column>
            <column name="report_timestamp">1081290000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2b8fa31</column>
            <column name="commit_timestamp">1091460000</column>
            <column name="files">ajde/testsrc/org/aspectj/ajde/AjdeTests.java
ajde/testsrc/org/aspectj/ajde/DuplicateManifestTest.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java
weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">482</column>
            <column name="bug_id">67774</column>
            <column name="summary">Bug 67774  Nullpointer-exception in pointcuts using withincode() clause</column>
            <column name="description">Hi,
I am getting null-pointer-exceptions whenever I try to specify a pointcut with 
a &quot;withincode(Signature)&quot; clause. E.g.:

public aspect DetectSystemOutErrorUsage 
{
pointcut allSystemOutAndSystemErrAccesses(): 
	(get(* System.out) || get(* System.err))
	;

declare warning: 
	allSystemOutAndSystemErrAccesses() 
	&amp;&amp; !adviceexecution()
	&amp;&amp; !within(com.tivoli.act..Test*)
	&amp;&amp; !within(com.tivoli.act.log..*)
	&amp;&amp; !execution(* com.tivoli.act..*.main(..))
	&amp;&amp; !execution(* com.tivoli.act..*.usage())
	// &amp;&amp; !withincode(* com.tivoli.act..*.main(..))
	// &amp;&amp; !withincode(* com.tivoli.act..*.usage())
	: &quot;Warning: use of System.out or System.err - consider logging 
instead!&quot;;
}

In the above example excluding main() and usage() methods from the pointcut 
using an execution(...)-clause (shows) works but using a withincode()-clause 
(as commented) always yields an NPE:

trouble in:
null
java.lang.NullPointerException
        at org.aspectj.weaver.patterns.SignaturePattern.matches
(SignaturePattern.java:87)
        at org.aspectj.weaver.patterns.WithincodePointcut.match
(WithincodePointcut.java:42)
        at org.aspectj.weaver.patterns.NotPointcut.match(NotPointcut.java:45)
        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)
        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)
        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)
        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)
        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)
        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)
        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)
        at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:62)
        at org.aspectj.weaver.Checker.match(Checker.java:48)
        at org.aspectj.weaver.bcel.BcelClassWeaver.match
(BcelClassWeaver.java:1121)
        at org.aspectj.weaver.bcel.BcelClassWeaver.matchInit
(BcelClassWeaver.java:895)
        at org.aspectj.weaver.bcel.BcelClassWeaver.match
(BcelClassWeaver.java:793)
        at org.aspectj.weaver.bcel.BcelClassWeaver.weave
(BcelClassWeaver.java:343)
        at org.aspectj.weaver.bcel.BcelClassWeaver.weave
(BcelClassWeaver.java:80)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:724)
        at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump
(BcelWeaver.java:689)
        at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify
(BcelWeaver.java:615)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:563)
        at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave
(AjCompilerAdapter.java:239)
        at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling
(AjCompilerAdapter.java:114)
        at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:376)
        at 
org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation
(AjBuildManager.java:601)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild
(AjBuildManager.java:160)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild
(AjBuildManager.java:94)
        at org.aspectj.ajde.internal.CompilerAdapter.compile
(CompilerAdapter.java:108)
        at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run
(AspectJBuildManager.java:165)
!SESSION Jun 18, 2004 10:49:48.666 ---------------------------------------------
eclipse.buildId=I200406110010
java.version=1.4.2_03
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=de_CH

!ENTRY org.eclipse.ajdt.ui 4 0 Jun 18, 2004 10:49:48.666
!MESSAGE NullPointerException thrown: null
!STACK 0
java.lang.NullPointerException
        at org.aspectj.weaver.patterns.SignaturePattern.matches
(SignaturePattern.java:87)
        at org.aspectj.weaver.patterns.WithincodePointcut.match
(WithincodePointcut.java:42)
        at org.aspectj.weaver.patterns.NotPointcut.match(NotPointcut.java:45)
        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)
        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)
        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)
        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)
        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)
        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)
        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)
        at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:62)
        at org.aspectj.weaver.Checker.match(Checker.java:48)
        at org.aspectj.weaver.bcel.BcelClassWeaver.match
(BcelClassWeaver.java:1121)
        at org.aspectj.weaver.bcel.BcelClassWeaver.matchInit
(BcelClassWeaver.java:895)
        at org.aspectj.weaver.bcel.BcelClassWeaver.match
(BcelClassWeaver.java:793)
        at org.aspectj.weaver.bcel.BcelClassWeaver.weave
(BcelClassWeaver.java:343)
        at org.aspectj.weaver.bcel.BcelClassWeaver.weave
(BcelClassWeaver.java:80)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:724)
        at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump
(BcelWeaver.java:689)
        at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify
(BcelWeaver.java:615)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:563)
        at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave
(AjCompilerAdapter.java:239)
        at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling
(AjCompilerAdapter.java:114)
        at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:376)
        at 
org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation
(AjBuildManager.java:601)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild
(AjBuildManager.java:160)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild
(AjBuildManager.java:94)
        at org.aspectj.ajde.internal.CompilerAdapter.compile
(CompilerAdapter.java:108)
        at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run
(AspectJBuildManager.java:165)


Michael</column>
            <column name="report_time">2004-06-18 04:54:37</column>
            <column name="report_timestamp">1087550000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7f19ab4</column>
            <column name="commit_timestamp">1091450000</column>
            <column name="files">tests/bugs/WithincodeNPE01.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">483</column>
            <column name="bug_id">70773</column>
            <column name="summary">Bug 70773  AspectJ Error: ConncurrentModificationException thrown: null</column>
            <column name="description">In AspectJ 1.1.11 for Eclipse, build ID 1.2.0 (and also in the previous 1.1.10)
on Eclipse version 3.0.0, build ID 200406351208: If I enable incremental
compilation and make a change to a file (typing a space and deleting it, or
editing a comment), I get a &quot;ConncurrentModificationException thrown: null&quot; error.</column>
            <column name="report_time">2004-07-23 21:07:15</column>
            <column name="report_timestamp">1090630000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9aed31d</column>
            <column name="commit_timestamp">1091440000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">484</column>
            <column name="bug_id">30439</column>
            <column name="summary">Bug 30439  spurious &quot;circular dependency&quot; error</column>
            <column name="description">AspectJ Compiler 1.1beta4
This program:

aspect Foo { 
  pointcut p1(): execution(void f()) &amp;&amp; cflow(execution(void f1()));
  pointcut p2(): execution(void f()) &amp;&amp; cflow(execution(void f2()));

  before(): p1() { }
  after():  p1() { }
  before(): p2() { }
  after():  p2() { }
}

class A {
  void f1() { f(); }
  void f2() { f(); }
  void f() { }
}

results in these errors:

circular dependency at method-execution(void A.f())
circular dependency at method-execution(void A.f())
circular dependency at method-execution(void A.f())
circular dependency at method-execution(void A.f())

4 errors

If I comment out any one of the four pieces of advice, all the errors go away.
Also, assuming that there is a valid reason for printing this error sometimes, how come there's no line number?

--Doug</column>
            <column name="report_time">2003-01-28 16:20:10</column>
            <column name="report_timestamp">1043790000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">4feb835</column>
            <column name="commit_timestamp">1091110000</column>
            <column name="files">weaver/src/org/aspectj/weaver/Advice.java
weaver/src/org/aspectj/weaver/Lint.java
weaver/src/org/aspectj/weaver/NewConstructorTypeMunger.java
weaver/src/org/aspectj/weaver/ResolvedTypeX.java
weaver/src/org/aspectj/weaver/Shadow.java
weaver/src/org/aspectj/weaver/WeaverMessages.java
weaver/src/org/aspectj/weaver/WeaverStateInfo.java
weaver/src/org/aspectj/weaver/World.java
weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java
weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java
weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java
weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java
weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java
weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java
weaver/src/org/aspectj/weaver/patterns/DeclareParents.java
weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java
weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java
weaver/src/org/aspectj/weaver/patterns/IfPointcut.java
weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java
weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java
weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java
weaver/src/org/aspectj/weaver/patterns/TypePattern.java
weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java
weaver/testsrc/org/aspectj/weaver/BcweaverTests.java
weaver/testsrc/org/aspectj/weaver/WeaverMessagesTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">485</column>
            <column name="bug_id">61536</column>
            <column name="summary">Bug 61536  Front-end bug,  shouldn't allow patterns of the form  foo.., should be foo..*</column>
            <column name="description">See following code:

public class Test2 {
  public static void main(String args[])
    { System.out.println(&quot;Hi&quot;);
    }
}

aspect Aspect2 {
  // shouldn't one have to say,  java..* instead of java.. in the following??
  // Note that the first advice (incorrect one) passes the front-end, but does
  // not match,  whereas the second one does match.   I believe the front-end
  // should reject the first one.
  before () : call( * java..(..)) &amp;&amp; within(Test2)
    { System.out.println(
        &quot;Incorrect One: Before a call of method in a java package &quot;);
    }

  before () : call( * java..*(..)) &amp;&amp; within(Test2)
    { System.out.println(
        &quot;Correct One: Before a call of method in a java package &quot;);
    }
}</column>
            <column name="report_time">2004-05-09 12:50:40</column>
            <column name="report_timestamp">1084120000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">45bce91</column>
            <column name="commit_timestamp">1091100000</column>
            <column name="files">tests/bugs/EllipsesStar.java
weaver/src/org/aspectj/weaver/patterns/PatternParser.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">486</column>
            <column name="bug_id">48990</column>
            <column name="summary">Bug 48990  Special case if(false) to not require a dynamic test</column>
            <column name="description">FastMatch, the efficient pattern matching for pointcuts on the constant pool, is
currrently only implemented for the within pointcut. I am planning to provide
further oimplementations for other pointcuts by release 1.2.</column>
            <column name="report_time">2003-12-17 06:29:52</column>
            <column name="report_timestamp">1071660000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">10c6de6</column>
            <column name="commit_timestamp">1091030000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/IfPseudoToken.java
weaver/src/org/aspectj/weaver/patterns/IfPointcut.java
weaver/src/org/aspectj/weaver/patterns/Pointcut.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">487</column>
            <column name="bug_id">64331</column>
            <column name="summary">Bug 64331  java.lang.NullPointerException  in WeaverMessageHandler class</column>
            <column name="description"></column>
            <column name="report_time">2004-05-27 09:58:21</column>
            <column name="report_timestamp">1085670000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">573741c</column>
            <column name="commit_timestamp">1091030000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java
tests/bugs/abstractITDs/A.java
tests/bugs/abstractITDs/C.java
weaver/src/org/aspectj/weaver/ResolvedTypeX.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">488</column>
            <column name="bug_id">58681</column>
            <column name="summary">Bug 58681  -X should output available -X options</column>
            <column name="description">ajc should emit the available -X options on -help or -X request (the latter like
java) to get more traffic and feedback on the experimental options.</column>
            <column name="report_time">2004-04-15 12:19:15</column>
            <column name="report_timestamp">1082050000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6ea8300</column>
            <column name="commit_timestamp">1090940000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java
org.aspectj.ajdt.core/testsrc/EajcModuleTests.java
org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/MainTest.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">489</column>
            <column name="bug_id">69459</column>
            <column name="summary">Bug 69459  Hiding of Instance Methods by static methods</column>
            <column name="description">Using Introduction it is possible to hide instance methods by static methods.
Example:

class Super {
  public void m(){};
}
class Sub {}

aspect A {
  public static void Sub.m(){}
}

Acccording to the Java Language Specification this is not allowed. Is this
behaviour desired ??

It is also possible to override static methods by instance methods, wich causes
a compile time error in java.</column>
            <column name="report_time">2004-07-07 09:10:42</column>
            <column name="report_timestamp">1089210000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b184363</column>
            <column name="commit_timestamp">1090940000</column>
            <column name="files">tests/bugs/intertypeOverrides/Aspect1.java
tests/bugs/intertypeOverrides/Aspect2.java
tests/bugs/intertypeOverrides/IntertypeOverrides.java
tests/bugs/intertypeOverrides/IntertypeOverrides2.java
tests/bugs/intertypeOverrides/Subclass.java
tests/bugs/intertypeOverrides/Superclass.java
weaver/src/org/aspectj/weaver/ResolvedTypeX.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">490</column>
            <column name="bug_id">53999</column>
            <column name="summary">Bug 53999  &quot;can't bind type&quot; message has $ for . in type name for declare soft</column>
            <column name="description">cosmetic mistake in error message...

expected: can't bind type name 'unknown.Error'
  actual: can't bind type name 'unknown$Error'

(not sure why it would ever be munged with $)

public class Test {
	public static void main(String[] args) {
		test();
	}
	static void test() {
		throw new Error(&quot;hello&quot;);
	}
	static aspect A {
		declare soft : unknown.Error : call(void test()); // CE
	}
}</column>
            <column name="report_time">2004-03-07 22:07:22</column>
            <column name="report_timestamp">1078720000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">936459c</column>
            <column name="commit_timestamp">1090920000</column>
            <column name="files">tests/bugs/Cosmetic.java
weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">491</column>
            <column name="bug_id">70619</column>
            <column name="summary">Bug 70619  compiler aborts with &quot;conflicting dominates orders&quot; with circular declare precedences</column>
            <column name="description">The following program causes ajc 1.2 to abort:

public class Conflict { public static void main(String[] args) { } }

aspect Conflict1 {
  declare precedence: Conflict1, Conflict2;

   before(): execution(* *(..)) { }
}

aspect Conflict2 {
  declare precedence: Conflict2, Conflict1;


  after(): execution(* *(..)) { }
}</column>
            <column name="report_time">2004-07-22 10:11:01</column>
            <column name="report_timestamp">1090510000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">75852d7</column>
            <column name="commit_timestamp">1090850000</column>
            <column name="files">tests/bugs/bug70619/Conflict.java
tests/bugs/bug70619/Precedence.java
weaver/src/org/aspectj/weaver/World.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">492</column>
            <column name="bug_id">70008</column>
            <column name="summary">Bug 70008  problem with ajdoc -public</column>
            <column name="description"></column>
            <column name="report_time">2004-07-14 07:16:55</column>
            <column name="report_timestamp">1089800000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">8dc0845</column>
            <column name="commit_timestamp">1089840000</column>
            <column name="files">ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java
ajdoc/testdata/coverage/foo/PkgVisibleClass.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/SpacewarTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">493</column>
            <column name="bug_id">69011</column>
            <column name="summary">Bug 69011  ajdoc fails when using default package</column>
            <column name="description"></column>
            <column name="report_time">2004-06-30 10:22:51</column>
            <column name="report_timestamp">1088610000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2cc4826</column>
            <column name="commit_timestamp">1089050000</column>
            <column name="files">ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java
ajdoc/testdata/coverage/InDefaultPackage.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">494</column>
            <column name="bug_id">68494</column>
            <column name="summary">Bug 68494  ajdoc does not support .aj files</column>
            <column name="description">In addition to accepting .java source files ajdoc needs to accept .aj files.</column>
            <column name="report_time">2004-06-24 12:04:22</column>
            <column name="report_timestamp">1088090000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3707411</column>
            <column name="commit_timestamp">1088120000</column>
            <column name="files">ajdoc/src/org/aspectj/tools/ajdoc/Main.java
ajdoc/src/org/aspectj/tools/ajdoc/StructureUtil.java
ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java
ajdoc/testdata/coverage/foo/UseThisAspectForLinkCheck.java
ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">495</column>
            <column name="bug_id">61411</column>
            <column name="summary">Bug 61411  AJDoc launch script on Windows can lose arguments</column>
            <column name="description">Using AspectJ 1.2rc1 on Windows XP

This report highlights a problem that I've seen using ajdoc.bat on Windows but
the issue applies equally to the ajc.bat and ajbrowser.bat files as well.

The %ASPECTJ_HOME%\bin\ajdoc.bat file that users run to launch the ajdoc tool
imposes a limit of only 9 command line arguments that may be passed to the
class org.aspectj.tools.ajdoc.Main. In scenarios where there the -sourcepath,
-classpath, -d etc options are used it is easy for these to &quot;eat up&quot; the list
of arguments that are passed into the JVM. A long list of packages entered
at the end of the ajdoc.bat command can be truncated or possibly even ignored
(in which case an error message will be output telling the user that no
classes or packages have been specified).

In order to prevent a limit being put on the number of arguments passed to
the launched JVM, the invocation line needs to end with %* rather than the
%1 %2 %3 %4 %5 %6 %7 %8 %9 list it currently uses.

The proposed fix also *seems* (could somebody else confirm this ?) to sort
out another problem regarding the ajdoc.bat file which is this : long semi-
colon delimited paths supplied as the arguments for the -sourcepath and 
-classpath options seem to get split apart and passed into the JVM as separate 
arguments unless the entire path list is supplied inside quotes. This should
not be necessary. It seems that the batch file processor interprets the
semi-colons in a path list as delimiters between arguments. Consequently
each element in the path list is treated as a separate argument instead
of being part of one big string representing the sourcepath or classpath.</column>
            <column name="report_time">2004-05-07 12:00:01</column>
            <column name="report_timestamp">1083950000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">39c3a3b</column>
            <column name="commit_timestamp">1085760000</column>
            <column name="files">build/src/$installer$/org/aspectj/Main.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">496</column>
            <column name="bug_id">62227</column>
            <column name="summary">Bug 62227  Load Time Weaving aborts on any kind of warning (declare/xlint)</column>
            <column name="description">The message handler in the weaving adapter for load time weaving says:

public boolean handleMessage(IMessage message) throws AbortException {
  if (!isIgnoring(message.getKind())) {
    if (verbose) System.err.println(message.getMessage());
    throw new AbortException(message);
  }
  return true;
}

This means for warnings it goes bang.  So, even a declare warning that is 
meant to tell the user something informational during a LTW will cause the 
code to blow up.  The fix is straightforward and simply to log warning 
messages and only fail for error messages.  I am waiting for a testcase from 
Matthew before checking in the fix.</column>
            <column name="report_time">2004-05-14 05:34:16</column>
            <column name="report_timestamp">1084530000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9ebfc84</column>
            <column name="commit_timestamp">1084540000</column>
            <column name="files">org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java
weaver/src/org/aspectj/weaver/WeavingURLClassLoader.java
weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java
weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">497</column>
            <column name="bug_id">59599</column>
            <column name="summary">Bug 59599  Race condition in test suite for incremental</column>
            <column name="description">On faster machines (my linux desktop, andy's home pc) several of the tests in
ajcTests.xml are failing (suite attached). This appears to be due to a race 
condition between checking directory contents and waiting for the compilation to 
complete. I have an environment in which I can test candidate fixes if you can 
give me a pointer for what to tweak...</column>
            <column name="report_time">2004-04-22 06:03:23</column>
            <column name="report_timestamp">1082630000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">bd16033</column>
            <column name="commit_timestamp">1083750000</column>
            <column name="files">testing/src/org/aspectj/testing/harness/bridge/DirChanges.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">498</column>
            <column name="bug_id">59909</column>
            <column name="summary">Bug 59909  CFlowStack removesThreads to late</column>
            <column name="description">Problem:
The current implementation of CFlowStack (Version 1.1-till 1.2 rc1) stores all 
threads in a hashtable. These Threads are removes after several calls to the 
methods getThreadStack(). (In our cases &gt;70 calls.)

In our project, this cycle is much to long. We have soveral long running 
threads, which grap quite a lot of lot of memory. This memory can only be freed 
after the threads have been removed from the CFlowStack. 
In our production code we sum up to more than 300 Threads stored in different 
CFlowStack Varaibles. Often this results in out of memory Errors.

Added patch provides an improved freeing scheme.

It checks if the size of the table has grown, if it has, it checks if it can 
remove some threads.</column>
            <column name="report_time">2004-04-26 05:40:05</column>
            <column name="report_timestamp">1082970000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5f6b18b</column>
            <column name="commit_timestamp">1083750000</column>
            <column name="files">runtime/src/org/aspectj/runtime/internal/CFlowStack.java
runtime/src/org/aspectj/runtime/internal/cflowstack/ThreadStack.java
runtime/src/org/aspectj/runtime/internal/cflowstack/ThreadStackFactory.java
runtime/src/org/aspectj/runtime/internal/cflowstack/ThreadStackFactoryImpl.java
runtime/src/org/aspectj/runtime/internal/cflowstack/ThreadStackFactoryImpl11.java
runtime/src/org/aspectj/runtime/internal/cflowstack/ThreadStackImpl11.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">499</column>
            <column name="bug_id">54238</column>
            <column name="summary">Bug 54238  Restore build cancelling to Swing-based IDEs</column>
            <column name="description">Core compiler implementation changes have resulted in an incompatability with 
AJDE's build cancelling mechanism.  Once the core canceling behavior 
stabilizes this needs to be restored.</column>
            <column name="report_time">2004-03-09 22:52:18</column>
            <column name="report_timestamp">1078890000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a17b51b</column>
            <column name="commit_timestamp">1083090000</column>
            <column name="files">ajbrowser/src/org/aspectj/tools/ajbrowser/BasicEditor.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">500</column>
            <column name="bug_id">59596</column>
            <column name="summary">Bug 59596  Null pointer exception while weaving java.awt.Label</column>
            <column name="description">I tried to add an Aspect to java.awt.Label. I compile the aspect via:
ajc -inpath /usr/local/j2sdk_nb/j2sdk1.4.2/jre/lib/rt.jar Timestamp.java

Here is the aspect Timestamp.java:

aspect Timestamp {

    private int java.awt.Label._ts_read = 0;
    private int java.awt.Label._ts_write = 0;

    pointcut writeOp():
    call (void java.awt.Label.setText (String));

    pointcut readOp():
    call (String java.awt.Label.getText());
	
    after (java.awt.Label b) returning: readOp() &amp;&amp; target (b)
    {
	b._ts_read++;
    }
    
    after (java.awt.Label b) returning: writeOp() &amp;&amp; target (b)
    {
	b._ts_write++;
	System.out.println (b._ts_write);
    }

    public static void main (String[] args)
    {
	java.awt.Label b1 = new java.awt.Label();
	b1.setText (&quot;abc&quot;);
    }
}

Here is the error message I get from ajc:

null
java.lang.NullPointerException
        at
org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeLocationContext(EclipseAdapterUtils.java:50)
        at
org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeSourceLocation(EclipseAdapterUtils.java:120)
        at
org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeMessage(EclipseAdapterUtils.java:129)
        at
org.aspectj.ajdt.internal.core.builder.AjBuildManager$4.acceptResult(AjBuildManager.java:663)
        at
org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.acceptResult(AjCompilerAdapter.java:178)
        at
org.aspectj.ajdt.internal.compiler.WeaverAdapter.finishedWith(WeaverAdapter.java:203)
        at
org.aspectj.ajdt.internal.compiler.WeaverAdapter.weaveCompleted(WeaverAdapter.java:167)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:570)
        at
org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:239)
        at
org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:114)
        at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:376)
        at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:600)
        at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:160)
        at
org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:94)
        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:102)
        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53)
        at org.aspectj.tools.ajc.Main.run(Main.java:280)
        at org.aspectj.tools.ajc.Main.runMain(Main.java:217)
        at org.aspectj.tools.ajc.Main.main(Main.java:79)


1 fail|abort</column>
            <column name="report_time">2004-04-22 05:11:34</column>
            <column name="report_timestamp">1082630000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a97f3b6</column>
            <column name="commit_timestamp">1082740000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">501</column>
            <column name="bug_id">57436</column>
            <column name="summary">Bug 57436  Java 1.5 fails to run classes produced by ajc</column>
            <column name="description">Java 1.5 beta reports a ClassFormatError when running programs (e.g., spacewar)
compiled by ajc 1.1.1 and the latest CVS head.  Sun's Java 1.5 beta
binary-compatibility docs say that some obfuscators violated the .class format
specification, so those .class files will fail when run under 1.5.  (The docs
also say they are still incomplete.)  

Although 1.5 is still beta, we would want to submit a bug to Sun if our
implementation techniques are valid, so we don't have to change those
techniques.  For 1.2, we should at document if we don't fix, since many people
are using 1.5.</column>
            <column name="report_time">2004-04-05 05:42:29</column>
            <column name="report_timestamp">1081160000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b0d32ca</column>
            <column name="commit_timestamp">1081420000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">502</column>
            <column name="bug_id">57430</column>
            <column name="summary">Bug 57430  exception printing</column>
            <column name="description">Exceptions thrown from the compiler used to be printed once, with the submit-bug
header.  Now they are printed twice, without and with the header.  True of CVS
version.</column>
            <column name="report_time">2004-04-05 04:58:49</column>
            <column name="report_timestamp">1081160000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">e7ac54f</column>
            <column name="commit_timestamp">1081330000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">503</column>
            <column name="bug_id">55341</column>
            <column name="summary">Bug 55341  error Type mismatch: cannot convert from java.lang.String to java.lang.String</column>
            <column name="description">When compiling a binary concrete aspect library (for later LTW) consisting of
more than one aspect that performs an ITD on a target class not exposed to the 
weaver I get the following error:

error Type mismatch: cannot convert from java.lang.String to java.lang.String

The error does not oocur if a complete build &amp; weave is performed. Testcase 
attached.</column>
            <column name="report_time">2004-03-19 04:32:28</column>
            <column name="report_timestamp">1079690000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0521e79</column>
            <column name="commit_timestamp">1080910000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMemberFinder.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java
tests/bugs/StringToString/HW.java
tests/bugs/StringToString/X.java
weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">504</column>
            <column name="bug_id">31460</column>
            <column name="summary">Bug 31460  Weaving class loader</column>
            <column name="description">Hi!

As discussed on the mailing list a few days ago I implemented a weaving class
loader to enable bytecode based weaving at class loading time. The class loader
is based on the URLClassLoader and can be used like any other URLClassLoader. In
addition to that you can add aspects to the weaving loader. These aspects got
woven into each class that is loaded. The test cases for the class loader aren't
implemented yet, I am still thinking about how to implement them. I will
contribute them later, okay?

-Martin</column>
            <column name="report_time">2003-02-10 10:35:35</column>
            <column name="report_timestamp">1044890000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">33d8ee9</column>
            <column name="commit_timestamp">1080910000</column>
            <column name="files">org.aspectj.ajdt.core/testdata/src1/LTWHelloWorld.java
org.aspectj.ajdt.core/testdata/src1/ltw/LTWPackageTest.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java
util/src/org/aspectj/util/FileUtil.java
weaver/src/org/aspectj/weaver/ExtensibleURLClassLoader.java
weaver/src/org/aspectj/weaver/WeavingURLClassLoader.java
weaver/src/org/aspectj/weaver/tools/GeneratedClassHandler.java
weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java
weaver/src/org/aspectj/weaver/tools/WeavingClassLoader.java
weaver/testsrc/BcweaverModuleTests.java
weaver/testsrc/org/aspectj/weaver/BcweaverTests.java
weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">505</column>
            <column name="bug_id">53012</column>
            <column name="summary">Bug 53012  declare precedence on a class should be a compile-time error</column>
            <column name="description">The compiler silently accepts

----
public class DeclarePrecedence {
public static void main(String[] args) {
    System.out.println(&quot;hello&quot;);
}
}
aspect DP {
    declare precedence: DeclarePrecedence, DP;
    before() : staticinitialization(DeclarePrecedence) {
        System.out.println(&quot;ok&quot;); 
    }
}
----

Since this is likely to be a mistake, an error would be nice.  However, that
would mean saying (!TargetClass &amp;&amp; TargetClass+) to pick out the aspect subtypes
of TargetClass.</column>
            <column name="report_time">2004-02-24 19:43:32</column>
            <column name="report_timestamp">1077670000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0a01759</column>
            <column name="commit_timestamp">1079690000</column>
            <column name="files">tests/bugs/declarePrecedenceWithClasses/DeclarePrecedenceTestClass.java
weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">506</column>
            <column name="bug_id">52928</column>
            <column name="summary">Bug 52928  Private members introduced via an interface are visible to the class</column>
            <column name="description">If private members are introduced via an interface to classes, the introduced 
members are visible inside the classes themselves, although the visibility is 
supposed to be relative to the aspect. Here's a sample:


public class Sample {

   public static void main(String[] args) {
      Sample s = new Sample();
      s.aMethod();
   }

   public void aMethod() {
      // x is introduced by the following aspect as private
      // so it should not be accessible here
      System.out.println(&quot;I have &quot; + x);
   }

}


aspect SampleAspect {
   private interface Tag {};
   
   private int Tag.x = 0;
   
   declare parents: Sample implements Tag;
}</column>
            <column name="report_time">2004-02-24 08:25:36</column>
            <column name="report_timestamp">1077630000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5795b4a</column>
            <column name="commit_timestamp">1079650000</column>
            <column name="files">tests/bugs/VisiblePrivateInterfaceITDs.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">507</column>
            <column name="bug_id">55134</column>
            <column name="summary">Bug 55134  Incremental compilation does not delete weaver-generated class files</column>
            <column name="description">During incremental compilation, AjState records classes generated from source 
files following the initial compile phase, but before weaving. (So that these 
can be passed to the weaver on a subsequent iteration if we need to reweave the 
world). During weaving of a given class file, the weaver may generate additional 
class files (for e.g. around closures) that get written to the output. If the 
orginal source file is deleted, these additional weaver generated classes are 
not deleted from the output since AjState does not know about them.</column>
            <column name="report_time">2004-03-17 14:09:38</column>
            <column name="report_timestamp">1079550000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7d6b500</column>
            <column name="commit_timestamp">1079620000</column>
            <column name="files">tests/incremental/initialTests/classWAroundClosureRemoved/AdviceOnIntroduced.delete.20.java
tests/incremental/initialTests/classWAroundClosureRemoved/AdviceOnIntroduced.java
tests/incremental/initialTests/classWAroundClosureRemoved/Main.java
weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">508</column>
            <column name="bug_id">40192</column>
            <column name="summary">Bug 40192  build cancel during weaving</column>
            <column name="description">The build can not be cancelled during the bytecode weaving stage.</column>
            <column name="report_time">2003-07-16 06:57:36</column>
            <column name="report_timestamp">1058350000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">183fc23</column>
            <column name="commit_timestamp">1079610000</column>
            <column name="files">ajde/src/org/aspectj/ajde/internal/BuildNotifierAdapter.java
ajde/testdata/BuildCancelling/Cl1.java
ajde/testdata/BuildCancelling/Cl2.java
ajde/testdata/BuildCancelling/Cl3.java
ajde/testdata/BuildCancelling/HW.java
ajde/testsrc/org/aspectj/ajde/AjdeTests.java
ajde/testsrc/org/aspectj/ajde/BuildCancellingTest.java
bridge/src/org/aspectj/bridge/IProgressListener.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverAdapter.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">509</column>
            <column name="bug_id">47910</column>
            <column name="summary">Bug 47910  ajc -outjar jarfile does not contain MANIFEST.MF</column>
            <column name="description">I call ajc -sourceroots &lt;mydir&gt; -outjar &lt;my.jar&gt; and an output file is created 
with a .jar extension, but it is not a valid jar file because there is no 
MANIFEST.MF file. I see that the text for ajc says:

-outjar &lt;file&gt;      put output classes in zip file &lt;file&gt;

which might imply that it is supposed to be a zip file, but a parameter called -
outjar which creates a zip file doesn't really make sense. If -outjar is used, 
the resulting file should be a valid jar file, i.e. with a META-INF/MANIFEST.MF 
file inside.</column>
            <column name="report_time">2003-12-02 13:35:01</column>
            <column name="report_timestamp">1070390000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">34dbb0c</column>
            <column name="commit_timestamp">1079530000</column>
            <column name="files">ajde/testdata/JarManifestTest/src/Main.java
ajde/testsrc/org/aspectj/ajde/AjdeTests.java
ajde/testsrc/org/aspectj/ajde/InpathTestcase.java
ajde/testsrc/org/aspectj/ajde/JarManifestTest.java
ajde/testsrc/org/aspectj/ajde/ResourceCopyTestCase.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">510</column>
            <column name="bug_id">54625</column>
            <column name="summary">Bug 54625  Incremental support does not work with outjar</column>
            <column name="description">Either fix the class file deleting etc. to work with jars, or always do a batch 
build when working with outjars.</column>
            <column name="report_time">2004-03-12 09:43:12</column>
            <column name="report_timestamp">1079100000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">1a4c02c</column>
            <column name="commit_timestamp">1079450000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">511</column>
            <column name="bug_id">54965</column>
            <column name="summary">Bug 54965  Incremental compilation does twice as much work as necessary</column>
            <column name="description">When I added support for -outjar in the test harness, I was surprised to find 
duplicate entry exceptions coming from the output file writing to the outjar. I 
traced it through, and found that every source file passed to an incremental 
compile is in fact compiled twice!

The first time round we note the references, and of course each file has a 
reference to itself. Then we call &quot;AjState.getFilesToCompile&quot; looking to see if 
there are any further files to compile in another iteration. This method does 
not remember the set of files it just compiled, so since we have referenced each 
type we just compiled, and we have no reord of that fact, we compile them again. 
Second time around, the bytecodes are identical to the previous go, so 
recordClassFile doesn't note their dependents - and thus this time we terminate.</column>
            <column name="report_time">2004-03-16 10:08:56</column>
            <column name="report_timestamp">1079450000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">41c6f6d</column>
            <column name="commit_timestamp">1079450000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">512</column>
            <column name="bug_id">51322</column>
            <column name="summary">Bug 51322  Introduce Unknown Type to class causes Null pointer exception</column>
            <column name="description"></column>
            <column name="report_time">2004-02-07 17:11:16</column>
            <column name="report_timestamp">1076190000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5c67166</column>
            <column name="commit_timestamp">1079390000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java
tests/bugs/Pr51322.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">513</column>
            <column name="bug_id">44272</column>
            <column name="summary">Bug 44272  retitle warning to &quot;circular {advice} dependency at ...&quot;</column>
            <column name="description">When writing aspects with cycles in the advice precedence, get warning &quot;circular
dependency at {join point}&quot; -- should be &quot;circular advice dependency...&quot; or
&quot;circular advice precedences at {join point} -- reorder the advice in the aspect&quot;.

FWIW, here's an example of circularity in advice precedence:
----
aspect A {
    pointcut crun() : execution (void run()) ;
    before() : crun() {}
    after() returning : crun() {}
    void around() : crun() { proceed(); }
}
----

See programming guide for more discussion of circularity in advice precedence.</column>
            <column name="report_time">2003-10-07 00:05:59</column>
            <column name="report_timestamp">1065500000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0109534</column>
            <column name="commit_timestamp">1079370000</column>
            <column name="files">tests/bugs/CircularAdvicePrecedence.java
weaver/src/org/aspectj/weaver/Shadow.java
weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">514</column>
            <column name="bug_id">50776</column>
            <column name="summary">Bug 50776  fail in compiling aspect with overriding method introduction with different throws clause</column>
            <column name="description">A first class (class A) declares only one method with some exceptions in the
throws clause ( void m() throws Exception ).
A second class (class B) extends it without redefinig the method. 
An aspect declares a method introduction in the class B, with the same name,
signature and return type of the one in class A, but without throws clause; this
is a legal override.
In the second class (class B) each invocation to the overriden method doesn't
need a try-catch block, because it refers to his hown method that raises no
exception.
This code compiles using 
ajc version 1.0.6 (built Jul 24, 2002 6:21 PM PST) running on java 1.4.0
But not using
AspectJ Compiler 1.1.1 
AspectJ Compiler 1.1.0

class A{
  public A(){}
  public void m() throws Exception{}
}

class B extends A{
  public B(){}
  public void some_code(){
    m();}
}

aspect C{
  public void B.m(){}
}</column>
            <column name="report_time">2004-01-28 12:21:31</column>
            <column name="report_timestamp">1075310000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">c798923</column>
            <column name="commit_timestamp">1078480000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMemberFinder.java
tests/bugs/IntertypeDifferentThrows.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">515</column>
            <column name="bug_id">52394</column>
            <column name="summary">Bug 52394  inter-type declarations cause JRockit Crash</column>
            <column name="description"></column>
            <column name="report_time">2004-02-18 13:35:38</column>
            <column name="report_timestamp">1077130000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5d73494</column>
            <column name="commit_timestamp">1078420000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectClinit.java
weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">516</column>
            <column name="bug_id">51320</column>
            <column name="summary">Bug 51320  ClasscastException on concretization of if(false)</column>
            <column name="description">I get the following exception when weaving the attached aspect on the dev build.

java.lang.ClassCastException
	at org.aspectj.weaver.patterns.IfPointcut.concretize1(IfPointcut.java:156)
	at org.aspectj.weaver.patterns.IfPointcut.concretize(IfPointcut.java:143)
	at org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:119)
	at org.aspectj.weaver.Checker.concretize(Checker.java:35)
	at org.aspectj.weaver.CrosscuttingMembers.
addShadowMunger(CrosscuttingMembers.java:78)
	at org.aspectj.weaver.CrosscuttingMembers.addDeclare(CrosscuttingMembers.
java:102)
	at org.aspectj.weaver.CrosscuttingMembers.addDeclares(CrosscuttingMembers.
java:92)
	at org.aspectj.weaver.CrosscuttingMembersSet.
addAdviceLikeDeclares(CrosscuttingMembersSet.java:65)
	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.
addAdviceLikeDeclares(AjLookupEnvironment.java:147)
	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.
completeTypeBindings(AjLookupEnvironment.java:122)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:
300)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:314)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.
performCompilation(AjBuildManager.java:384)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.
doBuild(AjBuildManager.java:125)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.
batchBuild(AjBuildManager.java:70)
	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:104)
	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53)
	at org.aspectj.tools.ajc.Main.run(Main.java:234)
	at org.aspectj.tools.ajc.Main.runMain(Main.java:170)
	at org.aspectj.tools.ajc.Main.main(Main.java:81)</column>
            <column name="report_time">2004-02-07 12:26:00</column>
            <column name="report_timestamp">1076170000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">fbc0aa3</column>
            <column name="commit_timestamp">1077710000</column>
            <column name="files">tests/bugs/DecwClassCastException.java
weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java
weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java
weaver/src/org/aspectj/weaver/patterns/IfPointcut.java
weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">517</column>
            <column name="bug_id">36430</column>
            <column name="summary">Bug 36430  Support -Xreweavable option</column>
            <column name="description"></column>
            <column name="report_time">2003-04-13 03:35:26</column>
            <column name="report_timestamp">1050220000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">16a0abd</column>
            <column name="commit_timestamp">1077630000</column>
            <column name="files">ajde/testdata/ReweavableTest/CalculatePI.java
ajde/testdata/ReweavableTest/tjp/Demo.java
ajde/testdata/ReweavableTest/tjp/GetInfo.java
ajde/testsrc/org/aspectj/ajde/AjdeTests.java
ajde/testsrc/org/aspectj/ajde/ReweavableTestCase.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java
testing/src/org/aspectj/testing/harness/bridge/CompilerRun.java
weaver/src/org/aspectj/weaver/Advice.java
weaver/src/org/aspectj/weaver/CrosscuttingMembers.java
weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java
weaver/src/org/aspectj/weaver/Shadow.java
weaver/src/org/aspectj/weaver/WeaverStateInfo.java
weaver/src/org/aspectj/weaver/bcel/BcelCflowStackFieldAdder.java
weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java
weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java
weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java
weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">518</column>
            <column name="bug_id">51929</column>
            <column name="summary">Bug 51929  Advice calling protected super method causing java.lang.VerifyError 'Bad access to protected data'</column>
            <column name="description">A java.lang.VerifyError is thrown at runtime complaining about 'Bad access to  
protected data' when advice, on a sub-aspect, that calls a protected method, on  
the super-aspect, is woven into a class. 
However another call to the same method woven into the same class but due to  
advice declared in the super-aspect works fine. 
 
The aspects were woven into precompiled (by sun's 1.4 javac) classes. 
The verify error occurs under both sun's 1.4 and blackdowns 1.3 VMs, and presumably 
all VMs. 
 
Workaround: 
Making the protected method public fixes the verify error. 
 
A test case is available in CVS: 
tests/bugs/protectedvf/... 
tests/ajcTestFailing.xml</column>
            <column name="report_time">2004-02-12 21:13:29</column>
            <column name="report_timestamp">1076640000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6ddae42</column>
            <column name="commit_timestamp">1077230000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InlineAccessFieldBinding.java
tests/bugs/protectedvf/main/Driver.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">519</column>
            <column name="bug_id">45489</column>
            <column name="summary">Bug 45489  Structure model is wrong when re-opened</column>
            <column name="description">Some elements have the wrong kinds when a saved structure model is loaded.  
E.g. if I close then re-open the eclipse workbench classes are shown as 
interface in the outline view.  Also if I traverse the tree with the code 
below I get the wrong kinds assigned to classed, interfaces, aspects and 
import declarations.

List list = StructureModelUtil.getPackagesInModel();
for(Iterator i = list.iterator(); i.hasNext();){
    Object[] o = (Object[])i.next();
    IProgramElement node = (IProgramElement)o[0];
List files = StructureModelUtil.getFilesInPackage(node);
			for(Iterator i2 = files.iterator(); i2.hasNext();){
				IProgramElement file = (IProgramElement)i2.next
();
				System.out.println(&quot;file &quot; + file.getKind
().toString() + &quot;, &quot; + file.getName());
				boolean added2 = false;
				
				List file_children = file.getChildren();
					// file children can be classes, 
aspects or other things
				for(Iterator i3 = file_children.iterator(); 
i3.hasNext();){
					IProgramElement file_child = 
(IProgramElement)i3.next();
					System.out.println(&quot;kind: &quot; + 
file_child.getKind().toString() +&quot;, &quot; + file_child.getName());</column>
            <column name="report_time">2003-10-24 06:34:59</column>
            <column name="report_timestamp">1066990000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">669cd7c</column>
            <column name="commit_timestamp">1077210000</column>
            <column name="files">ajde/testsrc/org/aspectj/ajde/AjdeTests.java
ajde/testsrc/org/aspectj/ajde/SavedModelConsistencyTest.java
asm/src/org/aspectj/asm/IProgramElement.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">520</column>
            <column name="bug_id">50570</column>
            <column name="summary">Bug 50570  CatchClauseSignature has broken operation</column>
            <column name="description">It looks like the getParameterName() operation on org.aspectj.lang.reflect.
CatchClauseSignature is not working. Instead of returning the name of the 
exception as declared in the matched handler, returns the string value 
&quot;&lt;missing&gt;&quot;.

Here is a test case that shows the problem :-

------START OF TEST CASE CODE-----------

public class MyApp {

    public void doSomething() {
        // Get around &quot;unreachable code error...
        if (true)
        {
            throw new BusinessException(&quot;Surprise!!&quot;);
        }
        System.out.println(&quot;Busy doing something.&quot;);
    }

    public static void main(String[] args) {
        try {
            MyApp m = new MyApp();
            m.doSomething();
        } catch (BusinessException be) {
            System.out.println(&quot;Exception caught : &quot; + be.getMessage()); 
        }
    }
}

class BusinessException extends RuntimeException {
    BusinessException(String message) {
        super(message);
    }
}

aspect AppMonitor {
    pointcut problemHandling() : handler(Throwable+);

    before() : problemHandling() {
        CatchClauseSignature cSig =
            (CatchClauseSignature) thisJoinPointStaticPart.getSignature();

        System.out.println(
            &quot;MONITOR::\tCaught a &quot;
                + cSig.getParameterType().getName()
                + &quot; called &quot;
                + cSig.getParameterName());
    }
}

------END OF TEST CASE CODE-----------

The output from running the above was ...

MONITOR::	Caught a BusinessException called &lt;missing&gt;
Exception caught : Surprise !!!!

Operating system : Windows XP
AspectJ : 1.1.1 final and also on latest from CVS HEAD</column>
            <column name="report_time">2004-01-25 11:47:31</column>
            <column name="report_timestamp">1075050000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">19bac86</column>
            <column name="commit_timestamp">1075250000</column>
            <column name="files">tests/bugs/HandlerSig.java
weaver/src/org/aspectj/weaver/Member.java
weaver/src/org/aspectj/weaver/ResolvedMember.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">521</column>
            <column name="bug_id">48091</column>
            <column name="summary">Bug 48091  Lazy instantiation of thisJoinPoint</column>
            <column name="description">In cases where the body of advice refers to a non-statically evaluable portion 
of thisJoinPoint (so that it can't be optimized by the compiler to 
thisJoinPointStaticPart), the JoinPoint object is currently always created 
before entering the advice body - even if the JoinPoint object would never 
actually be accessed (because of a test within the advice for example). Since
a) thisJoinPoint is often used in tracing applications
b) tracing applications tend to be very pervasive,
c) they must have low overhead when tracing is disabled, and 
d) creation of thisJoinPoint objects is expensive (v. expensive compared to just 
testing a flag)
it would be nice if there was a way to create JoinPoint objects lazily on first 
actual reference within the advice body.</column>
            <column name="report_time">2003-12-04 12:18:33</column>
            <column name="report_timestamp">1070560000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0c83343</column>
            <column name="commit_timestamp">1074910000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/CommandTestCase.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/PerformanceTestCase.java
runtime/src/org/aspectj/runtime/reflect/Factory.java
weaver/src/org/aspectj/weaver/Lint.java
weaver/src/org/aspectj/weaver/World.java
weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">522</column>
            <column name="bug_id">48072</column>
            <column name="summary">Bug 48072  Complete relationship information in the structure model</column>
            <column name="description">Complete the set of relationships surfaced by the structure model (e.g. 
including support for declare parents etc.) - Mik you had a document listing the 
things yet to be done here?</column>
            <column name="report_time">2003-12-04 10:54:27</column>
            <column name="report_timestamp">1070550000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f24286d</column>
            <column name="commit_timestamp">1074850000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
weaver/src/org/aspectj/weaver/Checker.java
weaver/src/org/aspectj/weaver/ICrossReferenceHandler.java
weaver/src/org/aspectj/weaver/Shadow.java
weaver/src/org/aspectj/weaver/World.java
weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">523</column>
            <column name="bug_id">50200</column>
            <column name="summary">Bug 50200  aspectjrt.jar manifest file name needs changing to upper case</column>
            <column name="description"></column>
            <column name="report_time">2004-01-19 06:01:56</column>
            <column name="report_timestamp">1074510000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6f099df</column>
            <column name="commit_timestamp">1074770000</column>
            <column name="files">build/src/org/aspectj/internal/tools/ant/taskdefs/AntBuilder.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">524</column>
            <column name="bug_id">42515</column>
            <column name="summary">Bug 42515  NPE When compiling intertype declaration</column>
            <column name="description"></column>
            <column name="report_time">2003-09-04 07:12:20</column>
            <column name="report_timestamp">1062670000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6d2abc1</column>
            <column name="commit_timestamp">1074170000</column>
            <column name="files">tests/bugs/caseSensitivity/uniqueId/Numbered.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">525</column>
            <column name="bug_id">36234</column>
            <column name="summary">Bug 36234  out of memory error when compiling</column>
            <column name="description">Getting an out of memory error when compiling with Ajc 1.1 RC1. 
I know this is not very descriptive, but maybe you can point me into a 
direction of getting more output.

here some additional information though:
Code base is medium size (about 1500 classfiles)
I removed all my aspects and still receive the error.
Running it from the command line: ajc -classpath whateveritis -sourceroots 
whateveritis -d whateveritis</column>
            <column name="report_time">2003-04-08 14:04:10</column>
            <column name="report_timestamp">1049830000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b3b1eec</column>
            <column name="commit_timestamp">1074170000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">526</column>
            <column name="bug_id">47952</column>
            <column name="summary">Bug 47952  SoftException.printStackTrace(..) should print  wrapped throwable too</column>
            <column name="description">SoftExceptions should print not only their trace but also that of the wrapped
throwable.

We should be able to set a flag on class initialization whether we are running
under 1.4 and then implement it under 1.4 using initCause() and otherwise by
direct delegation.  I can do this fix if we're agreed.</column>
            <column name="report_time">2003-12-03 00:43:54</column>
            <column name="report_timestamp">1070430000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ad2fb7a</column>
            <column name="commit_timestamp">1074140000</column>
            <column name="files">runtime/src/org/aspectj/lang/SoftException.java
runtime/testsrc/RuntimeModuleTests.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">527</column>
            <column name="bug_id">38824</column>
            <column name="summary">Bug 38824  Anomalous handling of inter-type declarations to abstract base classes in aspectj 1.1</column>
            <column name="description">Version 1.1 of aspectj does not handle correctly inter-type declarations to
abstract base classes.

This appears when the following pattern is present in the code:

Suppose there is an interface InterfaceA, another interface InterfaceB and a
third interface InterfaceC extending InterfaceA and InterfaceB and containing
some method declarations of its own. 

Suppose also there is an aspect AConcretisingAspect that contains inter-type
declarations providing default implementations for all InterfaceC's methods
(both own and inherited).

Now suppose we have a class hierarchy emanating from an abstract class
BaseClass, and an aspect BaseClassAspect declaring that BaseClass implements
InterfaceC:

aspect BaseClassAspect {
     declare parents: BaseClass implements InterfaceC;
}

Unfortunately, during compilation iajc complains for each offspring of BaseClass
that it does not implement any of the abstract methods of InterfaceA and
InterfaceB (but not of InterfaceC's own!).

This does not happen when BaseClass is not abstract; and it does not occur in
version 1.0.6 of aspectj.</column>
            <column name="report_time">2003-06-12 05:35:45</column>
            <column name="report_timestamp">1055410000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0071cb4</column>
            <column name="commit_timestamp">1074100000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java
tests/bugs/AbstractBaseAndInterTypeInterface.java
weaver/src/org/aspectj/weaver/ResolvedTypeX.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">528</column>
            <column name="bug_id">44587</column>
            <column name="summary">Bug 44587  Erroneous exception conversion</column>
            <column name="description"></column>
            <column name="report_time">2003-10-09 13:58:19</column>
            <column name="report_timestamp">1065720000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5834de9</column>
            <column name="commit_timestamp">1074090000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectClinit.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java
runtime/src/org/aspectj/lang/NoAspectBoundException.java
runtime/testsrc/RuntimeModuleTests.java
tests/bugs/ErroneousExceptionConversion.java
tests/bugs/ErroneousExceptionConversion1.java
tests/new/ConstructorExecInitFails.java
weaver/src/org/aspectj/weaver/AjcMemberMaker.java
weaver/src/org/aspectj/weaver/NameMangler.java
weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">529</column>
            <column name="bug_id">46280</column>
            <column name="summary">Bug 46280  compiler issues error on inner aspects when privilieged</column>
            <column name="description">The compiler complains that &quot;inner aspects must be static&quot; whenever I try to 
qualify an inner (and static) aspect as privileged, no matter what the 
enclosing type is (aspect, interface or class).
I was using j2sdk1.4.0_02, AspectJ 1.1, eclipse 2.1 (with AJDT 1.1.3).
Test case:
------------------
BASE CLASS:
public class Capsule {
   private int hidden;
   public int visible;
   public Capsule(int priv, int pub) {
      hidden = priv;
      visible = pub;
   }
   public void doSomething() {
      System.out.println(&quot;&quot;&quot; + hidden + &quot;, &quot; + visible + &quot;&quot;&quot;);
   }
   public static void main(String[] args) {
      Capsule capsule = new Capsule(1, 1);
      capsule.doSomething();
   }
}
------------------
ASPECT:
public aspect Outer {
   static //privileged &lt;== JUST TRY TO UNCOMMENT THIS!
   aspect Inner {
      pointcut call2doSomething(Capsule capsule):
         call(void Capsule.doSomething())
         &amp;&amp; target(capsule);
      before(Capsule capsule): call2doSomething(capsule) {
         capsule.visible++;
         //capsule.hidden++;
      }
   }
}
------------------
INTERFACE:
public interface Marker {
   static //privileged &lt;== JUST TRY TO UNCOMMENT THIS!
   aspect Inner {
      pointcut call2doSomething(Capsule capsule):
         call(void Capsule.doSomething())
         &amp;&amp; target(capsule);
      before(Capsule capsule): call2doSomething(capsule) {
         capsule.visible++;
         //capsule.hidden++;
      }
   }
}</column>
            <column name="report_time">2003-11-07 11:32:21</column>
            <column name="report_timestamp">1068220000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7bbd1f4</column>
            <column name="commit_timestamp">1074080000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/parser/AjParser.java
tests/bugs/PrivilegedParsing.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">530</column>
            <column name="bug_id">44586</column>
            <column name="summary">Bug 44586  After throwing advice on ctors doesn't execute for inter-type decls</column>
            <column name="description">The following code doesn't work in Ajc 1.1.1, in Ajc built from CVS HEAD (as 
of yesterday), nor in Ajc 1.0.6:

Output:
C:\devel\test\excHandling&gt;java AfterThrowingCtor
Exception in thread &quot;main&quot; java.lang.IllegalStateException: crash
        at Foo.initVal(AfterThrowingCtor.java:21)
        at AfterThrowingCtor.ajc$interFieldInit$AfterThrowingCtor$Foo$val
(AfterT
hrowingCtor.java:9)
        at Foo.&lt;init&gt;(AfterThrowingCtor.java:13)
        at AfterThrowingCtor.main(AfterThrowingCtor.java:6)

Correct Output:
threw java.lang.IllegalStateException: crash at execution(Foo())
Exception in thread &quot;main&quot; java.lang.IllegalStateException: crash
        at Foo.initVal(AfterThrowingCtor.java:21)
        at AfterThrowingCtor.ajc$interFieldInit$AfterThrowingCtor$Foo$val
(AfterT
hrowingCtor.java:9)
        at Foo.&lt;init&gt;(AfterThrowingCtor.java:13)
        at AfterThrowingCtor.main(AfterThrowingCtor.java:6)

Input source:
public aspect AfterThrowingCtor {
    after() throwing (Throwable t) : execution(Foo.new(..)) {
	System.err.println(&quot;threw &quot;+t+&quot; at &quot;+thisJoinPointStaticPart);
    }
    public static void main(String args[]) {
	new Foo();
    }

    private Object Foo.val = Foo.initVal();
}

class Foo {
    Foo() { 
    }

    // if you uncomment this line and comment out the inter-type decl.
    // the advice runs correctly
    //private Object val = initVal();

    static Object initVal() {
	throw new IllegalStateException(&quot;crash&quot;); 
    }
}
---

AspectJ 1.1.1 runs the after throwing advice correctly if the field is 
declared normally (AspectJ 1.0.6 fails to do even this).</column>
            <column name="report_time">2003-10-09 13:53:43</column>
            <column name="report_timestamp">1065720000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">87db1e7</column>
            <column name="commit_timestamp">1074010000</column>
            <column name="files">tests/bugs/AfterThrowingCtor.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">531</column>
            <column name="bug_id">49814</column>
            <column name="summary">Bug 49814  ConfigParser.java:132</column>
            <column name="description"></column>
            <column name="report_time">2004-01-10 17:46:43</column>
            <column name="report_timestamp">1073770000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a4a1234</column>
            <column name="commit_timestamp">1073910000</column>
            <column name="files">org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java
util/src/org/aspectj/util/ConfigParser.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">532</column>
            <column name="bug_id">49638</column>
            <column name="summary">Bug 49638  exception logging: after() throwing advice can't convert Throwable obj to string and ajc aborts</column>
            <column name="description"></column>
            <column name="report_time">2004-01-07 12:31:34</column>
            <column name="report_timestamp">1073500000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7b081f2</column>
            <column name="commit_timestamp">1073640000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/parser/AjParser.java
tests/bugs/AfterThrowingAdviceSyntaxError.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">533</column>
            <column name="bug_id">41952</column>
            <column name="summary">Bug 41952  XLint warning for call PCD's using subtype of defining type</column>
            <column name="description"></column>
            <column name="report_time">2003-08-26 05:38:20</column>
            <column name="report_timestamp">1061890000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">97ab1e9</column>
            <column name="commit_timestamp">1073490000</column>
            <column name="files">bridge/src/org/aspectj/bridge/IMessage.java
bridge/src/org/aspectj/bridge/Message.java
bridge/src/org/aspectj/bridge/MessageUtil.java
bridge/src/org/aspectj/bridge/SourceLocation.java
org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java
testing/src/org/aspectj/testing/xml/SoftMessage.java
tests/bugs/DeclaringTypeWarning.java
tests/new/CallTypesI.java
tests/new/IndeterminateArg.java
tests/new/IndeterminateArgType.java
weaver/src/org/aspectj/weaver/Checker.java
weaver/src/org/aspectj/weaver/Lint.java
weaver/src/org/aspectj/weaver/patterns/AndPointcut.java
weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java
weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java
weaver/src/org/aspectj/weaver/patterns/NotPointcut.java
weaver/src/org/aspectj/weaver/patterns/OrPointcut.java
weaver/src/org/aspectj/weaver/patterns/Pointcut.java
weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java
weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">534</column>
            <column name="bug_id">47754</column>
            <column name="summary">Bug 47754  illegal method modifier</column>
            <column name="description">the attached example throws this at class load time.

please note that this bug results in a different exception when happens in a 
different setup, and when the class is loaded by JBoss. (more cryptic, talking 
about generic class format error)



Exception in thread &quot;main&quot; java.lang.ClassFormatError: 
com/netvisor/nvsr/client/InvalidByteCodeBug$Test$ITest (Illegal method 
modifiers: 0x409)
        at java.lang.ClassLoader.defineClass0(Native Method)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:537)
        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:
123)
        at java.net.URLClassLoader.defineClass(URLClassLoader.java:251)
        at java.net.URLClassLoader.access$100(URLClassLoader.java:55)
        at java.net.URLClassLoader$1.run(URLClassLoader.java:194)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:187)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:289)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:274)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:235)
        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:302)
        at java.lang.ClassLoader.defineClass0(Native Method)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:537)
        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:
123)
        at java.net.URLClassLoader.defineClass(URLClassLoader.java:251)
        at java.net.URLClassLoader.access$100(URLClassLoader.java:55)
        at java.net.URLClassLoader$1.run(URLClassLoader.java:194)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:187)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:289)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:274)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:235)
        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:302)
        at com.netvisor.nvsr.client.InvalidByteCodeBug.run(InvalidByteCodeBug.
java:15)
        at com.netvisor.nvsr.client.InvalidByteCodeBug.main(InvalidByteCodeBug.
java:8)</column>
            <column name="report_time">2003-11-29 03:48:15</column>
            <column name="report_timestamp">1070100000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7322131</column>
            <column name="commit_timestamp">1073490000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java
tests/bugs/StaticInterfaceMethods.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">535</column>
            <column name="bug_id">49250</column>
            <column name="summary">Bug 49250  alias getCause for getWrappedThrowable in SoftException</column>
            <column name="description">SoftException should implement getCause():

   public Throwable getCause() {
       return inner;
   }

(As pointed out by Ramnivas, misc mail messages, code comments...)

Using getCause() means the chain should print as expected in 1.4+, esp. when
SoftException is itself wrapped as a RemoteException.  Since getCause()
replicates getWrappedThrowable(), we could deprecate that, but we must continue
to support it to maintain upwards binary compatibility in the runtime classes.</column>
            <column name="report_time">2003-12-21 15:01:36</column>
            <column name="report_timestamp">1072040000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">eac16ae</column>
            <column name="commit_timestamp">1073480000</column>
            <column name="files">runtime/src/org/aspectj/lang/SoftException.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">536</column>
            <column name="bug_id">49457</column>
            <column name="summary">Bug 49457  No error on overloaded pointcuts unless binding variables</column>
            <column name="description">The compiler might not be detecting overloaded pointcut names when parameters
are not bound, and/or might not be implementing the pointcut correctly.  Below
is the context from my reply to Ron Bodkin on aspectj-dev &quot;Proper behavior of
overloaded pointcut definitions&quot;.  (I have not checked this code recently or
submitted a test case, nor have I evaluated whether my code below actually
replicates Ron's bug.)

---- context from the email
The programming guide says,

  It is an error for two pointcuts to be named with the same
  name in the same class or aspect declaration.

When I compile with overloaded pointcut names, I do get an error.

    pointcut pc(Runnable r) : target(r) &amp;&amp; call(void run());
    pointcut pc(SubRunnable r) : target(r) &amp;&amp; call(void run());

 $ aspectj-1.1.1 -classpath $ajrt11 OverloadedPointcut.java
 ...\OverloadedPointcut.java:14 duplicate pointcut name: pc
 ...\OverloadedPointcut.java:15 duplicate pointcut name: pc

...

When I use these pointcuts with bound parameters, I get an error.

    before(Runnable r) : pc(r) { log(&quot;pc(Runnable r)&quot;); }
    before(SubRunnable r) : pc(r) { log(&quot;pc(SubRunnable r)&quot;); }

When I use these pointcuts with type parameters, I get no errors.

    before() : pc(Runnable) { log(&quot;pc(Runnable)&quot;); }
    before() : pc(SubRunnable) { log(&quot;pc(SubRunnable)&quot;); }
    before() : pc(*) { log(&quot;pc(*)&quot;); }

[...]

---- my code
public class OverloadedPointcut {
    public static void main(String[] args) {
        new C().run();
    }
}
class C { public void run() {} }

aspect A {
    declare parents: C implements Runnable;
    declare parents: C implements SubRunnable;
    interface SubRunnable extends Runnable {}

    pointcut pc(Runnable r) : target(r) &amp;&amp; call(void run());
    pointcut pc(SubRunnable r) : target(r) &amp;&amp; call(void run());
    before(Runnable r) : pc(r) { log(&quot;pc(Runnable r)&quot;); }
    before(SubRunnable r) : pc(r) { log(&quot;pc(SubRunnable r)&quot;); }
    before() : pc(Runnable) { log(&quot;pc(Runnable)&quot;); }
    before() : pc(SubRunnable) { log(&quot;pc(SubRunnable)&quot;); }
    before() : pc(*) { log(&quot;pc(*)&quot;); }
    void log(String s) { System.out.println(s); }
} 

---- Ron's code
[...] the following program compiles with no warnings, produces no output when
run under AspectJ 1.1.1.  It appears to behave as if the more specific
definition is the only definition of the pointcut
[...]
Here is a simple program that illustrates the question and odd behavior:

package lib;

public class RunnablePointcuts {
    public pointcut runnableCalls(Runnable runnable, Object caller) :
        call(* run(..)) &amp;&amp; target(runnable) &amp;&amp; this(caller);

    //public pointcut specialRunnableCalls(SpecialRunnable runnable, Object
caller) :
    public pointcut runnableCalls(SpecialRunnable runnable, Object caller) :
        call(* run(..)) &amp;&amp; target(runnable) &amp;&amp; this(caller);
}
---
package lib;

public interface SpecialRunnable extends Runnable {
}
---
package client;

import lib.RunnablePointcuts;
import lib.SpecialRunnable;

public aspect Use {
    before(Object caller) : RunnablePointcuts.runnableCalls(*, caller) &amp;&amp;
target(MyRunnable) {
        System.out.println(&quot;my runnable called from &quot;+caller);
    }
    public static void main(String args[]) {
	Use.aspectOf().doIt();
    }
    public void doIt() {
        new MyRunnable().run();
    }
}

// the advice will run if you make this implement SpecialRunnable
//class MyRunnable implements SpecialRunnable {
class MyRunnable implements Runnable {
    public void run() {}
}</column>
            <column name="report_time">2004-01-02 00:21:30</column>
            <column name="report_timestamp">1073020000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">c517e85</column>
            <column name="commit_timestamp">1073480000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java
tests/bugs/OverloadedPointcutsInAspect.java
tests/bugs/OverloadedPointcutsInClass.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">537</column>
            <column name="bug_id">47318</column>
            <column name="summary">Bug 47318  org.aspectj.asm.IRelationship.Kind.ALL does not contain all kinds</column>
            <column name="description">org.aspectj.asm.IRelationship.Kind.ALL is an array that should contain all kinds
that an IRelationship may have. There are three possible kinds defined in
IRelationship.java: ADVICE, DECLARE and DECLARE_INTER_TYPE. The Kind[] ALL does
only contain ADVICE and DECLARE. This can lead to an ArrayIndexOutOfBoundsException.</column>
            <column name="report_time">2003-11-23 16:18:11</column>
            <column name="report_timestamp">1069620000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">bdc79f1</column>
            <column name="commit_timestamp">1069620000</column>
            <column name="files">asm/src/org/aspectj/asm/IRelationship.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">538</column>
            <column name="bug_id">43783</column>
            <column name="summary">Bug 43783  AJDT not very stable when confronted with java/aspect errors.</column>
            <column name="description">AJDT is not very stable when an eclipse project contains errors like
missing classes, wrong package statements etc. etc. This may occurs when
refactoring a project (sometimes by changing the source outside eclipse).

Note I am using Eclipse 2.1.1, AJDT 1.1.4 + incremental compilation.

Generally a lot of exceptions will occur (mostly nullpointer). Here are some 
of them:

I:
java.lang.NullPointerException
	at org.aspectj.asm.internal.ProgramElement.toLinkLabelString
(ProgramElement.java:403)
	at org.eclipse.ajdt.internal.core.AJDTStructureViewNode.getLabel
(AJDTStructureViewNode.java:171)
	at org.eclipse.ajdt.internal.core.AJDTStructureViewNodeAdapter.getLabel
(AJDTStructureViewNodeAdapter.java:89)
	at org.eclipse.ui.model.WorkbenchLabelProvider.getText
(WorkbenchLabelProvider.java:142)

II:
java.lang.NullPointerException
	at org.eclipse.ajdt.internal.ui.editor.AspectJEditor$1.run
(AspectJEditor.java:242)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)

III:
java.lang.NullPointerException
	at org.aspectj.ajde.internal.CompilerAdapter.compile
(CompilerAdapter.java:79)
	at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run
(AspectJBuildManager.java:165)
!</column>
            <column name="report_time">2003-09-26 19:36:57</column>
            <column name="report_timestamp">1064620000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3e4b59a</column>
            <column name="commit_timestamp">1066840000</column>
            <column name="files">ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">539</column>
            <column name="bug_id">44117</column>
            <column name="summary">Bug 44117  NPE on compile</column>
            <column name="description">java.lang.NullPointerException
at org.aspectj.weaver.AsmRelationshipProvider.checkerMunger
(AsmRelationshipProvider.java:51)
at org.aspectj.weaver.Checker.match(Checker.java:58)
at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:985)
at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:791)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:291)
at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:77)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:417)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:390)
at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:316)
at 
org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFile
s(AjBuildManager.java:256)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild
(AjBuildManager.java:156)
at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild
(AjBuildManager.java:70)
at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:103)
at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run
(AspectJBuildManager.java:165)</column>
            <column name="report_time">2003-10-03 01:17:43</column>
            <column name="report_timestamp">1065160000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3117255</column>
            <column name="commit_timestamp">1066320000</column>
            <column name="files">weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">540</column>
            <column name="bug_id">43709</column>
            <column name="summary">Bug 43709  structure view crash when extending library aspects</column>
            <column name="description">I have an library with an aspect that includes advice, which I compile into an 
outjar. In my client project I extend it, and make a concrete pointcut that 
results in the library aspect affecting parts of my system. 

There is a bug and an enhancement request here:

1) A bug: when you look at the structure view for affected classes, there is a 
problem if you try to navigate from calls to advice (in AJDT, it results in an 
NPE). Here is the stack trace in AJDT:
java.lang.NullPointerException
at org.aspectj.asm.internal.ProgramElement.toLinkLabelString
(ProgramElement.java:403)
at org.eclipse.ajdt.internal.core.AJDTStructureViewNode.getLabel
(AJDTStructureViewNode.java:171)
at org.eclipse.ajdt.internal.core.AJDTStructureViewNodeAdapter.getLabel
(AJDTStructureViewNodeAdapter.java:89)
at org.eclipse.ui.model.WorkbenchLabelProvider.getText
(WorkbenchLabelProvider.java:142)
at org.eclipse.jface.viewers.TreeViewer.doUpdateItem(TreeViewer.java:95)
at org.eclipse.jface.viewers.AbstractTreeViewer$UpdateItemSafeRunnable.run
(AbstractTreeViewer.java:87)
at org.eclipse.core.internal.runtime.InternalPlatform.run
(InternalPlatform.java:1006)
at org.eclipse.core.runtime.Platform.run(Platform.java:413)
at org.eclipse.jface.viewers.AbstractTreeViewer.doUpdateItem
(AbstractTreeViewer.java:406)
at org.eclipse.jface.viewers.StructuredViewer$UpdateItemSafeRunnable.run
(StructuredViewer.java:119)
at org.eclipse.core.internal.runtime.InternalPlatform.run
(InternalPlatform.java:1006)
at org.eclipse.core.runtime.Platform.run(Platform.java:413)
at org.eclipse.jface.viewers.StructuredViewer.updateItem
(StructuredViewer.java:1271)
at org.eclipse.jface.viewers.AbstractTreeViewer.createTreeItem
(AbstractTreeViewer.java:320)
at org.eclipse.jface.viewers.AbstractTreeViewer$1.run
(AbstractTreeViewer.java:303)
at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:69)
at org.eclipse.jface.viewers.AbstractTreeViewer.createChildren
(AbstractTreeViewer.java:289)
at org.eclipse.jface.viewers.AbstractTreeViewer.handleTreeExpand
(AbstractTreeViewer.java:697)
at org.eclipse.jface.viewers.AbstractTreeViewer$4.treeExpanded
(AbstractTreeViewer.java:709)
at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:175)
at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:81)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:840)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:865)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:849)
at org.eclipse.swt.widgets.Tree.wmNotifyChild(Tree.java:1909)
at org.eclipse.swt.widgets.Control.WM_NOTIFY(Control.java:3815)
at org.eclipse.swt.widgets.Composite.WM_NOTIFY(Composite.java:642)
at org.eclipse.swt.widgets.Control.windowProc(Control.java:2816)
at org.eclipse.swt.widgets.Display.windowProc(Display.java:2361)
at org.eclipse.swt.internal.win32.OS.CallWindowProcW(Native Method)
at org.eclipse.swt.internal.win32.OS.CallWindowProc(OS.java:1236)
at org.eclipse.swt.widgets.Tree.callWindowProc(Tree.java:156)
at org.eclipse.swt.widgets.Tree.WM_LBUTTONDOWN(Tree.java:1517)
at org.eclipse.swt.widgets.Control.windowProc(Control.java:2799)
at org.eclipse.swt.widgets.Display.windowProc(Display.java:2361)
at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:1303)
at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1543)
at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1402)
at org.eclipse.ui.internal.Workbench.run(Workbench.java:1385)
at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:858)
at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.eclipse.core.launcher.Main.basicRun(Main.java:291)
at org.eclipse.core.launcher.Main.run(Main.java:747)
at org.eclipse.core.launcher.Main.main(Main.java:583)
 

2) The enhancement request: the concrete aspect that applies the advice should 
also show what is affected in the project. Of course, it would also be nice to 
see how a given concrete library aspect in the aspect path affects your 
project too.</column>
            <column name="report_time">2003-09-25 18:30:52</column>
            <column name="report_timestamp">1064530000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">426d89b</column>
            <column name="commit_timestamp">1064550000</column>
            <column name="files">asm/src/org/aspectj/asm/internal/ProgramElement.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">541</column>
            <column name="bug_id">43033</column>
            <column name="summary">Bug 43033  Compiler crash in ajc head (post 1.1.1 rc1) on erroneous program</column>
            <column name="description"></column>
            <column name="report_time">2003-09-12 13:34:02</column>
            <column name="report_timestamp">1063390000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5357086</column>
            <column name="commit_timestamp">1063960000</column>
            <column name="files">tests/bugs/concretizeNpe/base/ExceptionHandling.java
tests/bugs/concretizeNpe/model/ModelExceptionHandling.java
weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">542</column>
            <column name="bug_id">43194</column>
            <column name="summary">Bug 43194  java.lang.VerifyError in generated code</column>
            <column name="description">See the attached file VerifyBug.jar for the source files. You won't need 
anything else to compiler and reproduce this bug:

~/bug&gt; ls
AbstractCaching.java   TreeNode.java         VerifyBug.jar
ContainerCaching.java  TreeNodeFolding.java  WorkspaceGroup.java
ContainerLoader.java   TreePanel.java        WorkspaceNode.java
Makefile               TreeWorkspace.java
~/bug&gt; gmake   
/cygdrive/c/aspectj1.1.1/bin/ajc -classpath &quot;C:\aspectj1.1.1
\lib\aspectjrt.jar&quot; -version
AspectJ Compiler 1.1.1

/cygdrive/c/aspectj1.1.1/bin/ajc -classpath &quot;C:\aspectj1.1.1\lib\aspectjrt.jar&quot; 
*.java
java -classpath &quot;C:\aspectj1.1.1\lib\aspectjrt.jar;.&quot; TreeNode
java.lang.VerifyError: (class: TreeNode, method: doShowAction signature: ()V) 
Unable to pop operand off an empty stack
Exception in thread &quot;main&quot; make: *** [all] Error 1</column>
            <column name="report_time">2003-09-16 23:21:32</column>
            <column name="report_timestamp">1063770000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">fc0d2af</column>
            <column name="commit_timestamp">1063910000</column>
            <column name="files">tests/bugs/AdviceInteraction.java
weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">543</column>
            <column name="bug_id">42993</column>
            <column name="summary">Bug 42993  Language regression, or possible language improvement?</column>
            <column name="description">The file AspectBug.java:

public aspect AspectBug extends AbstractCaching
perthis(execution(ContainerLoader+.new(..)))
{
	declare parents: ContainerDescriptor implements AbstractCaching.Key;

	protected pointcut loadExecutions( Key key ):
		ContainerLoader.containerLoads( *, key );
}

abstract aspect AbstractCaching  {
	interface Key {}
	protected abstract pointcut loadExecutions(Key key);
}

class Key {
}

class ContainerDescriptor {
}

class ActiveContainer {
}

class ContainerLoader {
	public ActiveContainer createContainer(ContainerDescriptor c) {
		return null;
	}

    public pointcut containerLoads(ContainerLoader loader,
								   
ContainerDescriptor containerDesc ):
        this(loader) &amp;&amp; args(containerDesc)
        &amp;&amp; execution(ActiveContainer ContainerLoader.createContainer
(ContainerDescriptor));
}

        First, here are the versions of AspectJ I'm using (this is a bash
        shell under cygwin on Windows XP):

~&gt; CLASSPATH='C:\aspectj1.0\lib\aspectjrt.jar' /cygdrive/c/aspectj1.0/bin/ajc -
version
ajc version 1.0.6 (built Jul 24, 2002 6:21 PM PST) running on java 1.4.1_02
~&gt; CLASSPATH='C:\aspectj1.1\lib\aspectjrt.jar' /cygdrive/c/aspectj1.1/bin/ajc -
version
AspectJ Compiler 1.1.0
~&gt; CLASSPATH='C:\aspectj1.1.1rc1
\lib\aspectjrt.jar' /cygdrive/c/aspectj1.1.1rc1/bin/ajc -version
AspectJ Compiler 1.1.1rc1
~&gt; CLASSPATH='C:\aspectj1.1.1
\lib\aspectjrt.jar' /cygdrive/c/aspectj1.1.1/bin/ajc -version
AspectJ Compiler 1.1.1

        For all four of these compilers, I give them the AspectBug.java file
	(which is attached):

~&gt; CLASSPATH='C:\aspectj1.0\lib\aspectjrt.jar' /cygdrive/c/aspectj1.0/bin/ajc 
AspectBug.java
~&gt; CLASSPATH='C:\aspectj1.1\lib\aspectjrt.jar' /cygdrive/c/aspectj1.1/bin/ajc 
AspectBug.java
~&gt; CLASSPATH='C:\aspectj1.1.1rc1
\lib\aspectjrt.jar' /cygdrive/c/aspectj1.1.1rc1/bin/ajc AspectBug.java
~&gt; CLASSPATH='C:\aspectj1.1.1
\lib\aspectjrt.jar' /cygdrive/c/aspectj1.1.1/bin/ajc AspectBug.java
C:\Documents and Settings\Macneil Shonle\AspectBug.java:7 incompatible type, 
expected ContainerDescriptor found BindingTypePattern(AbstractCaching$Key, 0)

1 error

        As you can see, only the final run (with the Sept 11 build of
	ajc) do we see the &quot;incompatible type&quot; error. If this is not a
	regression but a desirable result, how should the code be ported?</column>
            <column name="report_time">2003-09-12 04:26:44</column>
            <column name="report_timestamp">1063360000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">b512738</column>
            <column name="commit_timestamp">1063390000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java
tests/bugs/ParentsAndPointcuts.java
weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java
weaver/src/org/aspectj/weaver/ResolvedTypeX.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">544</column>
            <column name="bug_id">42740</column>
            <column name="summary">Bug 42740  declare error fails on pointcuts composed from multiple classes</column>
            <column name="description">This error occurs in both 1.1.0 and in the head of CVS as of 9/8/03. The 
compiler crash output from the CVS head version is at the end. It may be 
related to 42739, but they may be distinct problems.

Sample source:
/*
 * Created on Sep 8, 2003
 *
 * Copyright (c) 2003 New Aspects of Security. All Rights Reserved.
 */
aspect Library {
    public pointcut executionsThrowingChecked() : 
        execution(* *(..) throws (Exception+ &amp;&amp; !RuntimeException));
}

public aspect SampleExceptionHandling {
    public pointcut scope() : within(org.atrack.model..*);
    
    public pointcut executionsThrowingChecked() : 
        Library.executionsThrowingChecked() &amp;&amp; scope();

    declare error : executionsThrowingChecked(): 
        &quot;no checked exceptions&quot;;
}

sample compile:
C:\eclipse\workspace\atrack&gt;ajc src\SampleExceptionHandling.java
java.lang.Exception: Stack trace
        at java.lang.Thread.dumpStack(Thread.java:1071)
        at org.aspectj.weaver.patterns.ReferencePointcut.concretize1
(ReferencePo
intcut.java:215)
        at org.aspectj.weaver.patterns.AndPointcut.concretize1
(AndPointcut.java:
88)
        at org.aspectj.weaver.patterns.ReferencePointcut.concretize1
(ReferencePo
intcut.java:272)
        at org.aspectj.weaver.patterns.AndPointcut.concretize1
(AndPointcut.java:
88)
        at org.aspectj.weaver.patterns.ReferencePointcut.concretize1
(ReferencePo
intcut.java:272)
        at org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:127)
        at org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:120)
        at org.aspectj.weaver.Checker.concretize(Checker.java:37)
        at org.aspectj.weaver.CrosscuttingMembers.addShadowMunger
(CrosscuttingMe
mbers.java:78)
        at org.aspectj.weaver.CrosscuttingMembers.addDeclare
(CrosscuttingMembers
.java:102)
        at org.aspectj.weaver.CrosscuttingMembers.addDeclares
(CrosscuttingMember
s.java:92)
        at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers
(ResolvedT
ypeX.java:332)
        at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect
(Crosscut
tingMembersSet.java:50)
        at 
org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy
peAndPerClause(AspectDeclaration.java:754)
        at 
org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn
terTypeAndPerClause(AjLookupEnvironment.java:124)
        at 
org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet
eTypeBindings(AjLookupEnvironment.java:91)
        at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile
(Compiler.ja
va:310)
        at org.eclipse.jdt.internal.compiler.Compiler.compile
(Compiler.java:324)

        at 
org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat
ion(AjBuildManager.java:373)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild
(AjBuild
Manager.java:125)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild
(AjBu
ildManager.java:70)
        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:99)
        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53)
        at org.aspectj.tools.ajc.Main.run(Main.java:217)
        at org.aspectj.tools.ajc.Main.runMain(Main.java:155)
        at org.aspectj.tools.ajc.Main.main(Main.java:72)
C:\eclipse\workspace\atrack\src\SampleExceptionHandling.java:15 circular 
pointcu
t declaration involving: executionsThrowingChecked()

1 error</column>
            <column name="report_time">2003-09-08 22:47:35</column>
            <column name="report_timestamp">1063080000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d78d9ed</column>
            <column name="commit_timestamp">1063150000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java
tests/bugs/declareBinding/SampleExceptionHandling1.java
tests/bugs/declareSoftWithin/test/NoSoftener.java
weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">545</column>
            <column name="bug_id">42539</column>
            <column name="summary">Bug 42539  throw derivative pointcuts not advised.</column>
            <column name="description">Given the following point cut and advice:

public aspect ExceptionAspect
{
    pointcut exceptionThrower() : execution(public * ExceptionBugTest.*(..)
throws Exception+);

    declare warning : exceptionThrower() : &quot;throws Exception+&quot;;
}

And the to be aspected code:

public class ExceptionBugTest
{

    class MyException extends Exception
    {
    }

    public void method1() throws Exception
    {
    }

    public void method2() throws MyException
    {
    }
}

listing file default.lst:
C:\temp\AJC Bug\ExceptionAspect.aj
C:\temp\AJC Bug\ExceptionBugTest.java


AJC does not advise ExceptionBugTest.method2().  The output from the compilation
is the following:
C:\temp\AJC Bug&gt;ajc -argfile default.lst -classpath %ASPECTJ_HOME%\lib\aspectjrt.jar
C:\eclipse\workspace\AJC Bug\ExceptionBugTest.java:11 throws Exception+

From the aspect-j mailing list, contributed by Jim Hugunin:
&amp;lt;detail&amp;gt;The bug was caused because the code for ThrowsPattern mistakenly
used the internal protected method TypePattern.matchesExactly instead of the
external public method TypePattern.matchesStatically.  Because the classes were
in the same package, Java's accessibility rules allowed this.  It would be nice
if there was an easy way to specifiy that a method could only be accessed from
subtypes.&amp;lt;/detail&amp;gt;</column>
            <column name="report_time">2003-09-04 11:15:58</column>
            <column name="report_timestamp">1062690000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">8660cc1</column>
            <column name="commit_timestamp">1062690000</column>
            <column name="files">tests/bugs/throwsSignature/ExceptionAspect.java
tests/bugs/throwsSignature/ExceptionBugTest.java
weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">546</column>
            <column name="bug_id">41359</column>
            <column name="summary">Bug 41359  percflow aspects compiled from jars share one instance for all entry points</column>
            <column name="description">When a percflow aspect is woven into source code from a jar using the aspectPath
compiler option, it produces only one instance of the aspect for each entrypoint
defined in the source code.</column>
            <column name="report_time">2003-08-09 11:19:18</column>
            <column name="report_timestamp">1060440000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">5a07dce</column>
            <column name="commit_timestamp">1062110000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java
tests/bugs/perCflowAndJar/PerCFlowCompileFromJar.java
tests/bugs/perCflowAndJar/PerCFlowCompileFromJarTest.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">547</column>
            <column name="bug_id">41888</column>
            <column name="summary">Bug 41888  call PCD fails when given subtype of defining type</column>
            <column name="description"></column>
            <column name="report_time">2003-08-23 00:20:38</column>
            <column name="report_timestamp">1061610000</column>
            <column name="status">resolved wontfix</column>
            <column name="commit">9df9062</column>
            <column name="commit_timestamp">1061610000</column>
            <column name="files">tests/bugs/CallReference.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">548</column>
            <column name="bug_id">39436</column>
            <column name="summary">Bug 39436  [Tasks] No summary shown in status line</column>
            <column name="description">build I20030625

The old tasks view showed a summary of the number of tasks, errors, warnings 
and infos in the status line.  This is missing in the reworked view.</column>
            <column name="report_time">2003-06-27 14:32:14</column>
            <column name="report_timestamp">1056740000</column>
            <column name="status">verified fixed</column>
            <column name="commit">d90acdc</column>
            <column name="commit_timestamp">1061480000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">549</column>
            <column name="bug_id">41254</column>
            <column name="summary">Bug 41254  revise asm and create interfaces</column>
            <column name="description"></column>
            <column name="report_time">2003-08-07 09:00:15</column>
            <column name="report_timestamp">1060260000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f1deb9c</column>
            <column name="commit_timestamp">1060340000</column>
            <column name="files">ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java
ajbrowser/src/org/aspectj/tools/ajbrowser/TopFrame.java
ajde/src/org/aspectj/ajde/internal/LstBuildConfigManager.java
ajde/src/org/aspectj/ajde/ui/AbstractIconRegistry.java
ajde/src/org/aspectj/ajde/ui/BuildConfigModel.java
ajde/src/org/aspectj/ajde/ui/BuildConfigNode.java
ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java
ajde/src/org/aspectj/ajde/ui/StructureSearchManager.java
ajde/src/org/aspectj/ajde/ui/StructureView.java
ajde/src/org/aspectj/ajde/ui/StructureViewManager.java
ajde/src/org/aspectj/ajde/ui/StructureViewNode.java
ajde/src/org/aspectj/ajde/ui/StructureViewNodeFactory.java
ajde/src/org/aspectj/ajde/ui/StructureViewProperties.java
ajde/src/org/aspectj/ajde/ui/internal/NavigationHistoryModel.java
ajde/src/org/aspectj/ajde/ui/internal/TreeStructureViewBuilder.java
ajde/src/org/aspectj/ajde/ui/swing/AjdeUIManager.java
ajde/src/org/aspectj/ajde/ui/swing/BrowserStructureViewToolPanel.java
ajde/src/org/aspectj/ajde/ui/swing/BrowserView.java
ajde/src/org/aspectj/ajde/ui/swing/BrowserViewManager.java
ajde/src/org/aspectj/ajde/ui/swing/BrowserViewTreeListener.java
ajde/src/org/aspectj/ajde/ui/swing/BuildConfigPopupMenu.java
ajde/src/org/aspectj/ajde/ui/swing/IconRegistry.java
ajde/src/org/aspectj/ajde/ui/swing/PointcutWizard.java
ajde/src/org/aspectj/ajde/ui/swing/SimpleStructureViewToolPanel.java
ajde/src/org/aspectj/ajde/ui/swing/StructureTreeManager.java
ajde/src/org/aspectj/ajde/ui/swing/StructureViewPanel.java
ajde/src/org/aspectj/ajde/ui/swing/SwingTreeViewNode.java
ajde/src/org/aspectj/ajde/ui/swing/SwingTreeViewNodeFactory.java
ajde/src/org/aspectj/ajde/ui/swing/SwingTreeViewNodeRenderer.java
ajde/src/org/aspectj/ajde/ui/swing/TreeViewBuildConfigEditor.java
ajde/testdata/examples/coverage/ModelCoverage.java
ajde/testdata/examples/coverage/pkg/InPackage.java
ajde/testsrc/org/aspectj/ajde/AjdeTests.java
ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java
ajde/testsrc/org/aspectj/ajde/AsmRelationshipsTest.java
ajde/testsrc/org/aspectj/ajde/NullIdeErrorHandler.java
ajde/testsrc/org/aspectj/ajde/NullIdeManager.java
ajde/testsrc/org/aspectj/ajde/NullIdeProgressMonitor.java
ajde/testsrc/org/aspectj/ajde/NullIdeTaskListManager.java
ajde/testsrc/org/aspectj/ajde/NullIdeUIAdapter.java
ajde/testsrc/org/aspectj/ajde/StructureModelRegressionTest.java
ajde/testsrc/org/aspectj/ajde/StructureModelTest.java
ajde/testsrc/org/aspectj/ajde/ui/StructureModelUtilTest.java
ajde/testsrc/org/aspectj/ajde/ui/StructureSearchManagerTest.java
ajde/testsrc/org/aspectj/ajde/ui/StructureViewManagerTest.java
asm/src/org/aspectj/asm/AdviceAssociation.java
asm/src/org/aspectj/asm/Association.java
asm/src/org/aspectj/asm/HierarchyWalker.java
asm/src/org/aspectj/asm/IProgramElement.java
asm/src/org/aspectj/asm/IRelationship.java
asm/src/org/aspectj/asm/IStructureModelListener.java
asm/src/org/aspectj/asm/InheritanceAssociation.java
asm/src/org/aspectj/asm/IntroductionAssociation.java
asm/src/org/aspectj/asm/LinkNode.java
asm/src/org/aspectj/asm/ModelWalker.java
asm/src/org/aspectj/asm/ProgramElementNode.java
asm/src/org/aspectj/asm/ReferenceAssociation.java
asm/src/org/aspectj/asm/Relation.java
asm/src/org/aspectj/asm/RelationNode.java
asm/src/org/aspectj/asm/StructureModel.java
asm/src/org/aspectj/asm/StructureModelListener.java
asm/src/org/aspectj/asm/StructureModelManager.java
asm/src/org/aspectj/asm/StructureNode.java
asm/src/org/aspectj/asm/StructureNodeFactory.java
asm/src/org/aspectj/asm/internal/ProgramElement.java
asm/src/org/aspectj/asm/internal/Relationship.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmNodeFormatter.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EmacsStructureModelManager.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AsmBuilderTest.java
testing/src/org/aspectj/testing/ajde/CompileCommand.java
weaver/src/org/aspectj/weaver/AsmAdaptor.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">550</column>
            <column name="bug_id">41123</column>
            <column name="summary">Bug 41123  Weaving failure when using injars</column>
            <column name="description">Sample run that fails using injars:
C:\devel\test\libraryWeave&gt;ajc ajee\testing\ExecutionMonitor.aj

C:\devel\test\libraryWeave&gt;jar cf ajee.jar ajee\testing\*.class

C:\devel\test\libraryWeave&gt;ajc -injars ajee.jar model\BusObj.java 
model\MonitorB
usObj.java
C:\devel\test\libraryWeave\model\BusObj.java:3 Class must implement the 
inherite
d abstract method ExecutionMonitor.MonitoredItem.ajc$interMethodDispatch2
$ajee_t
esting_ExecutionMonitor$record(String, String)
public class BusObj {
             ^^^^^^

1 error

It works in a single pass compilation:
C:\devel\test\libraryWeave&gt;ajc ajee\testing\ExecutionMonitor.aj 
model\BusObj.jav
a model\MonitorBusObj.java

C:\devel\test\libraryWeave&gt;

Sample source code:
package ajee.testing;

public aspect ExecutionMonitor {
    public interface MonitoredItem {}
    private void MonitoredItem.record(String eventType, String eventName) {}
}         
---
package model;

public class BusObj {

}
---
package model;

import ajee.testing.ExecutionMonitor;

public aspect MonitorBusObj {
    declare parents: BusObj implements ExecutionMonitor.MonitoredItem;
}</column>
            <column name="report_time">2003-08-05 00:39:51</column>
            <column name="report_timestamp">1060060000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3e59745</column>
            <column name="commit_timestamp">1060310000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java
tests/bugs/moreInterfaceLibrary/model/BusObj.java
tests/bugs/moreInterfaceLibrary/model/MonitorBusObj.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java
weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">551</column>
            <column name="bug_id">40534</column>
            <column name="summary">Bug 40534  Declare warning/error output - more detail required.</column>
            <column name="description">At present the declare warning and declare error functionality of the compiler 
provides no detailed information about what it is in the user code that has led 
to the generation of the compile-time warning or error. 

Consider the following test case...

public class A
{
  public static void main(String[] args)
  {
    A a = new A();
    a.doSomething();
    System.out.println(&quot;All done&quot;);
  }

  void doSomething()
  {
    System.out.println(&quot;Doing something&quot;);
  }
} // end of class A


public aspect MyAspect
{
  pointcut noDoing() :
    call(* *.doSomething(..));

  declare warning : noDoing() :
    &quot;Don't do it!&quot;;
} 

When I compile these two files I get the following warning ...

c:\src\A.java:16 Don't do it!

..which is great if all I want to know is where the offending code is. But not 
nearly enough if I want to know what it is on the line that is contravening the 
policy (or policies) that I have specified in my aspect. In the above example it 
would be even more useful if the warning message was something like ...

c:\src\A.java:16 Don't do it! : calling method : void A.doSomething()

For large projects where there is an architectural imperative to reduce or 
completely remove coupling between certain components declare warning/error 
would be of far greater use if it could return more detailed info to say *why* 
not just *where* the desired enforcement rules have been broken.</column>
            <column name="report_time">2003-07-20 12:16:58</column>
            <column name="report_timestamp">1058720000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">684c9c1</column>
            <column name="commit_timestamp">1060250000</column>
            <column name="files">bridge/src/org/aspectj/bridge/IMessage.java
bridge/src/org/aspectj/bridge/Message.java
testing/src/org/aspectj/testing/xml/SoftMessage.java
weaver/src/org/aspectj/weaver/Checker.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">552</column>
            <column name="bug_id">40257</column>
            <column name="summary">Bug 40257  parsing of &quot;../&quot; paths in LST files is broken</column>
            <column name="description">Relative paths (e.g. &quot;../&quot;) are no longer parser properly in AJDE 1.1.0.</column>
            <column name="report_time">2003-07-16 15:06:12</column>
            <column name="report_timestamp">1058380000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">acdf688</column>
            <column name="commit_timestamp">1060240000</column>
            <column name="files">ajbrowser/testsrc/org/aspectj/tools/ajbrowser/BrowserManagerTest.java
ajbrowser/testsrc/org/aspectj/tools/ajbrowser/InteractiveBrowserTest.java
ajde/src/org/aspectj/ajde/ui/swing/CompilerMessagesCellRenderer.java
org.aspectj.ajdt.core/testdata/bug-40257/d1/A.java
org.aspectj.ajdt.core/testdata/bug-40257/d1/d2/B.java
org.aspectj.ajdt.core/testdata/bug-40257/d3/C.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/AjdtAjcTests.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">553</column>
            <column name="bug_id">41170</column>
            <column name="summary">Bug 41170  -classpath entries in .lst files overwrite command-line -classpath entries</column>
            <column name="description">If the command-line specifies both a -classpath entry and a .lst file with a
-classpath entry, the .lst file entry seems to replace rather than supplement
the command-line entry.  I expect options to be cumulative. See

tests/bugs/options/classpath</column>
            <column name="report_time">2003-08-05 20:19:15</column>
            <column name="report_timestamp">1060130000</column>
            <column name="status">resolved wontfix</column>
            <column name="commit">40fb451</column>
            <column name="commit_timestamp">1060130000</column>
            <column name="files">tests/bugs/options/classpath/Client.java
tests/bugs/options/classpath/lib/Library.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">554</column>
            <column name="bug_id">38717</column>
            <column name="summary">Bug 38717  &quot;.lst&quot; file parsing errors should include sourceline information</column>
            <column name="description">To check for this bug add an erroneous line to an &quot;.lst&quot; file and compile it 
with AJDE.  The error message returned is project-specific.  It should be 
specific to the &quot;.lst&quot; file in which the error originated (i.e. the message 
needs a SourceLocation).</column>
            <column name="report_time">2003-06-10 12:03:37</column>
            <column name="report_timestamp">1055260000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">a26cac9</column>
            <column name="commit_timestamp">1059590000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">555</column>
            <column name="bug_id">39974</column>
            <column name="summary">Bug 39974  Some strange error when compiling the observer example with JBuilder7 integrated AJDE</column>
            <column name="description">When I compiled the observer/subject protocol example with JBuilder7 
integrated AJDE,there was a strange internal error

C:/JBuilder7/extras/aspectj-110/doc/examples/observer/Observer.java:0: 
Internal compiler error
java.lang.NullPointerException

	at 
org.aspectj.ajdt.internal.compiler.lookup.EclipseWorld.makeResolvedMember
(Unknown Source)

	at org.aspectj.ajdt.internal.core.builder.AsmBuilder.visit(Unknown 
Source)

	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse
(Unknown Source)

	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse
(Unknown Source)

	at 
org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse
(Unknown Source)

	at org.aspectj.ajdt.internal.core.builder.AsmBuilder.internalBuild
(Unknown Source)

	at org.aspectj.ajdt.internal.core.builder.AsmBuilder.build(Unknown 
Source)

	at 
org.aspectj.ajdt.internal.compiler.lookup.EclipseWorld.finishedCompilationUnit
(Unknown Source)

	at org.aspectj.ajdt.internal.compiler.AjCompiler.process(Unknown 
Source)

	at org.eclipse.jdt.internal.compiler.Compiler.compile(Unknown Source)

	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile
(Unknown Source)

	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile
(Unknown Source)

	at 
org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.run(Unknown 
Source)

	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild
(Unknown Source)

	at org.aspectj.ajde.internal.CompilerAdapter.compile(Unknown Source)

	at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run
(Unknown Source)

I firstly fix it by changing the interface Subject and Observer like this:
interface Observer {    void update();}
interface Subject { Object getData(); }
then it could compile successfully ,however,I immediately got another 
confusing.The compiler only made Display.java Observer.java Subject.java 
SubjectObserverProtocol.java and SubjectObserverProtocolImpl.java but ignoring 
the others.I don't know why,it seems to be a bug.

Meanwhile, I use ajc command-line  to compile this example ,it can get through 
without any exceptions.</column>
            <column name="report_time">2003-07-12 06:00:12</column>
            <column name="report_timestamp">1058000000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f5d31ba</column>
            <column name="commit_timestamp">1059560000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">556</column>
            <column name="bug_id">39626</column>
            <column name="summary">Bug 39626  Compiler error when compiling a buggy class</column>
            <column name="description">I use AspectJ 1.1 from within eclipse.
After some time of developing, I get following stack trace (Wrapped in the 
eclipse gui), when I try to compile a java file with a huge amount of syntax 
errors, missing variables, and other problems.

As soon as I have fixed these issues, I can comnpile normally as ever.

Unfortunatly I can not provide any more detailed information because:
this errors pops up randomly,
disappears when the bug is fixed, 
I have neither the time nor the permission to create a more accurate sample

java.lang.NullPointerException
    at java.lang.String.&lt;init&gt;(String.java:214)
    at org.aspectj.ajdt.internal.core.builder.AsmBuilder.visit
(AsmBuilder.java:231)
    at org.aspectj.ajdt.internal.core.builder.AsmBuilder.visit
(AsmBuilder.java:259)
    at 
org.eclipse.jdt.internal.compiler.ast.AnonymousLocalTypeDeclaration.traverse
(AnonymousLocalTypeDeclaration.java:138)
    at 
org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse
(QualifiedAllocationExpression.java:342)
    at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse
(MessageSend.java:299)
    at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:147)
    at org.eclipse.jdt.internal.compiler.ast.ForStatement.traverse
(ForStatement.java:347)
    at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse
(MethodDeclaration.java:157)
    at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse
(TypeDeclaration.java:946)
    at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse
(CompilationUnitDeclaration.java:303)
    at org.aspectj.ajdt.internal.core.builder.AsmBuilder.internalBuild
(AsmBuilder.java:169)
    at org.aspectj.ajdt.internal.core.builder.AsmBuilder.build
(AsmBuilder.java:66)
    at 
org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit
(EclipseFactory.java:303)
    at org.aspectj.ajdt.internal.compiler.AjCompiler.process(AjCompiler.java:67)
    at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:338)
    at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation
(AjBuildManager.java:372)
    at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild
(AjBuildManager.java:133)
    at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild
(AjBuildManager.java:78)
    at org.aspectj.ajde.internal.CompilerAdapter.compile
(CompilerAdapter.java:117)
    at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run
(AspectJBuildManager.java:164)
    LoadTest.java   CrefoClient/src/com/dcbank/scoring/socketserver 
 
kind regards
   Arno Schmidmeier</column>
            <column name="report_time">2003-07-04 05:26:04</column>
            <column name="report_timestamp">1057310000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7886970</column>
            <column name="commit_timestamp">1059560000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjdtBuilderTests.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AsmBuilderTest.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">557</column>
            <column name="bug_id">39959</column>
            <column name="summary">Bug 39959  AJC Compiler generates invalid class files under certain circunstances.</column>
            <column name="description">I made a package (I will attach it to this bug with the name bug.zip) which
shows a sample Java program that correctly runs when compiled with javac and
have classloading problems every time it is compiled with ajc.

Please see the file README.TO.DEMONSTRATE.BUG inside the bug.zip archive for
detailed (although simple) instructions on reproducing the bug.

There are two shell scripts attached to make things easier.

Please keep me informed of the status of this issue.</column>
            <column name="report_time">2003-07-11 16:01:33</column>
            <column name="report_timestamp">1057950000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ee03a3e</column>
            <column name="commit_timestamp">1059480000</column>
            <column name="files">tests/bugs/bootstrapClasspath/UsesDOMParser.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">558</column>
            <column name="bug_id">40824</column>
            <column name="summary">Bug 40824  asm treats &quot;declare parents&quot; as methods</column>
            <column name="description">&quot;declare parents&quot; member declarations report their kind as &quot;method&quot; instead of 
what they are.</column>
            <column name="report_time">2003-07-28 05:55:44</column>
            <column name="report_timestamp">1059390000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">58e3cb2</column>
            <column name="commit_timestamp">1059480000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">559</column>
            <column name="bug_id">39842</column>
            <column name="summary">Bug 39842  allow use of an environment variable to set compiler arguments</column>
            <column name="description">I'm trying to create a special jsp compilation servlet in Tomcat 4.x that uses 
the aspectj compiler. I can plug in the compiler adapter, but I don't have 
control of the ant code they use to invoke the compiler, so I'd like to use 
an environment variable to do this (apparently the only mechanism they do 
support).

I'm doing this so I can pass an aspectpath in to weave aspects into the 
compiled jsp servlet.</column>
            <column name="report_time">2003-07-09 19:31:03</column>
            <column name="report_timestamp">1057790000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2502ee5</column>
            <column name="commit_timestamp">1059190000</column>
            <column name="files">taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java
taskdefs/src/org/aspectj/tools/ant/taskdefs/ICommandEditor.java
taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">560</column>
            <column name="bug_id">40771</column>
            <column name="summary">Bug 40771  ajde apis are unnecessariy coupled to swing</column>
            <column name="description">The AJDE APIs are coupled to javax.swing by org.aspectj.ajde.EditorManager.  
The EditorManager needs to be refactored, have swing specific parts moved to 
org.aspectj.ajde.ui.swing and org.aspectj.ajbrowser.</column>
            <column name="report_time">2003-07-25 10:47:43</column>
            <column name="report_timestamp">1059140000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">bbd832b</column>
            <column name="commit_timestamp">1059150000</column>
            <column name="files">ajbrowser/src/org/aspectj/tools/ajbrowser/BasicEditor.java
ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java
ajbrowser/src/org/aspectj/tools/ajbrowser/BuildConfigPopupMenu.java
ajbrowser/src/org/aspectj/tools/ajbrowser/CompilerMessagesPanel.java
ajbrowser/src/org/aspectj/tools/ajbrowser/EditorManager.java
ajbrowser/src/org/aspectj/tools/ajbrowser/TopFrame.java
ajde/src/org/aspectj/ajde/Ajde.java
ajde/src/org/aspectj/ajde/ui/EditorManager.java
ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java
ajde/src/org/aspectj/ajde/ui/StructureViewManager.java
ajde/src/org/aspectj/ajde/ui/swing/AjdeUIManager.java
ajde/src/org/aspectj/ajde/ui/swing/BasicEditor.java
ajde/src/org/aspectj/ajde/ui/swing/BrowserViewManager.java
ajde/src/org/aspectj/ajde/ui/swing/BrowserViewTreeListener.java
ajde/src/org/aspectj/ajde/ui/swing/BuildConfigPopupMenu.java
ajde/src/org/aspectj/ajde/ui/swing/PointcutWizard.java
ajde/src/org/aspectj/ajde/ui/swing/StructureViewPanel.java
ajde/testsrc/AjdeModuleTests.java
ajde/testsrc/org/aspectj/ajde/CompilerMessagesTest.java
ajde/testsrc/org/aspectj/ajde/NullIdeEditorAdapter.java
ajde/testsrc/org/aspectj/ajde/NullIdeManager.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">561</column>
            <column name="bug_id">40380</column>
            <column name="summary">Bug 40380  AspectJ does not honour libraries defined via Project Properties</column>
            <column name="description">AJDT 1.1.3, Eclipse 2.1

To build a JDK 1.4. program under Eclipse using JDK 1.3 the appropriate build 
library should be selected in the Project Properties &quot;Java Build Path&quot;. 
However AspectJ continues to use the JDK associated with Eclipse so errors 
result from using 1.4 APIs. The same will occur running Eclipse under 1.4 and 
compiling programs for 1.5

Testcase:
1. Run Eclipse under JDK 1.3
2. Create a Java project which uses a 1.4 JDK
3. Write a Java classes that uses 1.4 APIs e.g.

public class TestStringBuffer {

	public  static void main(String[] args) {
		new StringBuffer(&quot;Test&quot;).indexOf(&quot;T&quot;);
  	}
}
4. Convert to AspectJ project</column>
            <column name="report_time">2003-07-17 11:08:28</column>
            <column name="report_timestamp">1058450000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d5ea336</column>
            <column name="commit_timestamp">1058980000</column>
            <column name="files">ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">562</column>
            <column name="bug_id">39993</column>
            <column name="summary">Bug 39993  ajc stack trace on declaring hashcode() method in aspect</column>
            <column name="description">From an email sent to the user's list 6/26/2003:
------------------------------------------
ajc 1.1 NPE when an aspect declares hashcode() as follows:

     interface Identifiable {
         void setId(Id id);
         Id getId();
     }
 
     aspect IdentifiableAspect {
         private Id Identifiable.id = null;
         public Id Identifiable.getId() {
 		return this.id;
 	  }
         public void Identifiable.setId(Id id) {
             this.id = id;
         }
 
         public int Identifiable.hashCode() {
             return (this.getId() == null)
                 ? super.hashCode()
                 : this.getId().hashCode();
         }
     }

A workaround for callers the compiler controls is to replace the declaration
with around advice:

     int around(Identifiable i): target(i)
         &amp;&amp; call(public int hashCode())
     {
         return (i.getId() == null)
             ? proceed(i)
             : i.getId().hashCode();
     }</column>
            <column name="report_time">2003-07-13 15:02:03</column>
            <column name="report_timestamp">1058120000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">026b272</column>
            <column name="commit_timestamp">1058910000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperFixerVisitor.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperReference.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeDeclaration.java
tests/bugs/MultipleSuperCf.java
tests/bugs/OverridingInterfaceObjectMethod.java
weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">563</column>
            <column name="bug_id">39458</column>
            <column name="summary">Bug 39458  Compiler crash in ajc 1.1</column>
            <column name="description"></column>
            <column name="report_time">2003-06-29 23:42:42</column>
            <column name="report_timestamp">1056940000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ba41fae</column>
            <column name="commit_timestamp">1057190000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PrivilegedHandler.java
tests/bugs/MissingImport.java
tests/bugs/NewVoid.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">564</column>
            <column name="bug_id">38131</column>
            <column name="summary">Bug 38131  ajc needs -d . option while correctly compiling classes from subpackage</column>
            <column name="description"></column>
            <column name="report_time">2003-05-27 01:46:58</column>
            <column name="report_timestamp">1054010000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">c509c6f</column>
            <column name="commit_timestamp">1054060000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.ajdt.core/testdata/src1/WrongPackage.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BasicCommandTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">565</column>
            <column name="bug_id">37739</column>
            <column name="summary">Bug 37739  Unexpected Xlint:unresolvableMember warning with withincode</column>
            <column name="description">The following code produces an Xlint:unresolvableMember warning:

class A {
    A(Class type) {}

    A() {
        this(String.class);
    }
}

class B {

    public void test() {
    }

    public void test2() {
        test();
    }
}

aspect C {
    void around() :
        (call (void B.test()) &amp;&amp;
         withincode (void B.test2())) {
        proceed();
    }
}

The warning text is:

Warning.java:22 can not resolve this member:
void A.&lt;catch&gt;(java.lang.ClassNotFoundException) [Xlint:unresolvableMember]

Line 22 is the line in the aspect that says &quot;withincode&quot;.  If I comment out 
the aspect, the warning goes away.  Also, if I comment out A's default 
constructor, it goes away.  The &quot;String.class&quot; seems to have something to do 
with the warning.  

I can reproduce this with 1.1rc1 and 1.1rc2.</column>
            <column name="report_time">2003-05-15 21:20:16</column>
            <column name="report_timestamp">1053050000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2072ac1</column>
            <column name="commit_timestamp">1053370000</column>
            <column name="files">tests/bugs/CatchSig.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">566</column>
            <column name="bug_id">37021</column>
            <column name="summary">Bug 37021  source path wrong in declare warning on binary files</column>
            <column name="description">In declare warning messages when targeting .class files from -injars, the source 
path is listed in the form &quot;app.Main.class&quot; rather than &quot;app/Main.[java|aj]&quot;.

See tests/new/binaryWarnings/.. for code to run to see the problem.

Limitations of the tests:
- These tests return false positives when detecting this error because filename 
checking is not enabled in harness verification of messages.

- I have also see the filenames not appear at all, but these tests do not 
reproduce that problem.  (I saw it in AJDT, so perhaps if the filename makes no 
sense to AJDT, AJDT simply omits it.)</column>
            <column name="report_time">2003-04-28 15:03:42</column>
            <column name="report_timestamp">1051560000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">9b30f9f</column>
            <column name="commit_timestamp">1051560000</column>
            <column name="files">tests/new/binaryWarnings/src/app/Main.java
tests/new/binaryWarnings/src/aspects/MainWarnings.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">567</column>
            <column name="bug_id">30663</column>
            <column name="summary">Bug 30663  lame error message: &quot;negation doesn't allow binding&quot;</column>
            <column name="description">AspectJ Compiler 1.1beta4

This program:

public aspect Foo {
  pointcut p(int i): call(void f(i));
}

produces these error messages:

negation doesn't allow binding
formal unbound in pointcut

2 errors

It should say something like &quot;binding is only allowed in state-based pointcuts&quot;, and it should print the file and line number.

--Doug</column>
            <column name="report_time">2003-01-30 15:48:08</column>
            <column name="report_timestamp">1043960000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7d14432</column>
            <column name="commit_timestamp">1051490000</column>
            <column name="files">tests/bugs/BadBindingError.java
weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
weaver/src/org/aspectj/weaver/patterns/TypePattern.java
weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">568</column>
            <column name="bug_id">36936</column>
            <column name="summary">Bug 36936  Error when introducing members of type Class</column>
            <column name="description">Using AspectJ 1.1 RC1 
 
public aspect Asp { 
	public Class Trg.member = String.class; 
} 
 
public class Trg { 
	public static void main(String args[]) { 
		new Trg(); 
		System.out.println(&quot;All ok&quot;); 
	} 
} 
 
Compiling with &quot;ajc Asp.java Trg.java&quot; and running Trg, prints &quot;All ok&quot;, as it should. 
 
Compiling with &quot;ajc Trg.java Asp.java&quot; and running Trg gives: 
Exception in thread &quot;main&quot; java.lang.NoSuchFieldError: class$0 
        at Asp.ajc$interFieldInit$Asp$Trg$member(Asp.java:2) 
        at Trg.&lt;init&gt;(Trg.java:1) 
        at Trg.main(Trg.java:3) 
 
Note, introduced field must be of type Class, or array of Classes, works fine else.</column>
            <column name="report_time">2003-04-25 16:36:56</column>
            <column name="report_timestamp">1051300000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">8d793a3</column>
            <column name="commit_timestamp">1051490000</column>
            <column name="files">tests/bugs/interSpecials/Asp.java
tests/bugs/interSpecials/Trg.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">569</column>
            <column name="bug_id">34951</column>
            <column name="summary">Bug 34951  NPE compiling without aspectjrt.jar</column>
            <column name="description">Compiling spacewar without specifying aspectjrt.jar on the classpath causes a 
NPE.  Expected an error message &quot;aspectjrt.jar required&quot;.

Steps to reproduce
1) install latest
2) cd doc/examples
3) java -jar ../../lib/aspectjtools.jar -verbose @spacewar/debug.lst
RESULT:NPE in attached log</column>
            <column name="report_time">2003-03-13 14:38:58</column>
            <column name="report_timestamp">1047580000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">f236927</column>
            <column name="commit_timestamp">1051490000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BasicCommandTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">570</column>
            <column name="bug_id">36803</column>
            <column name="summary">Bug 36803  BCException thrown by AspectJ 1.1rc1</column>
            <column name="description">[iajc] expected state: resolved got: concrete
     [iajc] expected state: resolved got: concrete
     [iajc] org.aspectj.weaver.BCException: expected state: resolved got: 
concrete
     [iajc]     at org.aspectj.weaver.patterns.Pointcut.assertState
(Pointcut.java:236)
     [iajc]     at org.aspectj.weaver.patterns.Pointcut.concretize
(Pointcut.java:126)
     [iajc]     at org.aspectj.weaver.patterns.CflowPointcut.concretize1
(CflowPointcut.java:143)
     [iajc]     at org.aspectj.weaver.patterns.NotPointcut.concretize1
(NotPointcut.java:94)
     [iajc]     at org.aspectj.weaver.patterns.AndPointcut.concretize1
(AndPointcut.java:88)
     [iajc]     at org.aspectj.weaver.patterns.ReferencePointcut.concretize1
(ReferencePointcut.java:270)
     [iajc]     at org.aspectj.weaver.patterns.AndPointcut.concretize1
(AndPointcut.java:88)
     [iajc]     at org.aspectj.weaver.patterns.ReferencePointcut.concretize1
(ReferencePointcut.java:270)
     [iajc]     at org.aspectj.weaver.patterns.Pointcut.concretize
(Pointcut.java:127)
     [iajc]     at org.aspectj.weaver.patterns.Pointcut.concretize
(Pointcut.java:120)
     [iajc]     at org.aspectj.weaver.Advice.concretize(Advice.java:207)
     [iajc]     at org.aspectj.weaver.CrosscuttingMembers.addShadowMunger
(CrosscuttingMembers.java:78)
     [iajc]     at org.aspectj.weaver.CrosscuttingMembers.addShadowMungers
(CrosscuttingMembers.java:72)
     [iajc]     at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers
(ResolvedTypeX.java:328)
     [iajc]     at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect
(CrosscuttingMembersSet.java:54)
     [iajc]     at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave
(BcelWeaver.java:164)
     [iajc]     at org.aspectj.weaver.bcel.BcelWeaver.weave
(BcelWeaver.java:214)
     [iajc]     at 
org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFile
s(AjBuildManager.java:394)
     [iajc]     at 
org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild
(AjBuildManager.java:149)
     [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.runCommand
(AjdtCommand.java:55)
     [iajc]     at org.aspectj.tools.ajc.Main.run(Main.java:216)
     [iajc]     at org.aspectj.tools.ajc.Main.runMain(Main.java:155)
     [iajc]     at org.aspectj.tools.ant.taskdefs.AjcTask.execute
(AjcTask.java:646)
     [iajc]     at org.apache.tools.ant.UnknownElement.execute
(UnknownElement.java:193)
     [iajc]     at org.apache.tools.ant.Task.perform(Task.java:341)
     [iajc]     at org.apache.tools.ant.Target.execute(Target.java:309)
     [iajc]     at org.apache.tools.ant.Target.performTasks(Target.java:336)
     [iajc]     at org.apache.tools.ant.Project.executeTarget
(Project.java:1339)
     [iajc]     at org.apache.tools.ant.Project.executeTargets
(Project.java:1255)
     [iajc]     at org.apache.tools.ant.Main.runBuild(Main.java:609)
     [iajc]     at org.apache.tools.ant.Main.start(Main.java:196)
     [iajc]     at org.apache.tools.ant.Main.main(Main.java:235)</column>
            <column name="report_time">2003-04-23 12:56:03</column>
            <column name="report_timestamp">1051120000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">1e502f5</column>
            <column name="commit_timestamp">1051290000</column>
            <column name="files">tests/bugs/CflowConcrete.java
weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java
weaver/src/org/aspectj/weaver/patterns/Pointcut.java
weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java
weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">571</column>
            <column name="bug_id">29665</column>
            <column name="summary">Bug 29665  Inconsistant stack height</column>
            <column name="description">Using AspectJ1.1b4 running the following program crashes it with this message:
&quot;Inconsistent stack height 0 != 2&quot;. While reducing my original program to the
minimum example below I had also stack height 0 != 1, but I guess that is
related, so I didn't reproduce it (mail me if this you need this, too).

mport java.lang.reflect.Method;

public class StackError {
	public static void main(String args[]) {}

	void assertTrue(String msg, boolean b) {}

	public void testEqualsNull() {
		StackError one = new StackError();
		StackError two = new StackError();
		assertTrue(&quot;equal&quot;, one.equals(two));	// does not work
		boolean yes = one.equals(two);			// works
	}
	
	public boolean equals(Object other) {
		return true;
	}
}

aspect EqualsContract {
	pointcut equalsCall(Object thisOne, Object otherOne):
		target(Object+) &amp;&amp; 
 
	target(thisOne) &amp;&amp;
		call(public boolean equals(Object+)) &amp;&amp;
		args(otherOne) &amp;&amp;
		!within(EqualsContract);
	
	boolean around(Object thisOne, Object otherOne):
	equalsCall(thisOne, otherOne) {
		boolean result = proceed(thisOne, otherOne);
		Class cls = thisOne.getClass();
		String name = cls.getName();
		boolean hasHashCode = false;
		try {
			Method m = cls.getDeclaredMethod(&quot;hashCode&quot;, null);
			String lookFor = &quot;public int &quot; + name + &quot;.hashCode()&quot;;
			hasHashCode = lookFor.equals(m.toString());
		}
		catch (NoSuchMethodException nsme) {}
		return result;
	}
}


The program does not crash if you comment out the line indicated with the &quot;does
not work&quot; comment. Note the line below that (comment &quot;works&quot;) does work.</column>
            <column name="report_time">2003-01-16 15:18:00</column>
            <column name="report_timestamp">1042750000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6c9118b</column>
            <column name="commit_timestamp">1051050000</column>
            <column name="files">tests/bugs/StackError.java
tests/bugs/messyAround/cap/OptionList.java
weaver/src/org/aspectj/weaver/bcel/BcelShadow.java
weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">572</column>
            <column name="bug_id">36564</column>
            <column name="summary">Bug 36564  Internal compiler error</column>
            <column name="description">Eclipse: 2.1.0, 200302211557
AspectJ: 1.1.1


I get the following internal error when using &quot;thisJoinPoint.getStaticPart()&quot; 
in around advice at a call joinpoit (source below). Using just &quot;thisJoinPoint&quot; 
is fine.

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode
(MessageSend.java:40)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode
(MessageSend.java:44)
	at 
org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.analyseCode
(AbstractMethodDeclaration.java:106)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode
(TypeDeclaration.java:445)
	at 
org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode
(CompilationUnitDeclaration.java:76)
	at org.eclipse.jdt.internal.compiler.Compiler.process
(Compiler.java:539)
	at org.aspectj.ajdt.internal.compiler.AjCompiler.process
(AjCompiler.java:65)
	at org.eclipse.jdt.internal.compiler.Compiler.compile
(Compiler.java:340)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile
(AbstractImageBuilder.java:232)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile
(AbstractImageBuilder.java:171)
	at 
org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.run
(AjBuildManager.java:655)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild
(AjBuildManager.java:139)
	at org.aspectj.ajde.internal.CompilerAdapter.compile
(CompilerAdapter.java:92)
	at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run
(AspectJBuildManager.java:213)
	Exceptions.java	AspectJ Bugs/src/compiler	

Source:

package compiler;

import java.io.*;

/**
 * @author websterm
 *
 * To change this generated comment go to 
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
public class Test {

	public static void main(String[] args) throws Exception{
		FileInputStream in = new FileInputStream(&quot;test&quot;);
	}
}

/*
 * Created on 14-Apr-03
 *
 * To change this generated comment go to 
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
package compiler;

import java.io.*;

import org.aspectj.lang.*;

/**
 * @author websterm
 *
 * To change this generated comment go to 
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
public aspect Exceptions {
	
	pointcut exceptionMethods () :
		call(* java.io.*.*(..) throws IOException);
		
	Object around () throws IOException : exceptionMethods() &amp;&amp; !within
(Exceptions) {
		Object obj = proceed();
		System.out.println(thisJoinPoint.getStaticPart());
		return obj;	
	}
}</column>
            <column name="report_time">2003-04-16 08:42:21</column>
            <column name="report_timestamp">1050500000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0a8dbde</column>
            <column name="commit_timestamp">1051030000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java
tests/bugs/tjpStaticPart/Exceptions.java
tests/bugs/tjpStaticPart/Test.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">573</column>
            <column name="bug_id">35725</column>
            <column name="summary">Bug 35725  Inter type declaration to base class not seen by derived class</column>
            <column name="description">The following code shows what I believe is an incorrect error - the base class 
AImpl is made concrete by the aspect Af, but the compilation of BImpl does not 
recognize this fact. This problem is for version 1.1rc1 and is not seen in 
1.0.6.

// ---------------------
// A.java

package a_intf;

public interface A
{
  A f();
}

// ---------------------
// AImpl.java

package a_impl;

import a_intf.A;

public class AImpl
  implements A
{
}

// ---------------------
// Af.java

package a_impl;

import a_intf.A;

aspect Af
{
  public A AImpl.f()
  {
    System.out.println( &quot;f called&quot; );
    return null;
  }
}

// ---------------------
// B.java

package b_intf;

import a_intf.A;

public interface B
  extends A
{
  B g();
}

// ---------------------
// BImpl.java

package b_impl;

import a_impl.AImpl;
import b_intf.B;

public class BImpl
  extends AImpl
  implements B
{
  public B g()
  {
    System.out.println( &quot;g called&quot; );
    return null;
  }
}

// Compiler Error:
// BImpl.java:7 Class must implement the inherited abstract method a_intf.A.f()</column>
            <column name="report_time">2003-03-26 15:16:24</column>
            <column name="report_timestamp">1048710000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">11b3b07</column>
            <column name="commit_timestamp">1050010000</column>
            <column name="files">tests/bugs/interInherit/a_impl/AImpl.java
tests/bugs/interInherit/a_impl/Af.java
tests/bugs/interInherit/a_intf/A.java
tests/bugs/interInherit/b_impl/BImpl.java
tests/bugs/interInherit/b_intf/B.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">574</column>
            <column name="bug_id">36046</column>
            <column name="summary">Bug 36046  inter-type declaration bug with abstract classes</column>
            <column name="description">This error occurs when you do an inter-type declaration on an interface, use 
declare parents to make an abstract base class implement it, and then try to 
use the declared (method), it fails. If you make the base class concrete, then 
this doesn't fail.

The following code demonstrates the error. If you run java Driver you get:
java.lang.AbstractMethodError: Derived.getExecutions(Ljava/lang/String;)I
	at Driver.main(Driver.java:23)
Exception in thread &quot;main&quot; 

public class Driver {
    public static void main(String args[]) {
        Derived generator = new Derived();
        System.out.println(generator.getExecutions(&quot;processEvents&quot;));
    }
    static aspect MonitorBase {
        declare parents: Base implements ExecutionMonitor.MonitoredItem;
    }    
}

class Derived extends Base {
    public String getName() {
        return null;
    }
}

abstract class Base {
    abstract public String getName();
}

aspect ExecutionMonitor {
    /** marker interface to indicate the execution monitor should track calls 
and executions on this class. */
    public interface MonitoredItem {
        int getExecutions(String methodName);
    }

    /** a Map of events to mutable integers */
    public int MonitoredItem.getExecutions(String methodName) {
        return 0;
    }
}</column>
            <column name="report_time">2003-04-03 18:21:57</column>
            <column name="report_timestamp">1049410000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">808bae8</column>
            <column name="commit_timestamp">1050010000</column>
            <column name="files">tests/bugs/interAbstract/Driver.java
weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java
weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java
weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">575</column>
            <column name="bug_id">33474</column>
            <column name="summary">Bug 33474  bad source locations for declare error/warning</column>
            <column name="description"></column>
            <column name="report_time">2003-02-27 14:03:15</column>
            <column name="report_timestamp">1046370000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">989aaf7</column>
            <column name="commit_timestamp">1048780000</column>
            <column name="files">ajde/testdata/examples/declare-warning/apackage/InitCatcher.java
ajde/testdata/examples/declare-warning/apackage/SomeClass.java
ajde/testsrc/org/aspectj/ajde/AjdeTestCase.java
ajde/testsrc/org/aspectj/ajde/AjdeTests.java
ajde/testsrc/org/aspectj/ajde/CompilerMessagesTest.java
ajde/testsrc/org/aspectj/ajde/NullIdeManager.java
ajde/testsrc/org/aspectj/ajde/NullIdeTaskListManager.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">576</column>
            <column name="bug_id">34925</column>
            <column name="summary">Bug 34925  compiler crash on yesterday's rc1 build</column>
            <column name="description"></column>
            <column name="report_time">2003-03-13 11:58:52</column>
            <column name="report_timestamp">1047570000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">56cc4f2</column>
            <column name="commit_timestamp">1047580000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java
tests/bugs/ConvertToUnchecked.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">577</column>
            <column name="bug_id">34858</column>
            <column name="summary">Bug 34858  Weaver crash</column>
            <column name="description"></column>
            <column name="report_time">2003-03-12 14:50:32</column>
            <column name="report_timestamp">1047500000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">7746fcb</column>
            <column name="commit_timestamp">1047510000</column>
            <column name="files">tests/bugs/CflowBinding.java
tests/bugs/CflowBindingOrig.java
weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">578</column>
            <column name="bug_id">34820</column>
            <column name="summary">Bug 34820  ajc -aspectpath  fails with NPE for cflow pointcuts</column>
            <column name="description"></column>
            <column name="report_time">2003-03-12 10:36:41</column>
            <column name="report_timestamp">1047480000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">db37189</column>
            <column name="commit_timestamp">1047500000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseAdvice.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">579</column>
            <column name="bug_id">29934</column>
            <column name="summary">Bug 29934  runtime NullPointerException when applying around advice to other around advice</column>
            <column name="description">When the program below is run, it produces a NullPointerException...
java.lang.NullPointerException
	at A2.ajc$around$A2$3b6proceed(CflowCycles.java)
	at A2.ajc$around$A2$3b6_aroundBody3(CflowCycles.java:35)
	at Target.run(CflowCycles.java:24)
	at CflowCycles.run_aroundBody4(CflowCycles.java:8)
	at CflowCycles.main_aroundBody6(CflowCycles.java:24)
	at CflowCycles.main(CflowCycles.java:24)

---(in new/CflowCycles.java and in ajcTestsFailing.xml)

import org.aspectj.testing.Tester; 

/** @testcase cflow cycles in advice from different aspects */
public class CflowCycles {
  public static void main( String args[] ) {
        Tester.expectEvent(&quot;target A1&quot;);
        Tester.expectEvent(&quot;target A2&quot;);
        new Target().run();
        Tester.checkAllEventsIgnoreDups();
  }
}

class Target {
    public void run(){ }
}

aspect A1 {
    pointcut TargetRunFlow () 
        // ok if no cflow: within(Target) &amp;&amp; execution(* *(..)) &amp;&amp; !within
(A1+);
        : !within(A1+) &amp;&amp; !preinitialization(new(..)) &amp;&amp; !initialization(new
(..))//cflow(within(Target) &amp;&amp; execution(* *(..))) &amp;&amp; !within(A1+)
        ;
    Object around () : TargetRunFlow() {
        Tester.event(&quot;target A1&quot;);
        return proceed();
    }
    // ok if in the same class
}

aspect A2 {
    pointcut TargetRun () 
        : within(Target) &amp;&amp; execution(* *(..)) &amp;&amp; !within(A2+);
        ;
    Object around () : TargetRun() {
        Tester.event(&quot;target A2&quot;);
        return proceed();
    }
}</column>
            <column name="report_time">2003-01-21 20:13:59</column>
            <column name="report_timestamp">1043200000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0fb5f69</column>
            <column name="commit_timestamp">1047430000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">580</column>
            <column name="bug_id">32239</column>
            <column name="summary">Bug 32239  Dumps assembly code if Object[] used in args (BcelRenderer.java:152)</column>
            <column name="description"></column>
            <column name="report_time">2003-02-19 10:07:28</column>
            <column name="report_timestamp">1045670000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">ae0ef30</column>
            <column name="commit_timestamp">1047360000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/BcelRenderer.java
weaver/src/org/aspectj/weaver/bcel/Utility.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">581</column>
            <column name="bug_id">32421</column>
            <column name="summary">Bug 32421  can't resolve nested public interfaces</column>
            <column name="description">This may be caused by the bug as 32399

file TransactionTest.java:
import sub.ExecutionMonitor;

public class TransactionTest {
    static Transaction theTransaction;

    private void assertCommitted() {
        theTransaction.getCount(&quot;method-execution&quot;, &quot;commit&quot;);
    }

    static aspect MonitorTest {
        declare parents: Transaction implements ExecutionMonitor.MonitoredItem;
    }
}

class Transaction {
}

file sub/ExecutionMonitor.aj:
package sub;

public aspect ExecutionMonitor {
    public interface MonitoredItem {
        int getCount(String eventType, String eventName);
    }

    public int MonitoredItem.getCount(String eventType, String eventName) {
            return 0;
    } 
}         

sample compilation:
C:\devel&gt;ajc -1.4 TransactionTest.java sub\ExecutionMonitor.aj
can't bind type name 'ExecutionMonitor$MonitoredItem'
C:/devel/TransactionTest.java:7: The method getCount(java.lang.String, java.lang
.String) is undefined for the type Transaction
theTransaction.getCount(&quot;method-execution&quot;, &quot;commit&quot;);
               ^^^^^^^^

2 errors</column>
            <column name="report_time">2003-02-20 17:33:37</column>
            <column name="report_timestamp">1045780000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">0a175d2</column>
            <column name="commit_timestamp">1046990000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseScope.java
tests/bugs/InnerPointcut.java
tests/bugs/interfaceNames/TransactionTest.java
tests/bugs/interfaceNames/sub/ExecutionMonitor.java
tests/new/EachObjectInDeepPackage.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">582</column>
            <column name="bug_id">33948</column>
            <column name="summary">Bug 33948  inter-type no-arg constructor declaration conflict with compiler-generated constructor</column>
            <column name="description">Get error

  &quot;inter-type declaration from A conflicts with existing member&quot;

when declaring a no-arg constructor in an aspect on another type which has no 
constructors.  Likely the compiler is generating a default constructor which 
collides in the weaver.  See test case:

  tests/bugs/ConstructorDeclaration.java

Can the weaver reliably check that a default constructor was generated by the 
compiler (ours or javac or ...)?  Otherwise, this could be a known limitation.</column>
            <column name="report_time">2003-03-06 02:48:01</column>
            <column name="report_timestamp">1046940000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">6a8fa08</column>
            <column name="commit_timestamp">1046940000</column>
            <column name="files">tests/bugs/ConstructorDeclaration.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">583</column>
            <column name="bug_id">32463</column>
            <column name="summary">Bug 32463  ajc reports error when encountering static declaration of nested classes</column>
            <column name="description">Version: AspectJ Compiler 1.1beta4

The ajc compiler issues a spurious error message and exits with a negative 
error code when weaving code containing static declaration of a nested class. 
The compiler seem to write the classfiles correctly but the negative exit 
status causes problems when e.g. using the AjcCompilerAdapter in ant.

To reproduce:
1) Extract the following two files into an empty directory:
// File: A.aj:
aspect A  {

    pointcut withinTest(): within(Test);
    pointcut callToHandleOrder() : (withinTest() &amp;&amp;
                             call(* handleOrder(..)));

    Object around(): callToHandleOrder() {

      return &quot;DUMMY inserted by ASPECT&quot; ;
   }
}
// End of File A.aj

// File : Test.java
public class Test
{
    // Commenting out the static declaration makes everything work OK
    static
    {
        class StaticNestedClass
        {
        }
    }
    
    public static void main(String[] args)
    {
      System.out.println(new Test().handleOrder(&quot;test&quot;));
    }

    private String handleOrder(String t)
    {
      return t;
    }

}
// End of Test.java

2) Compile the files 
   ajc -sourceroots . -verbose

Output:
-----
compiling c:/aspectj1.1/doc/examples/bug/./A.aj
compiling c:/aspectj1.1/doc/examples/bug/./Test.java
weaving
might need to weave [UnwovenClassFile(null, Test$1$StaticNestedClass), 
UnwovenClassFile(null, A), UnwovenClassFile(null, Test)](world=true)
wrote class file: c:\aspectj1.1\doc\examples\bug\A.class
can't find type Test$1
wrote class file: c:\aspectj1.1\doc\examples\bug\Test$1$StaticNestedClass.class
wrote class file: c:\aspectj1.1\doc\examples\bug\Test.class

1 error
------</column>
            <column name="report_time">2003-02-21 05:59:47</column>
            <column name="report_timestamp">1045830000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d1e5c0a</column>
            <column name="commit_timestamp">1046910000</column>
            <column name="files">tests/bugs/WeaveLocal.java
weaver/src/org/aspectj/weaver/NameMangler.java
weaver/src/org/aspectj/weaver/ResolvedTypeX.java
weaver/src/org/aspectj/weaver/TypeX.java
weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java
weaver/testsrc/org/aspectj/weaver/TypeXTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">584</column>
            <column name="bug_id">33635</column>
            <column name="summary">Bug 33635  Negation of if pointcut does not work</column>
            <column name="description"></column>
            <column name="report_time">2003-03-02 20:01:54</column>
            <column name="report_timestamp">1046650000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">cb77524</column>
            <column name="commit_timestamp">1046900000</column>
            <column name="files">tests/bugs/NotIf.java
weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">585</column>
            <column name="bug_id">30026</column>
            <column name="summary">Bug 30026  NullPointerException when compiling</column>
            <column name="description">With the following program I get a NullPointerException during compiling and a
warning that the source code of Object is not available for weaving:

public class NullPtr {
    public static void main(String args[]) {
        NullPtr np = new NullPtr();
        np = null;
    }

    public void finalize() throws Throwable {
    }
}

aspect FinalizeContract {
    pointcut finalizeCall(Object o):
        this(Object+) &amp;&amp;
        this(o) &amp;&amp;
        execution(void finalize());

    void around(Object o) throws Throwable: finalizeCall(o) {
        o.finalize();               // error
        ((NullPtr) o).finalize();   // ok
        proceed(o);
    }
}

It works if I comment out the line indicated by the // error comment or if I
declare the aspect as privileged.</column>
            <column name="report_time">2003-01-22 17:06:50</column>
            <column name="report_timestamp">1043270000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">8e6cef0</column>
            <column name="commit_timestamp">1045190000</column>
            <column name="files">tests/bugs/Finalizer.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">586</column>
            <column name="bug_id">31423</column>
            <column name="summary">Bug 31423  Pointcut adviceexecution() does not work</column>
            <column name="description">Pointcut adviceexecution() does not seem to pick advice execution
join points in beta4. Here is a program that shows the problem:

public class Test {
    public static void main(String[] args) {
    }
}

aspect Aspect1 {
    before() : execution(* Test.*(..)) {
	System.out.println(&quot;Reached &quot; + thisJoinPoint);
    }
}

aspect Aspect2 {
    before() : adviceexecution() &amp;&amp; !within(Aspect2) {
	System.out.println(&quot;Reached &quot; + thisJoinPoint);
    }
}

F:\aop\bugs\1.1\b4\adviceexecution&gt;ajc -version
AspectJ Compiler 1.1beta4

F:\aop\bugs\1.1\b4\adviceexecution&gt;ajc Test.java

F:\aop\bugs\1.1\b4\adviceexecution&gt;java Test
Reached execution(void Test.main(String[]))</column>
            <column name="report_time">2003-02-09 12:29:28</column>
            <column name="report_timestamp">1044810000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">19c3e16</column>
            <column name="commit_timestamp">1045180000</column>
            <column name="files">tests/bugs/AdviceExec.java
weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java
weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">587</column>
            <column name="bug_id">30168</column>
            <column name="summary">Bug 30168  Error with certain combination of advice</column>
            <column name="description"></column>
            <column name="report_time">2003-01-24 07:25:03</column>
            <column name="report_timestamp">1043410000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">d15eb32</column>
            <column name="commit_timestamp">1045170000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java
tests/bugs/crashes/test/Test3.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">588</column>
            <column name="bug_id">29959</column>
            <column name="summary">Bug 29959  super call in intertype method declaration body causes VerifyError</column>
            <column name="description">AspectJ Compiler 1.1beta4
This program:

aspect Foo {
  void A.foo() { }
  void B.foo() { super.foo(); }
}

class A { }
class B extends A { }

class Main {
  public static void main(String[] args) {
    new B();
  }
}

causes this error at runtime:

Exception in thread &quot;main&quot; java.lang.VerifyError: (class: B, method: ajc$superDispatch$B$foo signature: ()V) Illegal use of nonvirtual function call
	at Main.main(Foo.java:11)

Note that foo is never even called; the error happens at load time when the new B() expression causes class B to be loaded.  There's no error if either one of the foo methods is declared in its class directly.

This is kind of a showstopper...

--Doug</column>
            <column name="report_time">2003-01-22 07:10:28</column>
            <column name="report_timestamp">1043240000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">3e2801a</column>
            <column name="commit_timestamp">1045170000</column>
            <column name="files">org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeConstructorDeclaration.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/SuperFixerVisitor.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMethodBinding.java
org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java
org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java
tests/bugs/SuperToIntro.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">589</column>
            <column name="bug_id">29769</column>
            <column name="summary">Bug 29769  Ajde does not support new AspectJ 1.1 compiler options</column>
            <column name="description">The org.aspectj.ajde.BuildOptionsAdapter interface does not yet support the new 
AspectJ 1.1 compiler options. These need to be added to the interface, any old 
or renamed options deprecated, and then the correct processing needs to happen 
within Ajde to pass these options to the compiler.

This enhancement is needed by the various IDE projects for there AspectJ 1.1
support.</column>
            <column name="report_time">2003-01-19 11:42:17</column>
            <column name="report_timestamp">1042990000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">85a827a</column>
            <column name="commit_timestamp">1043460000</column>
            <column name="files">ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserProperties.java
ajde/src/org/aspectj/ajde/BuildOptionsAdapter.java
ajde/src/org/aspectj/ajde/ProjectPropertiesAdapter.java
ajde/src/org/aspectj/ajde/internal/AspectJBuildManager.java
ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java
ajde/src/org/aspectj/ajde/ui/internal/AjcBuildOptions.java
ajde/testdata/examples/figures-coverage/figures/Figure.java
ajde/testsrc/org/aspectj/ajde/AjdeTests.java
ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java
ajde/testsrc/org/aspectj/ajde/BuildOptionsTest.java
ajde/testsrc/org/aspectj/ajde/NullIdeManager.java
ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java
ajde/testsrc/org/aspectj/ajde/StructureModelRegressionTest.java
ajde/testsrc/org/aspectj/ajde/StructureModelTest.java
ajde/testsrc/org/aspectj/ajde/ui/StructureViewManagerTest.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java
org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">590</column>
            <column name="bug_id">29662</column>
            <column name="summary">Bug 29662  VerifyError on accessing objects not accessible to the weaver: Incompatible object argument for invokespecial</column>
            <column name="description">I use aspectj1.1b4 (the version list box did not let me choose, it offered only
&quot;unspecified&quot;).

Compiling the program below yields a warning that a affected type is not exposed
to the weaver. Running it crashes the program with this message:
&quot;java.lang.VerifyError: (class: VerifyError, method: finalize signature: ()V)
Incompatible object argument for invokespecial&quot;


public class VerifyError {
    public static void main(String args[]) {
        VerifyError ve = new VerifyError();
    }

    protected void finalize() {}
}

aspect FinalizeContract {
    pointcut finalizeCall(Object o):
        this(Object+) &amp;&amp;
        this(o) &amp;&amp;
        execution(void finalize());

    void around(Object o) throws Throwable: finalizeCall(o) {
        super.finalize();
        proceed(o);
    }
}</column>
            <column name="report_time">2003-01-16 15:12:47</column>
            <column name="report_timestamp">1042750000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2d297d7</column>
            <column name="commit_timestamp">1043190000</column>
            <column name="files">tests/bugs/AroundAccess.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">591</column>
            <column name="bug_id">29186</column>
            <column name="summary">Bug 29186  ajc -emacssym chokes on pointcut that includes an intertype method</column>
            <column name="description"></column>
            <column name="report_time">2003-01-08 21:22:48</column>
            <column name="report_timestamp">1042080000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">c1260e6</column>
            <column name="commit_timestamp">1042580000</column>
            <column name="files">asm/src/org/aspectj/asm/StructureModel.java
org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java
weaver/src/org/aspectj/weaver/AsmAdaptor.java
weaver/src/org/aspectj/weaver/Lint.java
weaver/src/org/aspectj/weaver/ResolvedTypeX.java
weaver/src/org/aspectj/weaver/Shadow.java
weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">592</column>
            <column name="bug_id">28919</column>
            <column name="summary">Bug 28919  waever tries to weave into native methods ...</column>
            <column name="description">If you don't find the exception below in a bug, please add a new bug
To make the bug a priority, please include a test program
that can reproduce this exception.
bad non-abstract method with no code: private native int 
nativeMessagePumpInitialize() on public class 
plc.comm.pvi.PviCom$LinkEventHandlerImpl
bad non-abstract method with no code: private native int 
nativeMessagePumpInitialize() on public class 
plc.comm.pvi.PviCom$LinkEventHandlerImpl
java.lang.RuntimeException: bad non-abstract method with no code: private 
native int nativeMessagePumpInitialize() on public class 
plc.comm.pvi.PviCom$LinkEventHandlerImpl
        at org.aspectj.weaver.bcel.LazyMethodGen.&lt;init&gt;(Unknown Source)
        at org.aspectj.weaver.bcel.LazyClassGen.&lt;init&gt;(Unknown Source)
        at org.aspectj.weaver.bcel.BcelObjectType.getLazyClassGen(Unknown 
Source)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(Unknown Source)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(Unknown Source)
        at 
org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFiles
(Unknown Source)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild
(Unknown Source)
        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(Unknown Source)
        at org.aspectj.tools.ajc.Main.run(Unknown Source)
        at org.aspectj.tools.ajc.Main.runMain(Unknown Source)
        at org.aspectj.tools.ajc.Main.main(Unknown Source)</column>
            <column name="report_time">2002-12-30 16:40:03</column>
            <column name="report_timestamp">1041280000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">2781720</column>
            <column name="commit_timestamp">1042570000</column>
            <column name="files">weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</column>
            <column name="result"></column>
        </table>
        <table name="aspectj">
            <column name="id">593</column>
            <column name="bug_id">28974</column>
            <column name="summary">Bug 28974  Compiler error when introducing a &quot;final&quot; field</column>
            <column name="description">The aspect below fails to compile with 1.1b2, producing the compilation error: 
--------------------
$ ajc com/ibm/amc/*.java com/ibm/amc/ejb/*.java
d:/eclipse/runtime-workspace-ajsamples/Mock EJBs/com/ibm/amc/DemoBeanEJB.java:1:
 Cannot assign a value to the final field com.ibm.amc.DemoBean.ajc$interField$co
m_ibm_amc$verbose

!! no source information available !!

1 error
---------------------------


package com.ibm.amc;

import com.ibm.amc.ejb.SessionBean;
/**
 * @author colyer
 *
 * To change this generated comment edit the template variable &quot;typecomment&quot;:
 * Window&gt;Preferences&gt;Java&gt;Templates.
 * To enable and disable the creation of type comments go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation.
 */
public aspect DemoBeanEJB {

	declare parents: DemoBean implements SessionBean;
	
        // THIS NEXT LINE IS THE CULPRIT
	static final boolean DemoBean.verbose = true;
	
	private transient String DemoBean.ctx;
	
	public void DemoBean.ejbActivate( ) {
		if ( verbose ) {
			System.out.println( &quot;ejbActivate Called&quot; );	
		}	
	}
}


-------------------
Making the inter-type declaration non-final solves the problem...</column>
            <column name="report_time">2003-01-03 10:28:23</column>
            <column name="report_timestamp">1041610000</column>
            <column name="status">resolved fixed</column>
            <column name="commit">99a873c</column>
            <column name="commit_timestamp">1042570000</column>
            <column name="files">weaver/src/org/aspectj/weaver/AjcMemberMaker.java</column>
            <column name="result"></column>
        </table>
    </database>
</pma_xml_export>